@charset "UTF-8";
/*! style.css https://github.com/masuP9/masuP.net_style */
/*! normalize.css v3.0.0 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9.
 * Hide the `template` element in IE, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0;
}

/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8+, and Opera
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/* _layout.scss
   ========================================================================== */
.g-header .c-sitename, .main, .globalFooter {
  max-width: 44rem;
  width: 70%;
  margin-right: auto;
  margin-left: auto;
}
@media screen and (max-width: 48em) {
  .g-header .c-sitename, .main, .globalFooter {
    width: 90%;
    margin-right: 5%;
    margin-left: 5%;
  }
}

.g-header {
  position: relative;
  margin-bottom: 2rem;
}
.g-header .c-sitename > a {
  text-shadow: 0 0 transparent;
  transition: text-shadow .4s ease;
  color: #E4572E;
  text-shadow: 0 0 #605040, 1px 1px #605040, 2px 2px #605040, 3px 3px #605040, 4px 4px #605040, 5px 5px #605040;
}
.g-header .c-sitename > a:hover {
  text-shadow: 0 0 #605040, 1px 1px #605040, 2px 2px #605040, 3px 3px #605040, 4px 4px #605040, 5px 5px #605040, 6px 6px #605040, 7px 7px #605040, 8px 8px #605040;
}

.main {
  margin-bottom: 2rem;
}

.globalFooter {
  position: relative;
  padding-top: 1rem;
  padding-bottom: 1rem;
  margin-top: 2rem;
}
.globalFooter .sns-list {
  position: absolute;
  bottom: 1rem;
  right: 0;
  margin: 0;
  text-align: right;
}
.globalFooter .sns-list > li {
  margin-left: 1rem;
}

.back2top {
  text-align: center;
}
.back2top > a {
  display: inline-block;
  height: 1.7em;
  width: 1.7em;
  border: 1px solid #E4572E;
  border-radius: 51%;
  text-decoration: none;
  vertical-align: middle;
}

.site-nav {
  margin: 1rem 0;
  padding: 0;
  list-style: none;
}
.site-nav > li {
  text-transform: uppercase;
}
.site-nav > li > a {
  text-decoration: none;
}
.site-nav > li > a:hover {
  text-decoration: underline;
}

.copyright {
  margin: .5em 0;
}
.copyright a,
.copyright a:visited {
  color: #47484B;
  text-decoration: none;
}

/* _core.scss
   ========================================================================== */
html {
  background: #fdfff8;
  color: #47484B;
  font-family: "Source Sans Pro", "ヒラギノ角ゴ ProN", "Hiragino Kaku Gothic ProN", "メイリオ", Meiryo, sans-serif;
  font-size: 1em;
  line-height: 1.7;
}

a {
  color: #c5401a;
  text-decoration: underline;
  transition: color .15s ease;
}

a:visited {
  color: #983214;
}

a:hover {
  color: #e4572e;
  text-decoration: none;
}

a:active {
  position: relative;
  top: 1px;
}

h1, h2, h3, h4, h5, h6 {
  clear: both;
  -webkit-font-feature-settings: "kern" 1;
          font-feature-settings: "kern" 1;
  font-variant: proportional-width;
}

abbr[title] {
  border-bottom-width: 0;
}

figure {
  margin: 0;
}

/* -- Source Code -- */
code {
  font-family: "Source Code Pro", monospace;
}

.code dt {
  font-family: "Viga", sans-serif;
  letter-spacing: 1px;
}

figcaption, .article-info, .article-body code, .p-article-permalink-link, .article-ads-title, .p-article-pager-link {
  font-size: 0.875em;
}

.recent-article-item-title, .archive-list-item-title {
  font-size: 1.125em;
}

.back2top > a, .recentArticleSection h1 {
  font-size: 1.5em;
}

.p-article-title, .archive-title, .pageSectionHeader h1, .recent-article-item:first-child .recent-article-item-title {
  font-size: 2em;
}

.p-article-title, .archive-title, .pageSectionHeader h1 {
  margin-top: 0;
  line-height: 1.35;
  -webkit-font-smoothing: antialiased;
}
@media screen and (max-width: 48em) {
  .p-article-title, .archive-title, .pageSectionHeader h1 {
    font-size: 1.5em;
  }
}

/* -- %buttonSimple -- */
/* _conponent.scss
  ========================================================================== */
.c-sitename {
  font-family: "Viga", sans-serif;
  -webkit-font-smoothing: antialiased;
}
.c-sitename a {
  color: #47484B;
  text-decoration: none;
}

.c-icon {
  display: inline-block;
}

.c-flat-list, .site-nav {
  list-style: none;
  padding-left: 0;
}

.c-flat-list > li, .site-nav > li,
.c-flat-list > dt,
.site-nav > dt,
.c-flat-list > dd,
.site-nav > dd {
  display: inline-block;
  margin-right: .5rem;
}
.c-flat-list > li:last-child, .site-nav > li:last-child,
.c-flat-list > dt:last-child,
.site-nav > dt:last-child,
.c-flat-list > dd:last-child,
.site-nav > dd:last-child {
  margin-right: 0;
}

/* -- tag -- */
.c-tag, .article-tag {
  position: relative;
  display: inline-block;
  margin-right: .5em;
  padding: 0 1.75em 0 1em;
  border-radius: 0.1875em 0 0 0.1875em;
  background: #eaeaea;
}
.c-tag:before, .article-tag:before {
  content: " ";
  display: block;
  position: absolute;
  top: 0;
  left: .4em;
  bottom: 0;
  height: 0.25em;
  width: 0.25em;
  margin: auto;
  border-radius: 100%;
  background-color: #fdfff8;
  line-height: 1;
}
.c-tag:after, .article-tag:after {
  content: " ";
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  width: 0;
  height: 0;
  margin: auto;
  border: 1em solid transparent;
  border-right-color: #fdfff8;
}

/* -- SiteName --*/
.siteName span {
  letter-spacing: -.1em;
}

/*
 _index.scss
 TOPページ関連
 */
.index .g-header {
  height: 40vh;
}
.index .g-header .c-sitename {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  margin: auto;
  height: 1.7em;
  width: 100%;
  font-size: 10vmin;
  text-align: center;
}
@media screen and (max-width: 48em) {
  .index .g-header .c-sitename {
    font-size: 12vmin;
  }
}
.index .g-header .c-sitename a {
  text-shadow: 0 0 #605040, 1px 1px #605040, 2px 2px #605040, 3px 3px #605040, 4px 4px #605040, 5px 5px #605040, 6px 6px #605040, 7px 7px #605040;
}
.index .g-header .c-sitename a:hover {
  text-shadow: 0 0 #605040, 1px 1px #605040, 2px 2px #605040, 3px 3px #605040, 4px 4px #605040, 5px 5px #605040, 6px 6px #605040, 7px 7px #605040, 8px 8px #605040, 9px 9px #605040, 10px 10px #605040, 11px 11px #605040, 12px 12px #605040, 13px 13px #605040, 14px 14px #605040;
}
.index .g-header .sitedescription {
  position: absolute;
  bottom: .25rem;
  text-align: center;
  right: 1rem;
  left: 1rem;
}

.siteDescription {
  margin: 0;
}

.recent-article {
  margin: 0;
  padding: 0;
  list-style: none;
}
.recent-article:after {
  content: "";
  display: table;
  clear: both;
}

.recent-article-item {
  box-sizing: border-box;
  float: left;
  width: 47.5%;
  margin-left: 5%;
  margin-bottom: 2.55rem;
}
.recent-article-item:nth-child(2n+2) {
  clear: left;
  margin-left: 0;
}
@media screen and (max-width: 48em) {
  .recent-article-item {
    width: 100%;
    height: auto;
    margin: 0 0 2rem 0;
  }
}
.recent-article-item > a {
  display: block;
  text-decoration: none;
  transition: all .2s ease;
}
.recent-article-item > a:hover {
  margin: -1em;
  padding: 1em;
  border-radius: 0.3125em;
  background-color: #eaeaea;
}

.recent-article-item-published-time {
  font-family: "Viga", sans-serif;
  color: #47484B;
}

.recent-article-item-title {
  margin: 0;
  padding: .2rem 0 .3rem;
  font-weight: normal;
  line-height: 1.35;
}

.recent-article-item:first-child {
  float: none;
  width: 100%;
  max-width: 44rem;
  height: auto;
  margin-left: 0;
}
@media screen and (min-width: 980px) {
  .recent-article-item:first-child {
    margin-left: auto;
    margin-right: auto;
  }
}
.recent-article-item:first-child .recent-article-item-title {
  margin-bottom: .25em;
  font-weight: bold;
  text-decoration: none;
  color: #E4572E;
}
@media screen and (max-width: 48em) {
  .recent-article-item:first-child .recent-article-item-title {
    font-size: 1.375em;
  }
}
.recent-article-item:first-child .recent-article-item-title > a {
  text-decoration: none;
}
.recent-article-item:first-child .recent-article-item-description {
  margin: 0;
  color: #47484B;
}
@media screen and (max-width: 48em) {
  .recent-article-item:first-child .recent-article-item-description {
    font-size: 0.875em;
  }
}

/*
 _article.scss
 記事ページのスタイル
*/
/* -- Article -- */
.p-article-header {
  margin: 4rem 0;
}

/* -- .articleInfo -- */
.article-info-label {
  float: left;
}

.article-info-label:after {
  content: ":";
  margin: 0 .15rem;
  font-weight: bold;
}

.article-info-prop {
  margin-left: 0;
}

/* -- 本文エリア -- */
.article-body h2 {
  margin-top: 3.4em;
}
@media screen and (max-width: 48em) {
  .article-body h2 {
    line-height: 1.25;
    font-size: 1.25em;
  }
}
.article-body h3 {
  margin-top: 2.55em;
}
.article-body p {
  margin: 1.7em 0;
}
.article-body h2 + p, .article-body h3 + p, .article-body h4 + p, .article-body h5 + p, .article-body h6 + p {
  margin-top: 0;
}
.article-body ul,
.article-body ol {
  padding-left: 1em;
}
.article-body dt {
  font-weight: bold;
}
.article-body dd {
  margin-left: 0;
}
.article-body dd + dt {
  margin-top: .5em;
}
.article-body hr {
  margin: 1.75em 3em;
  border: 0;
  border-top: 0.2em solid #eaeaea;
}
.article-body table {
  max-width: 100%;
  min-width: 50%;
  margin: 1em auto 1.75em;
}
@media screen and (max-width: 48em) {
  .article-body table {
    font-size: 0.875em;
  }
}
.article-body caption {
  margin-bottom: .25em;
}
.article-body td, .article-body th {
  padding: 1em;
}
@media screen and (max-width: 48em) {
  .article-body td, .article-body th {
    padding: .25em;
  }
}
.article-body th {
  padding-bottom: .5em;
  border-bottom: 2px solid #E4572E;
}
.article-body td {
  border-bottom: 1px solid #85CB33;
}
.article-body img {
  max-width: 100%;
}
.article-body img[class^="mt-image"] {
  height: auto;
}
.article-body .mt-image-left {
  float: left;
  margin: 0 2rem 2rem 0;
}
@media screen and (max-width: 48em) {
  .article-body .mt-image-left {
    margin: 0 1rem 1rem 0;
  }
}
.article-body .mt-image-right {
  float: right;
  margin: 0 0 2rem 2rem;
}
@media screen and (max-width: 48em) {
  .article-body .mt-image-right {
    margin: 0 0 1rem 1rem;
  }
}
.article-body .mt-image-center {
  display: block;
  max-width: 111%;
  margin: 0 -5% .5em;
}
.article-body blockquote {
  margin-left: 0;
  margin-right: 0;
  padding-left: 1em;
  border-left: 3px solid #eaeaea;
}
.article-body cite {
  text-align: right;
}
.article-body pre > code {
  border-bottom: 3px solid #999;
}
.article-body figure {
  margin-bottom: 1.7em;
}
.article-body p code {
  margin: 0 2px;
  padding: 0 3px 2px;
  border-radius: 3px;
  background: #eaeaea;
  vertical-align: top;
}

.code dd {
  margin: 0;
}

/* -- Quote --*/
.quote {
  position: relative;
  padding: .5em 1rem 3em 1rem;
  background: #eaeaea;
}
.quote dd {
  margin-left: 0;
}
.quote blockquote {
  position: relative;
  margin: 0;
  padding: 0;
}
.quote .cite {
  position: absolute;
  right: 1rem;
  bottom: 1rem;
  text-align: right;
}

.embed-iframe {
  position: relative;
  width: 100%;
  padding-bottom: 56.25%;
}
.embed-iframe > iframe {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  height: 100%;
  width: 100%;
}

/* -- 参考にしたWebページ -- */
.reference-web-page > dd {
  margin: 0 0 .25rem;
}

.p-article-permalink {
  margin: 2rem 0;
}

.p-article-permalink-label {
  margin-top: 1rem;
  font-weight: bold;
}

.p-article-permalink-link {
  margin-left: 0;
}

.articleAds {
  margin: 2rem 0;
}

.article-ads-title {
  border-bottom: 1px solid #eaeaea;
}

.p-article-pager {
  position: relative;
  margin: 4rem auto;
}

.p-article-pager-label {
  width: 50%;
  margin-top: 1rem;
  font-weight: bold;
}

.p-article-pager-link {
  box-sizing: border-box;
  width: 50%;
  margin-left: 0;
}
.p-article-pager-link > a {
  display: block;
}

.p-article-pager-older {
  padding-right: 1rem;
}
@media screen and (max-width: 48em) {
  .p-article-pager-older {
    padding-right: .5rem;
  }
}

.p-article-pager-newer {
  position: absolute;
  top: 0;
  right: 0;
  margin-top: 0;
  padding-left: 1rem;
  text-align: right;
}
@media screen and (max-width: 48em) {
  .p-article-pager-newer {
    padding-left: .5rem;
  }
}

.p-article-pager-newer.p-article-pager-link {
  top: 1.5rem;
}

/* _archive.scss
  ========================================================================== */
.archive-list {
  padding-left: 0;
  list-style: none;
}

.archive-list-item .article-info {
  width: auto;
  margin-bottom: .5rem;
  text-align: left;
}
.archive-list-item .article-info-label:first-child {
  margin-left: 0;
}

.archive-list-item-title {
  margin: 0 0 2rem;
  line-height: 1.3;
  font-weight: bold;
}
.archive-list-item-title > a {
  text-decoration: none;
}

/*
 _page.scss
 ウェブページのスタイル
*/
/* -- Page -- */
/* -- Page About --*/
.profilePhoto {
  float: left;
  width: 25%;
  height: auto;
  max-width: 9em;
  margin-right: 1em;
  margin-bottom: 1em;
  border-radius: 50%;
}

/*!

github.com style (c) Vasily Polovnyov <vast@whiteants.net>

*/
.hljs {
  display: block;
  overflow-x: auto;
  padding: 0.5em;
  color: #333;
  background: #f8f8f8;
  -webkit-text-size-adjust: none;
}

.hljs-comment,
.diff .hljs-header,
.hljs-javadoc {
  color: #998;
  font-style: italic;
}

.hljs-keyword,
.css .rule .hljs-keyword,
.hljs-winutils,
.nginx .hljs-title,
.hljs-subst,
.hljs-request,
.hljs-status {
  color: #333;
  font-weight: bold;
}

.hljs-number,
.hljs-hexcolor,
.ruby .hljs-constant {
  color: #008080;
}

.hljs-string,
.hljs-tag .hljs-value,
.hljs-phpdoc,
.hljs-dartdoc,
.tex .hljs-formula {
  color: #d14;
}

.hljs-title,
.hljs-id,
.scss .hljs-preprocessor {
  color: #900;
  font-weight: bold;
}

.hljs-list .hljs-keyword,
.hljs-subst {
  font-weight: normal;
}

.hljs-class .hljs-title,
.hljs-type,
.vhdl .hljs-literal,
.tex .hljs-command {
  color: #458;
  font-weight: bold;
}

.hljs-tag,
.hljs-tag .hljs-title,
.hljs-rules .hljs-property,
.django .hljs-tag .hljs-keyword {
  color: #000080;
  font-weight: normal;
}

.hljs-attribute,
.hljs-variable,
.lisp .hljs-body {
  color: #008080;
}

.hljs-regexp {
  color: #009926;
}

.hljs-symbol,
.ruby .hljs-symbol .hljs-string,
.lisp .hljs-keyword,
.clojure .hljs-keyword,
.scheme .hljs-keyword,
.tex .hljs-special,
.hljs-prompt {
  color: #990073;
}

.hljs-built_in {
  color: #0086b3;
}

.hljs-preprocessor,
.hljs-pragma,
.hljs-pi,
.hljs-doctype,
.hljs-shebang,
.hljs-cdata {
  color: #999;
  font-weight: bold;
}

.hljs-deletion {
  background: #fdd;
}

.hljs-addition {
  background: #dfd;
}

.diff .hljs-change {
  background: #0086b3;
}

.hljs-chunk {
  color: #aaa;
}



/*# sourceMappingURL=data:application/json;base64, */
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlLmNzcyIsIi9zb3VyY2UvZm91bmRhdGlvbi9fbm9ybWFsaXplLnNjc3MiLCIvc291cmNlL2ZvdW5kYXRpb24vX2xheW91dC5zY3NzIiwiL3NvdXJjZS9mb3VuZGF0aW9uL19taXhpbi5zY3NzIiwiL3NvdXJjZS9mb3VuZGF0aW9uL192YXJpYWJsZS5zY3NzIiwiL3NvdXJjZS9mb3VuZGF0aW9uL19mdW5jdGlvbi5zY3NzIiwiL3NvdXJjZS9mb3VuZGF0aW9uL19jb3JlLnNjc3MiLCIvc291cmNlL2ZvdW5kYXRpb24vX2V4dGVuZHMuc2NzcyIsIi9zb3VyY2Uvb2JqZWN0L2NvbXBvbmVudC9fY29tcG9uZW50LnNjc3MiLCIvc291cmNlL29iamVjdC9wcm9qZWN0L19pbmRleC5zY3NzIiwiL3NvdXJjZS9vYmplY3QvcHJvamVjdC9fYXJ0aWNsZS5zY3NzIiwiL3NvdXJjZS9vYmplY3QvcHJvamVjdC9fYXJjaGl2ZS5zY3NzIiwiL3NvdXJjZS9vYmplY3QvcHJvamVjdC9fcGFnZS5zY3NzIiwiL3NvdXJjZS9saWIvaGlnaGxpZ2h0anMvX2dpdGh1Yi5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQjtBQUNqQiwwREFBMEQ7QUFDMUQsNERBQTREO0FBQzVEOzs7O0dBSUc7QUNDSDtFQUNFLHdCQUF1QjtFREN2QixPQUFPO0VDQVAsMkJBQTBCO0VERTFCLE9BQU87RUNEUCwrQkFBOEI7RURHOUIsT0FBTztDQUNSOztBQUVEOztHQUVHO0FDREg7RUFDRSxVQUFTO0NER1Y7O0FBRUQ7Z0ZBQ2dGO0FBQ2hGOztHQUVHO0FDQ0g7Ozs7Ozs7Ozs7OztFQVlFLGVBQWM7Q0RDZjs7QUFFRDs7O0dBR0c7QUNFSDs7OztFQUlFLHNCQUFxQjtFREFyQixPQUFPO0VDQ1AseUJBQXdCO0VEQ3hCLE9BQU87Q0FDUjs7QUFFRDs7O0dBR0c7QUNDSDtFQUNFLGNBQWE7RUFDYixVQUFTO0NEQ1Y7O0FBRUQ7OztHQUdHO0FDRUg7O0VBRUUsY0FBYTtD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QVc7RUFDWCxXQUFVO0VBQ1YsYUFBWTtFQUNaLGVBQWM7RUFDZCxrQkFBaUI7RUFDakIsbUJBQWtCO0VBQ2xCLG1CQUFrQjtDWndoQ25COztBQUVEOzs7O0VBSUU7QWE1aUNGO0VBQ0UsZUFBYztFQUNkLGlCQUFnQjtFQUNoQixlQUFjO0VBQ2QsWUFBVztFQUNYLG9CQUFtQjtFQUNuQiwrQkFBOEI7Q2I4aUMvQjs7QWEzaUNEOzs7RUFHRSxZQUFXO0VBQ1gsbUJBQWtCO0NiOGlDbkI7O0FhM2lDRDs7Ozs7OztFQU9FLFlBQVc7RUFDWCxrQkFBaUI7Q2I4aUNsQjs7QWEzaUNEOzs7RUFHRSxlQUFjO0NiOGlDZjs7QWEzaUNEOzs7OztFQUtFLFlBQVc7Q2I4aUNaOztBYTNpQ0Q7OztFQUdFLFlBQVc7RUFDWCxrQkFBaUI7Q2I4aUNsQjs7QWEzaUNEOztFQUVFLG9CQUFtQjtDYjhpQ3BCOztBYTNpQ0Q7Ozs7RUFJRSxZQUFXO0VBQ1gsa0JBQWlCO0NiOGlDbEI7O0FhM2lDRDs7OztFQUlFLGVBQWM7RUFDZCxvQkFBbUI7Q2I4aUNwQjs7QWEzaUNEOzs7RUFHRSxlQUFjO0NiOGlDZjs7QWEzaUNEO0VBQ0UsZUFBYztDYjhpQ2Y7O0FhM2lDRDs7Ozs7OztFQU9FLGVBQWM7Q2I4aUNmOztBYTNpQ0Q7RUFDRSxlQUFjO0NiOGlDZjs7QWEzaUNEOzs7Ozs7RUFNRSxZQUFXO0VBQ1gsa0JBQWlCO0NiOGlDbEI7O0FhM2lDRDtFQUNFLGlCQUFnQjtDYjhpQ2pCOztBYTNpQ0Q7RUFDRSxpQkFBZ0I7Q2I4aUNqQjs7QWEzaUNEO0VBQ0Usb0JBQW1CO0NiOGlDcEI7O0FhM2lDRDtFQUNFLFlBQVc7Q2I4aUNaOzs7O0FBSUQseWxnREFBeWxnRCIsImZpbGUiOiI8bm8tb3V0cHV0PiIsInNvdXJjZXNDb250ZW50IjpbIkBjaGFyc2V0IFwiVVRGLThcIjtcbi8qISBzdHlsZS5jc3MgaHR0cHM6Ly9naXRodWIuY29tL21hc3VQOS9tYXN1UC5uZXRfc3R5bGUgKi9cbi8qISBub3JtYWxpemUuY3NzIHYzLjAuMCB8IE1JVCBMaWNlbnNlIHwgZ2l0LmlvL25vcm1hbGl6ZSAqL1xuLyoqXG4gKiAxLiBTZXQgZGVmYXVsdCBmb250IGZhbWlseSB0byBzYW5zLXNlcmlmLlxuICogMi4gUHJldmVudCBpT1MgdGV4dCBzaXplIGFkanVzdCBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2UsIHdpdGhvdXQgZGlzYWJsaW5nXG4gKiAgICB1c2VyIHpvb20uXG4gKi9cbmh0bWwge1xuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcbiAgLyogMSAqL1xuICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLyogMiAqL1xuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XG4gIC8qIDIgKi9cbn1cblxuLyoqXG4gKiBSZW1vdmUgZGVmYXVsdCBtYXJnaW4uXG4gKi9cbmJvZHkge1xuICBtYXJnaW46IDA7XG59XG5cbi8qIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIENvcnJlY3QgYGJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGluIElFIDgvOS5cbiAqL1xuYXJ0aWNsZSxcbmFzaWRlLFxuZGV0YWlscyxcbmZpZ2NhcHRpb24sXG5maWd1cmUsXG5mb290ZXIsXG5oZWFkZXIsXG5oZ3JvdXAsXG5tYWluLFxubmF2LFxuc2VjdGlvbixcbnN1bW1hcnkge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IGBpbmxpbmUtYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUUgOC85LlxuICogMi4gTm9ybWFsaXplIHZlcnRpY2FsIGFsaWdubWVudCBvZiBgcHJvZ3Jlc3NgIGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxuICovXG5hdWRpbyxcbmNhbnZhcyxcbnByb2dyZXNzLFxudmlkZW8ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIC8qIDEgKi9cbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICAvKiAyICovXG59XG5cbi8qKlxuICogUHJldmVudCBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nIGBhdWRpb2Agd2l0aG91dCBjb250cm9scy5cbiAqIFJlbW92ZSBleGNlc3MgaGVpZ2h0IGluIGlPUyA1IGRldmljZXMuXG4gKi9cbmF1ZGlvOm5vdChbY29udHJvbHNdKSB7XG4gIGRpc3BsYXk6IG5vbmU7XG4gIGhlaWdodDogMDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIGBbaGlkZGVuXWAgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkuXG4gKiBIaWRlIHRoZSBgdGVtcGxhdGVgIGVsZW1lbnQgaW4gSUUsIFNhZmFyaSwgYW5kIEZpcmVmb3ggPCAyMi5cbiAqL1xuW2hpZGRlbl0sXG50ZW1wbGF0ZSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi8qIExpbmtzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBjb2xvciBmcm9tIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuYSB7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xufVxuXG4vKipcbiAqIEltcHJvdmUgcmVhZGFiaWxpdHkgd2hlbiBmb2N1c2VkIGFuZCBhbHNvIG1vdXNlIGhvdmVyZWQgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5hOmFjdGl2ZSxcbmE6aG92ZXIge1xuICBvdXRsaW5lOiAwO1xufVxuXG4vKiBUZXh0LWxldmVsIHNlbWFudGljc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOSwgU2FmYXJpIDUsIGFuZCBDaHJvbWUuXG4gKi9cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxlIHNldCB0byBgYm9sZGVyYCBpbiBGaXJlZm94IDQrLCBTYWZhcmkgNSwgYW5kIENocm9tZS5cbiAqL1xuYixcbnN0cm9uZyB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lLlxuICovXG5kZm4ge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbi8qKlxuICogQWRkcmVzcyB2YXJpYWJsZSBgaDFgIGZvbnQtc2l6ZSBhbmQgbWFyZ2luIHdpdGhpbiBgc2VjdGlvbmAgYW5kIGBhcnRpY2xlYFxuICogY29udGV4dHMgaW4gRmlyZWZveCA0KywgU2FmYXJpIDUsIGFuZCBDaHJvbWUuXG4gKi9cbmgxIHtcbiAgZm9udC1zaXplOiAyZW07XG4gIG1hcmdpbjogMC42N2VtIDA7XG59XG5cbi8qKlxuICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS5cbiAqL1xubWFyayB7XG4gIGJhY2tncm91bmQ6ICNmZjA7XG4gIGNvbG9yOiAjMDAwO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGFuZCB2YXJpYWJsZSBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5zbWFsbCB7XG4gIGZvbnQtc2l6ZTogODAlO1xufVxuXG4vKipcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGFmZmVjdGluZyBgbGluZS1oZWlnaHRgIGluIGFsbCBicm93c2Vycy5cbiAqL1xuc3ViLFxuc3VwIHtcbiAgZm9udC1zaXplOiA3NSU7XG4gIGxpbmUtaGVpZ2h0OiAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07XG59XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTtcbn1cblxuLyogRW1iZWRkZWQgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogUmVtb3ZlIGJvcmRlciB3aGVuIGluc2lkZSBgYWAgZWxlbWVudCBpbiBJRSA4LzkuXG4gKi9cbmltZyB7XG4gIGJvcmRlcjogMDtcbn1cblxuLyoqXG4gKiBDb3JyZWN0IG92ZXJmbG93IGRpc3BsYXllZCBvZGRseSBpbiBJRSA5LlxuICovXG5zdmc6bm90KDpyb290KSB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi8qIEdyb3VwaW5nIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIEFkZHJlc3MgbWFyZ2luIG5vdCBwcmVzZW50IGluIElFIDgvOSBhbmQgU2FmYXJpIDUuXG4gKi9cbmZpZ3VyZSB7XG4gIG1hcmdpbjogMWVtIDQwcHg7XG59XG5cbi8qKlxuICogQWRkcmVzcyBkaWZmZXJlbmNlcyBiZXR3ZWVuIEZpcmVmb3ggYW5kIG90aGVyIGJyb3dzZXJzLlxuICovXG5ociB7XG4gIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICBoZWlnaHQ6IDA7XG59XG5cbi8qKlxuICogQ29udGFpbiBvdmVyZmxvdyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbnByZSB7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4vKipcbiAqIEFkZHJlc3Mgb2RkIGBlbWAtdW5pdCBmb250IHNpemUgcmVuZGVyaW5nIGluIGFsbCBicm93c2Vycy5cbiAqL1xuY29kZSxcbmtiZCxcbnByZSxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIGZvbnQtc2l6ZTogMWVtO1xufVxuXG4vKiBGb3Jtc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogS25vd24gbGltaXRhdGlvbjogYnkgZGVmYXVsdCwgQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWCBhbGxvdyB2ZXJ5IGxpbWl0ZWRcbiAqIHN0eWxpbmcgb2YgYHNlbGVjdGAsIHVubGVzcyBhIGBib3JkZXJgIHByb3BlcnR5IGlzIHNldC5cbiAqL1xuLyoqXG4gKiAxLiBDb3JyZWN0IGNvbG9yIG5vdCBiZWluZyBpbmhlcml0ZWQuXG4gKiAgICBLbm93biBpc3N1ZTogYWZmZWN0cyBjb2xvciBvZiBkaXNhYmxlZCBlbGVtZW50cy5cbiAqIDIuIENvcnJlY3QgZm9udCBwcm9wZXJ0aWVzIG5vdCBiZWluZyBpbmhlcml0ZWQuXG4gKiAzLiBBZGRyZXNzIG1hcmdpbnMgc2V0IGRpZmZlcmVudGx5IGluIEZpcmVmb3ggNCssIFNhZmFyaSA1LCBhbmQgQ2hyb21lLlxuICovXG5idXR0b24sXG5pbnB1dCxcbm9wdGdyb3VwLFxuc2VsZWN0LFxudGV4dGFyZWEge1xuICBjb2xvcjogaW5oZXJpdDtcbiAgLyogMSAqL1xuICBmb250OiBpbmhlcml0O1xuICAvKiAyICovXG4gIG1hcmdpbjogMDtcbiAgLyogMyAqL1xufVxuXG4vKipcbiAqIEFkZHJlc3MgYG92ZXJmbG93YCBzZXQgdG8gYGhpZGRlbmAgaW4gSUUgOC85LzEwLlxuICovXG5idXR0b24ge1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIGluY29uc2lzdGVudCBgdGV4dC10cmFuc2Zvcm1gIGluaGVyaXRhbmNlIGZvciBgYnV0dG9uYCBhbmQgYHNlbGVjdGAuXG4gKiBBbGwgb3RoZXIgZm9ybSBjb250cm9sIGVsZW1lbnRzIGRvIG5vdCBpbmhlcml0IGB0ZXh0LXRyYW5zZm9ybWAgdmFsdWVzLlxuICogQ29ycmVjdCBgYnV0dG9uYCBzdHlsZSBpbmhlcml0YW5jZSBpbiBGaXJlZm94LCBJRSA4KywgYW5kIE9wZXJhXG4gKiBDb3JyZWN0IGBzZWxlY3RgIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3guXG4gKi9cbmJ1dHRvbixcbnNlbGVjdCB7XG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xufVxuXG4vKipcbiAqIDEuIEF2b2lkIHRoZSBXZWJLaXQgYnVnIGluIEFuZHJvaWQgNC4wLiogd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gXG4gKiAgICBhbmQgYHZpZGVvYCBjb250cm9scy5cbiAqIDIuIENvcnJlY3QgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSBgaW5wdXRgIHR5cGVzIGluIGlPUy5cbiAqIDMuIEltcHJvdmUgdXNhYmlsaXR5IGFuZCBjb25zaXN0ZW5jeSBvZiBjdXJzb3Igc3R5bGUgYmV0d2VlbiBpbWFnZS10eXBlXG4gKiAgICBgaW5wdXRgIGFuZCBvdGhlcnMuXG4gKi9cbmJ1dHRvbixcbmh0bWwgaW5wdXRbdHlwZT1cImJ1dHRvblwiXSxcbmlucHV0W3R5cGU9XCJyZXNldFwiXSxcbmlucHV0W3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgLyogMiAqL1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIC8qIDMgKi9cbn1cblxuLyoqXG4gKiBSZS1zZXQgZGVmYXVsdCBjdXJzb3IgZm9yIGRpc2FibGVkIGVsZW1lbnRzLlxuICovXG5idXR0b25bZGlzYWJsZWRdLFxuaHRtbCBpbnB1dFtkaXNhYmxlZF0ge1xuICBjdXJzb3I6IGRlZmF1bHQ7XG59XG5cbi8qKlxuICogUmVtb3ZlIGlubmVyIHBhZGRpbmcgYW5kIGJvcmRlciBpbiBGaXJlZm94IDQrLlxuICovXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5pbnB1dDo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlcjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIEZpcmVmb3ggNCsgc2V0dGluZyBgbGluZS1oZWlnaHRgIG9uIGBpbnB1dGAgdXNpbmcgYCFpbXBvcnRhbnRgIGluXG4gKiB0aGUgVUEgc3R5bGVzaGVldC5cbiAqL1xuaW5wdXQge1xuICBsaW5lLWhlaWdodDogbm9ybWFsO1xufVxuXG4vKipcbiAqIEl0J3MgcmVjb21tZW5kZWQgdGhhdCB5b3UgZG9uJ3QgYXR0ZW1wdCB0byBzdHlsZSB0aGVzZSBlbGVtZW50cy5cbiAqIEZpcmVmb3gncyBpbXBsZW1lbnRhdGlvbiBkb2Vzbid0IHJlc3BlY3QgYm94LXNpemluZywgcGFkZGluZywgb3Igd2lkdGguXG4gKlxuICogMS4gQWRkcmVzcyBib3ggc2l6aW5nIHNldCB0byBgY29udGVudC1ib3hgIGluIElFIDgvOS8xMC5cbiAqIDIuIFJlbW92ZSBleGNlc3MgcGFkZGluZyBpbiBJRSA4LzkvMTAuXG4gKi9cbmlucHV0W3R5cGU9XCJjaGVja2JveFwiXSxcbmlucHV0W3R5cGU9XCJyYWRpb1wiXSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqL1xufVxuXG4vKipcbiAqIEZpeCB0aGUgY3Vyc29yIHN0eWxlIGZvciBDaHJvbWUncyBpbmNyZW1lbnQvZGVjcmVtZW50IGJ1dHRvbnMuIEZvciBjZXJ0YWluXG4gKiBgZm9udC1zaXplYCB2YWx1ZXMgb2YgdGhlIGBpbnB1dGAsIGl0IGNhdXNlcyB0aGUgY3Vyc29yIHN0eWxlIG9mIHRoZVxuICogZGVjcmVtZW50IGJ1dHRvbiB0byBjaGFuZ2UgZnJvbSBgZGVmYXVsdGAgdG8gYHRleHRgLlxuICovXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gIGhlaWdodDogYXV0bztcbn1cblxuLyoqXG4gKiAxLiBBZGRyZXNzIGBhcHBlYXJhbmNlYCBzZXQgdG8gYHNlYXJjaGZpZWxkYCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lLlxuICogMi4gQWRkcmVzcyBgYm94LXNpemluZ2Agc2V0IHRvIGBib3JkZXItYm94YCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lXG4gKiAgICAoaW5jbHVkZSBgLW1vemAgdG8gZnV0dXJlLXByb29mKS5cbiAqL1xuaW5wdXRbdHlwZT1cInNlYXJjaFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuICAvKiAxICovXG4gIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIC8qIDIgKi9cbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XG59XG5cbi8qKlxuICogUmVtb3ZlIGlubmVyIHBhZGRpbmcgYW5kIHNlYXJjaCBjYW5jZWwgYnV0dG9uIGluIFNhZmFyaSBhbmQgQ2hyb21lIG9uIE9TIFguXG4gKiBTYWZhcmkgKGJ1dCBub3QgQ2hyb21lKSBjbGlwcyB0aGUgY2FuY2VsIGJ1dHRvbiB3aGVuIHRoZSBzZWFyY2ggaW5wdXQgaGFzXG4gKiBwYWRkaW5nIChhbmQgYHRleHRmaWVsZGAgYXBwZWFyYW5jZSkuXG4gKi9cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xufVxuXG4vKipcbiAqIERlZmluZSBjb25zaXN0ZW50IGJvcmRlciwgbWFyZ2luLCBhbmQgcGFkZGluZy5cbiAqL1xuZmllbGRzZXQge1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICBtYXJnaW46IDAgMnB4O1xuICBwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCBgY29sb3JgIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gSUUgOC85LlxuICogMi4gUmVtb3ZlIHBhZGRpbmcgc28gcGVvcGxlIGFyZW4ndCBjYXVnaHQgb3V0IGlmIHRoZXkgemVybyBvdXQgZmllbGRzZXRzLlxuICovXG5sZWdlbmQge1xuICBib3JkZXI6IDA7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqL1xufVxuXG4vKipcbiAqIFJlbW92ZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRSA4LzkuXG4gKi9cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi8qKlxuICogRG9uJ3QgaW5oZXJpdCB0aGUgYGZvbnQtd2VpZ2h0YCAoYXBwbGllZCBieSBhIHJ1bGUgYWJvdmUpLlxuICogTk9URTogdGhlIGRlZmF1bHQgY2Fubm90IHNhZmVseSBiZSBjaGFuZ2VkIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIE9TIFguXG4gKi9cbm9wdGdyb3VwIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi8qIFRhYmxlc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogUmVtb3ZlIG1vc3Qgc3BhY2luZyBiZXR3ZWVuIHRhYmxlIGNlbGxzLlxuICovXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwO1xufVxuXG50ZCxcbnRoIHtcbiAgcGFkZGluZzogMDtcbn1cblxuLyogX2xheW91dC5zY3NzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLmctaGVhZGVyIC5jLXNpdGVuYW1lLCAubWFpbiwgLmdsb2JhbEZvb3RlciB7XG4gIG1heC13aWR0aDogNDRyZW07XG4gIHdpZHRoOiA3MCU7XG4gIG1hcmdpbi1yaWdodDogYXV0bztcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG59XG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0OGVtKSB7XG4gIC5nLWhlYWRlciAuYy1zaXRlbmFtZSwgLm1haW4sIC5nbG9iYWxGb290ZXIge1xuICAgIHdpZHRoOiA5MCU7XG4gICAgbWFyZ2luLXJpZ2h0OiA1JTtcbiAgICBtYXJnaW4tbGVmdDogNSU7XG4gIH1cbn1cblxuLmctaGVhZGVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW4tYm90dG9tOiAycmVtO1xufVxuLmctaGVhZGVyIC5jLXNpdGVuYW1lID4gYSB7XG4gIHRleHQtc2hhZG93OiAwIDAgdHJhbnNwYXJlbnQ7XG4gIHRyYW5zaXRpb246IHRleHQtc2hhZG93IC40cyBlYXNlO1xuICBjb2xvcjogI0U0NTcyRTtcbiAgdGV4dC1zaGFkb3c6IDAgMCAjNjA1MDQwLCAxcHggMXB4ICM2MDUwNDAsIDJweCAycHggIzYwNTA0MCwgM3B4IDNweCAjNjA1MDQwLCA0cHggNHB4ICM2MDUwNDAsIDVweCA1cHggIzYwNTA0MDtcbn1cbi5nLWhlYWRlciAuYy1zaXRlbmFtZSA+IGE6aG92ZXIge1xuICB0ZXh0LXNoYWRvdzogMCAwICM2MDUwNDAsIDFweCAxcHggIzYwNTA0MCwgMnB4IDJweCAjNjA1MDQwLCAzcHggM3B4ICM2MDUwNDAsIDRweCA0cHggIzYwNTA0MCwgNXB4IDVweCAjNjA1MDQwLCA2cHggNnB4ICM2MDUwNDAsIDdweCA3cHggIzYwNTA0MCwgOHB4IDhweCAjNjA1MDQwO1xufVxuXG4ubWFpbiB7XG4gIG1hcmdpbi1ib3R0b206IDJyZW07XG59XG5cbi5nbG9iYWxGb290ZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHBhZGRpbmctdG9wOiAxcmVtO1xuICBwYWRkaW5nLWJvdHRvbTogMXJlbTtcbiAgbWFyZ2luLXRvcDogMnJlbTtcbn1cbi5nbG9iYWxGb290ZXIgLnNucy1saXN0IHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IDFyZW07XG4gIHJpZ2h0OiAwO1xuICBtYXJnaW46IDA7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xufVxuLmdsb2JhbEZvb3RlciAuc25zLWxpc3QgPiBsaSB7XG4gIG1hcmdpbi1sZWZ0OiAxcmVtO1xufVxuXG4uYmFjazJ0b3Age1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4uYmFjazJ0b3AgPiBhIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBoZWlnaHQ6IDEuN2VtO1xuICB3aWR0aDogMS43ZW07XG4gIGJvcmRlcjogMXB4IHNvbGlkICNFNDU3MkU7XG4gIGJvcmRlci1yYWRpdXM6IDUxJTtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xufVxuXG4uc2l0ZS1uYXYge1xuICBtYXJnaW46IDFyZW0gMDtcbiAgcGFkZGluZzogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbn1cbi5zaXRlLW5hdiA+IGxpIHtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbn1cbi5zaXRlLW5hdiA+IGxpID4gYSB7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cbi5zaXRlLW5hdiA+IGxpID4gYTpob3ZlciB7XG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xufVxuXG4uY29weXJpZ2h0IHtcbiAgbWFyZ2luOiAuNWVtIDA7XG59XG4uY29weXJpZ2h0IGEsXG4uY29weXJpZ2h0IGE6dmlzaXRlZCB7XG4gIGNvbG9yOiAjNDc0ODRCO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59XG5cbi8qIF9jb3JlLnNjc3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5odG1sIHtcbiAgYmFja2dyb3VuZDogI2ZkZmZmODtcbiAgY29sb3I6ICM0NzQ4NEI7XG4gIGZvbnQtZmFtaWx5OiBcIlNvdXJjZSBTYW5zIFByb1wiLCBcIuODkuODqeOCruODjuinkuOCtCBQcm9OXCIsIFwiSGlyYWdpbm8gS2FrdSBHb3RoaWMgUHJvTlwiLCBcIuODoeOCpOODquOCqlwiLCBNZWlyeW8sIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMWVtO1xuICBsaW5lLWhlaWdodDogMS43O1xufVxuXG5hIHtcbiAgY29sb3I6ICNjNTQwMWE7XG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICB0cmFuc2l0aW9uOiBjb2xvciAuMTVzIGVhc2U7XG59XG5cbmE6dmlzaXRlZCB7XG4gIGNvbG9yOiAjOTgzMjE0O1xufVxuXG5hOmhvdmVyIHtcbiAgY29sb3I6ICNlNDU3MmU7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cblxuYTphY3RpdmUge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHRvcDogMXB4O1xufVxuXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcbiAgY2xlYXI6IGJvdGg7XG4gIGZvbnQtZmVhdHVyZS1zZXR0aW5nczogXCJrZXJuXCIgMTtcbiAgZm9udC12YXJpYW50OiBwcm9wb3J0aW9uYWwtd2lkdGg7XG59XG5cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbS13aWR0aDogMDtcbn1cblxuZmlndXJlIHtcbiAgbWFyZ2luOiAwO1xufVxuXG4vKiAtLSBTb3VyY2UgQ29kZSAtLSAqL1xuY29kZSB7XG4gIGZvbnQtZmFtaWx5OiBcIlNvdXJjZSBDb2RlIFByb1wiLCBtb25vc3BhY2U7XG59XG5cbi5jb2RlIGR0IHtcbiAgZm9udC1mYW1pbHk6IFwiVmlnYVwiLCBzYW5zLXNlcmlmO1xuICBsZXR0ZXItc3BhY2luZzogMXB4O1xufVxuXG5maWdjYXB0aW9uLCAuYXJ0aWNsZS1pbmZvLCAuYXJ0aWNsZS1ib2R5IGNvZGUsIC5wLWFydGljbGUtcGVybWFsaW5rLWxpbmssIC5hcnRpY2xlLWFkcy10aXRsZSwgLnAtYXJ0aWNsZS1wYWdlci1saW5rIHtcbiAgZm9udC1zaXplOiAwLjg3NWVtO1xufVxuXG4ucmVjZW50LWFydGljbGUtaXRlbS10aXRsZSwgLmFyY2hpdmUtbGlzdC1pdGVtLXRpdGxlIHtcbiAgZm9udC1zaXplOiAxLjEyNWVtO1xufVxuXG4uYmFjazJ0b3AgPiBhLCAucmVjZW50QXJ0aWNsZVNlY3Rpb24gaDEge1xuICBmb250LXNpemU6IDEuNWVtO1xufVxuXG4ucC1hcnRpY2xlLXRpdGxlLCAuYXJjaGl2ZS10aXRsZSwgLnBhZ2VTZWN0aW9uSGVhZGVyIGgxLCAucmVjZW50LWFydGljbGUtaXRlbTpmaXJzdC1jaGlsZCAucmVjZW50LWFydGljbGUtaXRlbS10aXRsZSB7XG4gIGZvbnQtc2l6ZTogMmVtO1xufVxuXG4ucC1hcnRpY2xlLXRpdGxlLCAuYXJjaGl2ZS10aXRsZSwgLnBhZ2VTZWN0aW9uSGVhZGVyIGgxIHtcbiAgbWFyZ2luLXRvcDogMDtcbiAgbGluZS1oZWlnaHQ6IDEuMzU7XG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xufVxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDhlbSkge1xuICAucC1hcnRpY2xlLXRpdGxlLCAuYXJjaGl2ZS10aXRsZSwgLnBhZ2VTZWN0aW9uSGVhZGVyIGgxIHtcbiAgICBmb250LXNpemU6IDEuNWVtO1xuICB9XG59XG5cbi8qIC0tICVidXR0b25TaW1wbGUgLS0gKi9cbi8qIF9jb25wb25lbnQuc2Nzc1xuICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLmMtc2l0ZW5hbWUge1xuICBmb250LWZhbWlseTogXCJWaWdhXCIsIHNhbnMtc2VyaWY7XG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xufVxuLmMtc2l0ZW5hbWUgYSB7XG4gIGNvbG9yOiAjNDc0ODRCO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59XG5cbi5jLWljb24ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi5jLWZsYXQtbGlzdCwgLnNpdGUtbmF2IHtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgcGFkZGluZy1sZWZ0OiAwO1xufVxuXG4uYy1mbGF0LWxpc3QgPiBsaSwgLnNpdGUtbmF2ID4gbGksXG4uYy1mbGF0LWxpc3QgPiBkdCxcbi5zaXRlLW5hdiA+IGR0LFxuLmMtZmxhdC1saXN0ID4gZGQsXG4uc2l0ZS1uYXYgPiBkZCB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgbWFyZ2luLXJpZ2h0OiAuNXJlbTtcbn1cbi5jLWZsYXQtbGlzdCA+IGxpOmxhc3QtY2hpbGQsIC5zaXRlLW5hdiA+IGxpOmxhc3QtY2hpbGQsXG4uYy1mbGF0LWxpc3QgPiBkdDpsYXN0LWNoaWxkLFxuLnNpdGUtbmF2ID4gZHQ6bGFzdC1jaGlsZCxcbi5jLWZsYXQtbGlzdCA+IGRkOmxhc3QtY2hpbGQsXG4uc2l0ZS1uYXYgPiBkZDpsYXN0LWNoaWxkIHtcbiAgbWFyZ2luLXJpZ2h0OiAwO1xufVxuXG4vKiAtLSB0YWcgLS0gKi9cbi5jLXRhZywgLmFydGljbGUtdGFnIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbi1yaWdodDogLjVlbTtcbiAgcGFkZGluZzogMCAxLjc1ZW0gMCAxZW07XG4gIGJvcmRlci1yYWRpdXM6IDAuMTg3NWVtIDAgMCAwLjE4NzVlbTtcbiAgYmFja2dyb3VuZDogI2VhZWFlYTtcbn1cbi5jLXRhZzpiZWZvcmUsIC5hcnRpY2xlLXRhZzpiZWZvcmUge1xuICBjb250ZW50OiBcIiBcIjtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAuNGVtO1xuICBib3R0b206IDA7XG4gIGhlaWdodDogMC4yNWVtO1xuICB3aWR0aDogMC4yNWVtO1xuICBtYXJnaW46IGF1dG87XG4gIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZGZmZjg7XG4gIGxpbmUtaGVpZ2h0OiAxO1xufVxuLmMtdGFnOmFmdGVyLCAuYXJ0aWNsZS10YWc6YWZ0ZXIge1xuICBjb250ZW50OiBcIiBcIjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIHJpZ2h0OiAwO1xuICBib3R0b206IDA7XG4gIHdpZHRoOiAwO1xuICBoZWlnaHQ6IDA7XG4gIG1hcmdpbjogYXV0bztcbiAgYm9yZGVyOiAxZW0gc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1yaWdodC1jb2xvcjogI2ZkZmZmODtcbn1cblxuLyogLS0gU2l0ZU5hbWUgLS0qL1xuLnNpdGVOYW1lIHNwYW4ge1xuICBsZXR0ZXItc3BhY2luZzogLS4xZW07XG59XG5cbi8qXG4gX2luZGV4LnNjc3NcbiBUT1Djg5rjg7zjgrjplqLpgKNcbiAqL1xuLmluZGV4IC5nLWhlYWRlciB7XG4gIGhlaWdodDogNDB2aDtcbn1cbi5pbmRleCAuZy1oZWFkZXIgLmMtc2l0ZW5hbWUge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgbGVmdDogMDtcbiAgbWFyZ2luOiBhdXRvO1xuICBoZWlnaHQ6IDEuN2VtO1xuICB3aWR0aDogMTAwJTtcbiAgZm9udC1zaXplOiAxMHZtaW47XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ4ZW0pIHtcbiAgLmluZGV4IC5nLWhlYWRlciAuYy1zaXRlbmFtZSB7XG4gICAgZm9udC1zaXplOiAxMnZtaW47XG4gIH1cbn1cbi5pbmRleCAuZy1oZWFkZXIgLmMtc2l0ZW5hbWUgYSB7XG4gIHRleHQtc2hhZG93OiAwIDAgIzYwNTA0MCwgMXB4IDFweCAjNjA1MDQwLCAycHggMnB4ICM2MDUwNDAsIDNweCAzcHggIzYwNTA0MCwgNHB4IDRweCAjNjA1MDQwLCA1cHggNXB4ICM2MDUwNDAsIDZweCA2cHggIzYwNTA0MCwgN3B4IDdweCAjNjA1MDQwO1xufVxuLmluZGV4IC5nLWhlYWRlciAuYy1zaXRlbmFtZSBhOmhvdmVyIHtcbiAgdGV4dC1zaGFkb3c6IDAgMCAjNjA1MDQwLCAxcHggMXB4ICM2MDUwNDAsIDJweCAycHggIzYwNTA0MCwgM3B4IDNweCAjNjA1MDQwLCA0cHggNHB4ICM2MDUwNDAsIDVweCA1cHggIzYwNTA0MCwgNnB4IDZweCAjNjA1MDQwLCA3cHggN3B4ICM2MDUwNDAsIDhweCA4cHggIzYwNTA0MCwgOXB4IDlweCAjNjA1MDQwLCAxMHB4IDEwcHggIzYwNTA0MCwgMTFweCAxMXB4ICM2MDUwNDAsIDEycHggMTJweCAjNjA1MDQwLCAxM3B4IDEzcHggIzYwNTA0MCwgMTRweCAxNHB4ICM2MDUwNDA7XG59XG4uaW5kZXggLmctaGVhZGVyIC5zaXRlZGVzY3JpcHRpb24ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJvdHRvbTogLjI1cmVtO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHJpZ2h0OiAxcmVtO1xuICBsZWZ0OiAxcmVtO1xufVxuXG4uc2l0ZURlc2NyaXB0aW9uIHtcbiAgbWFyZ2luOiAwO1xufVxuXG4ucmVjZW50LWFydGljbGUge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG4ucmVjZW50LWFydGljbGU6YWZ0ZXIge1xuICBjb250ZW50OiBcIlwiO1xuICBkaXNwbGF5OiB0YWJsZTtcbiAgY2xlYXI6IGJvdGg7XG59XG5cbi5yZWNlbnQtYXJ0aWNsZS1pdGVtIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgZmxvYXQ6IGxlZnQ7XG4gIHdpZHRoOiA0Ny41JTtcbiAgbWFyZ2luLWxlZnQ6IDUlO1xuICBtYXJnaW4tYm90dG9tOiAyLjU1cmVtO1xufVxuLnJlY2VudC1hcnRpY2xlLWl0ZW06bnRoLWNoaWxkKDJuKzIpIHtcbiAgY2xlYXI6IGxlZnQ7XG4gIG1hcmdpbi1sZWZ0OiAwO1xufVxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDhlbSkge1xuICAucmVjZW50LWFydGljbGUtaXRlbSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiBhdXRvO1xuICAgIG1hcmdpbjogMCAwIDJyZW0gMDtcbiAgfVxufVxuLnJlY2VudC1hcnRpY2xlLWl0ZW0gPiBhIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgdHJhbnNpdGlvbjogYWxsIC4ycyBlYXNlO1xufVxuLnJlY2VudC1hcnRpY2xlLWl0ZW0gPiBhOmhvdmVyIHtcbiAgbWFyZ2luOiAtMWVtO1xuICBwYWRkaW5nOiAxZW07XG4gIGJvcmRlci1yYWRpdXM6IDAuMzEyNWVtO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWFlYWVhO1xufVxuXG4ucmVjZW50LWFydGljbGUtaXRlbS1wdWJsaXNoZWQtdGltZSB7XG4gIGZvbnQtZmFtaWx5OiBcIlZpZ2FcIiwgc2Fucy1zZXJpZjtcbiAgY29sb3I6ICM0NzQ4NEI7XG59XG5cbi5yZWNlbnQtYXJ0aWNsZS1pdGVtLXRpdGxlIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAuMnJlbSAwIC4zcmVtO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBsaW5lLWhlaWdodDogMS4zNTtcbn1cblxuLnJlY2VudC1hcnRpY2xlLWl0ZW06Zmlyc3QtY2hpbGQge1xuICBmbG9hdDogbm9uZTtcbiAgd2lkdGg6IDEwMCU7XG4gIG1heC13aWR0aDogNDRyZW07XG4gIGhlaWdodDogYXV0bztcbiAgbWFyZ2luLWxlZnQ6IDA7XG59XG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5ODBweCkge1xuICAucmVjZW50LWFydGljbGUtaXRlbTpmaXJzdC1jaGlsZCB7XG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICB9XG59XG4ucmVjZW50LWFydGljbGUtaXRlbTpmaXJzdC1jaGlsZCAucmVjZW50LWFydGljbGUtaXRlbS10aXRsZSB7XG4gIG1hcmdpbi1ib3R0b206IC4yNWVtO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBjb2xvcjogI0U0NTcyRTtcbn1cbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ4ZW0pIHtcbiAgLnJlY2VudC1hcnRpY2xlLWl0ZW06Zmlyc3QtY2hpbGQgLnJlY2VudC1hcnRpY2xlLWl0ZW0tdGl0bGUge1xuICAgIGZvbnQtc2l6ZTogMS4zNzVlbTtcbiAgfVxufVxuLnJlY2VudC1hcnRpY2xlLWl0ZW06Zmlyc3QtY2hpbGQgLnJlY2VudC1hcnRpY2xlLWl0ZW0tdGl0bGUgPiBhIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuLnJlY2VudC1hcnRpY2xlLWl0ZW06Zmlyc3QtY2hpbGQgLnJlY2VudC1hcnRpY2xlLWl0ZW0tZGVzY3JpcHRpb24ge1xuICBtYXJnaW46IDA7XG4gIGNvbG9yOiAjNDc0ODRCO1xufVxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDhlbSkge1xuICAucmVjZW50LWFydGljbGUtaXRlbTpmaXJzdC1jaGlsZCAucmVjZW50LWFydGljbGUtaXRlbS1kZXNjcmlwdGlvbiB7XG4gICAgZm9udC1zaXplOiAwLjg3NWVtO1xuICB9XG59XG5cbi8qXG4gX2FydGljbGUuc2Nzc1xuIOiomOS6i+ODmuODvOOCuOOBruOCueOCv+OCpOODq1xuKi9cbi8qIC0tIEFydGljbGUgLS0gKi9cbi5wLWFydGljbGUtaGVhZGVyIHtcbiAgbWFyZ2luOiA0cmVtIDA7XG59XG5cbi8qIC0tIC5hcnRpY2xlSW5mbyAtLSAqL1xuLmFydGljbGUtaW5mby1sYWJlbCB7XG4gIGZsb2F0OiBsZWZ0O1xufVxuXG4uYXJ0aWNsZS1pbmZvLWxhYmVsOmFmdGVyIHtcbiAgY29udGVudDogXCI6XCI7XG4gIG1hcmdpbjogMCAuMTVyZW07XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4uYXJ0aWNsZS1pbmZvLXByb3Age1xuICBtYXJnaW4tbGVmdDogMDtcbn1cblxuLyogLS0g5pys5paH44Ko44Oq44KiIC0tICovXG4uYXJ0aWNsZS1ib2R5IGgyIHtcbiAgbWFyZ2luLXRvcDogMy40ZW07XG59XG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0OGVtKSB7XG4gIC5hcnRpY2xlLWJvZHkgaDIge1xuICAgIGxpbmUtaGVpZ2h0OiAxLjI1O1xuICAgIGZvbnQtc2l6ZTogMS4yNWVtO1xuICB9XG59XG4uYXJ0aWNsZS1ib2R5IGgzIHtcbiAgbWFyZ2luLXRvcDogMi41NWVtO1xufVxuLmFydGljbGUtYm9keSBwIHtcbiAgbWFyZ2luOiAxLjdlbSAwO1xufVxuLmFydGljbGUtYm9keSBoMiArIHAsIC5hcnRpY2xlLWJvZHkgaDMgKyBwLCAuYXJ0aWNsZS1ib2R5IGg0ICsgcCwgLmFydGljbGUtYm9keSBoNSArIHAsIC5hcnRpY2xlLWJvZHkgaDYgKyBwIHtcbiAgbWFyZ2luLXRvcDogMDtcbn1cbi5hcnRpY2xlLWJvZHkgdWwsXG4uYXJ0aWNsZS1ib2R5IG9sIHtcbiAgcGFkZGluZy1sZWZ0OiAxZW07XG59XG4uYXJ0aWNsZS1ib2R5IGR0IHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG4uYXJ0aWNsZS1ib2R5IGRkIHtcbiAgbWFyZ2luLWxlZnQ6IDA7XG59XG4uYXJ0aWNsZS1ib2R5IGRkICsgZHQge1xuICBtYXJnaW4tdG9wOiAuNWVtO1xufVxuLmFydGljbGUtYm9keSBociB7XG4gIG1hcmdpbjogMS43NWVtIDNlbTtcbiAgYm9yZGVyOiAwO1xuICBib3JkZXItdG9wOiAwLjJlbSBzb2xpZCAjZWFlYWVhO1xufVxuLmFydGljbGUtYm9keSB0YWJsZSB7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgbWluLXdpZHRoOiA1MCU7XG4gIG1hcmdpbjogMWVtIGF1dG8gMS43NWVtO1xufVxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDhlbSkge1xuICAuYXJ0aWNsZS1ib2R5IHRhYmxlIHtcbiAgICBmb250LXNpemU6IDAuODc1ZW07XG4gIH1cbn1cbi5hcnRpY2xlLWJvZHkgY2FwdGlvbiB7XG4gIG1hcmdpbi1ib3R0b206IC4yNWVtO1xufVxuLmFydGljbGUtYm9keSB0ZCwgLmFydGljbGUtYm9keSB0aCB7XG4gIHBhZGRpbmc6IDFlbTtcbn1cbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ4ZW0pIHtcbiAgLmFydGljbGUtYm9keSB0ZCwgLmFydGljbGUtYm9keSB0aCB7XG4gICAgcGFkZGluZzogLjI1ZW07XG4gIH1cbn1cbi5hcnRpY2xlLWJvZHkgdGgge1xuICBwYWRkaW5nLWJvdHRvbTogLjVlbTtcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNFNDU3MkU7XG59XG4uYXJ0aWNsZS1ib2R5IHRkIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM4NUNCMzM7XG59XG4uYXJ0aWNsZS1ib2R5IGltZyB7XG4gIG1heC13aWR0aDogMTAwJTtcbn1cbi5hcnRpY2xlLWJvZHkgaW1nW2NsYXNzXj1cIm10LWltYWdlXCJdIHtcbiAgaGVpZ2h0OiBhdXRvO1xufVxuLmFydGljbGUtYm9keSAubXQtaW1hZ2UtbGVmdCB7XG4gIGZsb2F0OiBsZWZ0O1xuICBtYXJnaW46IDAgMnJlbSAycmVtIDA7XG59XG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0OGVtKSB7XG4gIC5hcnRpY2xlLWJvZHkgLm10LWltYWdlLWxlZnQge1xuICAgIG1hcmdpbjogMCAxcmVtIDFyZW0gMDtcbiAgfVxufVxuLmFydGljbGUtYm9keSAubXQtaW1hZ2UtcmlnaHQge1xuICBmbG9hdDogcmlnaHQ7XG4gIG1hcmdpbjogMCAwIDJyZW0gMnJlbTtcbn1cbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ4ZW0pIHtcbiAgLmFydGljbGUtYm9keSAubXQtaW1hZ2UtcmlnaHQge1xuICAgIG1hcmdpbjogMCAwIDFyZW0gMXJlbTtcbiAgfVxufVxuLmFydGljbGUtYm9keSAubXQtaW1hZ2UtY2VudGVyIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTExJTtcbiAgbWFyZ2luOiAwIC01JSAuNWVtO1xufVxuLmFydGljbGUtYm9keSBibG9ja3F1b3RlIHtcbiAgbWFyZ2luLWxlZnQ6IDA7XG4gIG1hcmdpbi1yaWdodDogMDtcbiAgcGFkZGluZy1sZWZ0OiAxZW07XG4gIGJvcmRlci1sZWZ0OiAzcHggc29saWQgI2VhZWFlYTtcbn1cbi5hcnRpY2xlLWJvZHkgY2l0ZSB7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xufVxuLmFydGljbGUtYm9keSBwcmUgPiBjb2RlIHtcbiAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICM5OTk7XG59XG4uYXJ0aWNsZS1ib2R5IGZpZ3VyZSB7XG4gIG1hcmdpbi1ib3R0b206IDEuN2VtO1xufVxuLmFydGljbGUtYm9keSBwIGNvZGUge1xuICBtYXJnaW46IDAgMnB4O1xuICBwYWRkaW5nOiAwIDNweCAycHg7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgYmFja2dyb3VuZDogI2VhZWFlYTtcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcbn1cblxuLmNvZGUgZGQge1xuICBtYXJnaW46IDA7XG59XG5cbi8qIC0tIFF1b3RlIC0tKi9cbi5xdW90ZSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgcGFkZGluZzogLjVlbSAxcmVtIDNlbSAxcmVtO1xuICBiYWNrZ3JvdW5kOiAjZWFlYWVhO1xufVxuLnF1b3RlIGRkIHtcbiAgbWFyZ2luLWxlZnQ6IDA7XG59XG4ucXVvdGUgYmxvY2txdW90ZSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xufVxuLnF1b3RlIC5jaXRlIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogMXJlbTtcbiAgYm90dG9tOiAxcmVtO1xuICB0ZXh0LWFsaWduOiByaWdodDtcbn1cblxuLmVtYmVkLWlmcmFtZSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmctYm90dG9tOiA1Ni4yNSU7XG59XG4uZW1iZWQtaWZyYW1lID4gaWZyYW1lIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIHJpZ2h0OiAwO1xuICBib3R0b206IDA7XG4gIGxlZnQ6IDA7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbi8qIC0tIOWPguiAg+OBq+OBl+OBn1dlYuODmuODvOOCuCAtLSAqL1xuLnJlZmVyZW5jZS13ZWItcGFnZSA+IGRkIHtcbiAgbWFyZ2luOiAwIDAgLjI1cmVtO1xufVxuXG4ucC1hcnRpY2xlLXBlcm1hbGluayB7XG4gIG1hcmdpbjogMnJlbSAwO1xufVxuXG4ucC1hcnRpY2xlLXBlcm1hbGluay1sYWJlbCB7XG4gIG1hcmdpbi10b3A6IDFyZW07XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4ucC1hcnRpY2xlLXBlcm1hbGluay1saW5rIHtcbiAgbWFyZ2luLWxlZnQ6IDA7XG59XG5cbi5hcnRpY2xlQWRzIHtcbiAgbWFyZ2luOiAycmVtIDA7XG59XG5cbi5hcnRpY2xlLWFkcy10aXRsZSB7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWFlYWVhO1xufVxuXG4ucC1hcnRpY2xlLXBhZ2VyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW46IDRyZW0gYXV0bztcbn1cblxuLnAtYXJ0aWNsZS1wYWdlci1sYWJlbCB7XG4gIHdpZHRoOiA1MCU7XG4gIG1hcmdpbi10b3A6IDFyZW07XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4ucC1hcnRpY2xlLXBhZ2VyLWxpbmsge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB3aWR0aDogNTAlO1xuICBtYXJnaW4tbGVmdDogMDtcbn1cbi5wLWFydGljbGUtcGFnZXItbGluayA+IGEge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLnAtYXJ0aWNsZS1wYWdlci1vbGRlciB7XG4gIHBhZGRpbmctcmlnaHQ6IDFyZW07XG59XG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0OGVtKSB7XG4gIC5wLWFydGljbGUtcGFnZXItb2xkZXIge1xuICAgIHBhZGRpbmctcmlnaHQ6IC41cmVtO1xuICB9XG59XG5cbi5wLWFydGljbGUtcGFnZXItbmV3ZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIG1hcmdpbi10b3A6IDA7XG4gIHBhZGRpbmctbGVmdDogMXJlbTtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG59XG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0OGVtKSB7XG4gIC5wLWFydGljbGUtcGFnZXItbmV3ZXIge1xuICAgIHBhZGRpbmctbGVmdDogLjVyZW07XG4gIH1cbn1cblxuLnAtYXJ0aWNsZS1wYWdlci1uZXdlci5wLWFydGljbGUtcGFnZXItbGluayB7XG4gIHRvcDogMS41cmVtO1xufVxuXG4vKiBfYXJjaGl2ZS5zY3NzXG4gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4uYXJjaGl2ZS1saXN0IHtcbiAgcGFkZGluZy1sZWZ0OiAwO1xuICBsaXN0LXN0eWxlOiBub25lO1xufVxuXG4uYXJjaGl2ZS1saXN0LWl0ZW0gLmFydGljbGUtaW5mbyB7XG4gIHdpZHRoOiBhdXRvO1xuICBtYXJnaW4tYm90dG9tOiAuNXJlbTtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbn1cbi5hcmNoaXZlLWxpc3QtaXRlbSAuYXJ0aWNsZS1pbmZvLWxhYmVsOmZpcnN0LWNoaWxkIHtcbiAgbWFyZ2luLWxlZnQ6IDA7XG59XG5cbi5hcmNoaXZlLWxpc3QtaXRlbS10aXRsZSB7XG4gIG1hcmdpbjogMCAwIDJyZW07XG4gIGxpbmUtaGVpZ2h0OiAxLjM7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuLmFyY2hpdmUtbGlzdC1pdGVtLXRpdGxlID4gYSB7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cblxuLypcbiBfcGFnZS5zY3NzXG4g44Km44Kn44OW44Oa44O844K444Gu44K544K/44Kk44OrXG4qL1xuLyogLS0gUGFnZSAtLSAqL1xuLyogLS0gUGFnZSBBYm91dCAtLSovXG4ucHJvZmlsZVBob3RvIHtcbiAgZmxvYXQ6IGxlZnQ7XG4gIHdpZHRoOiAyNSU7XG4gIGhlaWdodDogYXV0bztcbiAgbWF4LXdpZHRoOiA5ZW07XG4gIG1hcmdpbi1yaWdodDogMWVtO1xuICBtYXJnaW4tYm90dG9tOiAxZW07XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbn1cblxuLyohXG5cbmdpdGh1Yi5jb20gc3R5bGUgKGMpIFZhc2lseSBQb2xvdm55b3YgPHZhc3RAd2hpdGVhbnRzLm5ldD5cblxuKi9cbi5obGpzIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG92ZXJmbG93LXg6IGF1dG87XG4gIHBhZGRpbmc6IDAuNWVtO1xuICBjb2xvcjogIzMzMztcbiAgYmFja2dyb3VuZDogI2Y4ZjhmODtcbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiBub25lO1xufVxuXG4uaGxqcy1jb21tZW50LFxuLmRpZmYgLmhsanMtaGVhZGVyLFxuLmhsanMtamF2YWRvYyB7XG4gIGNvbG9yOiAjOTk4O1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbi5obGpzLWtleXdvcmQsXG4uY3NzIC5ydWxlIC5obGpzLWtleXdvcmQsXG4uaGxqcy13aW51dGlscyxcbi5uZ2lueCAuaGxqcy10aXRsZSxcbi5obGpzLXN1YnN0LFxuLmhsanMtcmVxdWVzdCxcbi5obGpzLXN0YXR1cyB7XG4gIGNvbG9yOiAjMzMzO1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLmhsanMtbnVtYmVyLFxuLmhsanMtaGV4Y29sb3IsXG4ucnVieSAuaGxqcy1jb25zdGFudCB7XG4gIGNvbG9yOiAjMDA4MDgwO1xufVxuXG4uaGxqcy1zdHJpbmcsXG4uaGxqcy10YWcgLmhsanMtdmFsdWUsXG4uaGxqcy1waHBkb2MsXG4uaGxqcy1kYXJ0ZG9jLFxuLnRleCAuaGxqcy1mb3JtdWxhIHtcbiAgY29sb3I6ICNkMTQ7XG59XG5cbi5obGpzLXRpdGxlLFxuLmhsanMtaWQsXG4uc2NzcyAuaGxqcy1wcmVwcm9jZXNzb3Ige1xuICBjb2xvcjogIzkwMDtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5obGpzLWxpc3QgLmhsanMta2V5d29yZCxcbi5obGpzLXN1YnN0IHtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbn1cblxuLmhsanMtY2xhc3MgLmhsanMtdGl0bGUsXG4uaGxqcy10eXBlLFxuLnZoZGwgLmhsanMtbGl0ZXJhbCxcbi50ZXggLmhsanMtY29tbWFuZCB7XG4gIGNvbG9yOiAjNDU4O1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLmhsanMtdGFnLFxuLmhsanMtdGFnIC5obGpzLXRpdGxlLFxuLmhsanMtcnVsZXMgLmhsanMtcHJvcGVydHksXG4uZGphbmdvIC5obGpzLXRhZyAuaGxqcy1rZXl3b3JkIHtcbiAgY29sb3I6ICMwMDAwODA7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG59XG5cbi5obGpzLWF0dHJpYnV0ZSxcbi5obGpzLXZhcmlhYmxlLFxuLmxpc3AgLmhsanMtYm9keSB7XG4gIGNvbG9yOiAjMDA4MDgwO1xufVxuXG4uaGxqcy1yZWdleHAge1xuICBjb2xvcjogIzAwOTkyNjtcbn1cblxuLmhsanMtc3ltYm9sLFxuLnJ1YnkgLmhsanMtc3ltYm9sIC5obGpzLXN0cmluZyxcbi5saXNwIC5obGpzLWtleXdvcmQsXG4uY2xvanVyZSAuaGxqcy1rZXl3b3JkLFxuLnNjaGVtZSAuaGxqcy1rZXl3b3JkLFxuLnRleCAuaGxqcy1zcGVjaWFsLFxuLmhsanMtcHJvbXB0IHtcbiAgY29sb3I6ICM5OTAwNzM7XG59XG5cbi5obGpzLWJ1aWx0X2luIHtcbiAgY29sb3I6ICMwMDg2YjM7XG59XG5cbi5obGpzLXByZXByb2Nlc3Nvcixcbi5obGpzLXByYWdtYSxcbi5obGpzLXBpLFxuLmhsanMtZG9jdHlwZSxcbi5obGpzLXNoZWJhbmcsXG4uaGxqcy1jZGF0YSB7XG4gIGNvbG9yOiAjOTk5O1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLmhsanMtZGVsZXRpb24ge1xuICBiYWNrZ3JvdW5kOiAjZmRkO1xufVxuXG4uaGxqcy1hZGRpdGlvbiB7XG4gIGJhY2tncm91bmQ6ICNkZmQ7XG59XG5cbi5kaWZmIC5obGpzLWNoYW5nZSB7XG4gIGJhY2tncm91bmQ6ICMwMDg2YjM7XG59XG5cbi5obGpzLWNodW5rIHtcbiAgY29sb3I6ICNhYWE7XG59XG5cblxuXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3UVVGUlFTeEpRVUZMTzBWQlEwZ3NWMEZCVnl4RlFVRkZMRlZCUVZVN08wVkJRM1pDTEc5Q1FVRnZRaXhGUVVGRkxFbEJRVWs3TzBWQlF6RkNMSGRDUVVGM1FpeEZRVUZGTEVsQlFVazdPenM3T3pzN1FVRlBhRU1zU1VGQlN6dEZRVU5JTEUxQlFVMHNSVUZCUlN4RFFVRkRPenM3T3pzN096dEJRVlZZT3pzN096czdPenM3T3p0UFFWZFJPMFZCUTA0c1QwRkJUeXhGUVVGRkxFdEJRVXM3T3pzN096czdRVUZSYUVJN096dExRVWROTzBWQlEwb3NUMEZCVHl4RlFVRkZMRmxCUVZrN08wVkJRM0pDTEdOQlFXTXNSVUZCUlN4UlFVRlJPenM3T3pzN096dEJRVkV4UWl4eFFrRkJjMEk3UlVGRGNFSXNUMEZCVHl4RlFVRkZMRWxCUVVrN1JVRkRZaXhOUVVGTkxFVkJRVVVzUTBGQlF6czdPenM3T3p0QlFWRllPMUZCUTFNN1JVRkRVQ3hQUVVGUExFVkJRVVVzU1VGQlNUczdPenM3T3pzN1FVRlZaaXhEUVVGRk8wVkJRMEVzVlVGQlZTeEZRVUZGTEZkQlFWYzdPenM3T3p0QlFVOTZRanRQUVVOUk8wVkJRMDRzVDBGQlR5eEZRVUZGTEVOQlFVTTdPenM3T3pzN08wRkJWVm9zVjBGQldUdEZRVU5XTEdGQlFXRXNSVUZCUlN4VlFVRlZPenM3T3pzN1FVRlBNMEk3VFVGRFR6dEZRVU5NTEZkQlFWY3NSVUZCUlN4SlFVRkpPenM3T3pzN1FVRlBia0lzUjBGQlNUdEZRVU5HTEZWQlFWVXNSVUZCUlN4TlFVRk5PenM3T3pzN08wRkJVWEJDTEVWQlFVYzdSVUZEUkN4VFFVRlRMRVZCUVVVc1IwRkJSenRGUVVOa0xFMUJRVTBzUlVGQlJTeFJRVUZST3pzN096czdRVUZQYkVJc1NVRkJTenRGUVVOSUxGVkJRVlVzUlVGQlJTeEpRVUZKTzBWQlEyaENMRXRCUVVzc1JVRkJSU3hKUVVGSk96czdPenM3UVVGUFlpeExRVUZOTzBWQlEwb3NVMEZCVXl4RlFVRkZMRWRCUVVjN096czdPenRCUVU5b1FqdEhRVU5KTzBWQlEwWXNVMEZCVXl4RlFVRkZMRWRCUVVjN1JVRkRaQ3hYUVVGWExFVkJRVVVzUTBGQlF6dEZRVU5rTEZGQlFWRXNSVUZCUlN4UlFVRlJPMFZCUTJ4Q0xHTkJRV01zUlVGQlJTeFJRVUZST3pzN1FVRkhNVUlzUjBGQlNUdEZRVU5HTEVkQlFVY3NSVUZCUlN4TlFVRk5PenM3UVVGSFlpeEhRVUZKTzBWQlEwWXNUVUZCVFN4RlFVRkZMRTlCUVU4N096czdPenM3TzBGQlZXcENMRWRCUVVrN1JVRkRSaXhOUVVGTkxFVkJRVVVzUTBGQlF6czdPenM3TzBGQlQxZ3NZMEZCWlR0RlFVTmlMRkZCUVZFc1JVRkJSU3hOUVVGTk96czdPenM3T3p0QlFWVnNRaXhOUVVGUE8wVkJRMHdzVFVGQlRTeEZRVUZGTEZGQlFWRTdPenM3T3p0QlFVOXNRaXhGUVVGSE8wVkJRMFFzWlVGQlpTeEZRVUZGTEZkQlFWYzdSVUZETlVJc1ZVRkJWU3hGUVVGRkxGZEJRVmM3UlVGRGRrSXNUVUZCVFN4RlFVRkZMRU5CUVVNN096czdPenRCUVU5WUxFZEJRVWs3UlVGRFJpeFJRVUZSTEVWQlFVVXNTVUZCU1RzN096czdPMEZCVDJoQ096czdTVUZIU3p0RlFVTklMRmRCUVZjc1JVRkJSU3h2UWtGQmIwSTdSVUZEYWtNc1UwRkJVeXhGUVVGRkxFZEJRVWM3T3pzN096czdPenM3T3pzN096dEJRV3RDYUVJN096czdVVUZKVXp0RlFVTlFMRXRCUVVzc1JVRkJSU3hQUVVGUE96dEZRVU5rTEVsQlFVa3NSVUZCUlN4UFFVRlBPenRGUVVOaUxFMUJRVTBzUlVGQlJTeERRVUZET3pzN096czdPMEZCVDFnc1RVRkJUenRGUVVOTUxGRkJRVkVzUlVGQlJTeFBRVUZQT3pzN096czdPenM3UVVGVmJrSTdUVUZEVHp0RlFVTk1MR05CUVdNc1JVRkJSU3hKUVVGSk96czdPenM3T3pzN08wRkJWM1JDT3pzN2IwSkJSM0ZDTzBWQlEyNUNMR3RDUVVGclFpeEZRVUZGTEUxQlFVMDdPMFZCUXpGQ0xFMUJRVTBzUlVGQlJTeFBRVUZQT3pzN096czdPMEZCVDJwQ08yOUNRVU54UWp0RlFVTnVRaXhOUVVGTkxFVkJRVVVzVDBGQlR6czdPenM3TzBGQlQycENPM1ZDUVVOM1FqdEZRVU4wUWl4TlFVRk5MRVZCUVVVc1EwRkJRenRGUVVOVUxFOUJRVThzUlVGQlJTeERRVUZET3pzN096czdPMEZCVVZvc1MwRkJUVHRGUVVOS0xGZEJRVmNzUlVGQlJTeE5RVUZOT3pzN096czdPenM3TzBGQlYzSkNPMjFDUVVOdlFqdEZRVU5zUWl4VlFVRlZMRVZCUVVVc1ZVRkJWVHM3UlVGRGRFSXNUMEZCVHl4RlFVRkZMRU5CUVVNN096czdPenM3T3p0QlFWTmFPeXREUVVOblJEdEZRVU01UXl4TlFVRk5MRVZCUVVVc1NVRkJTVHM3T3pzN096czdRVUZUWkN4dlFrRkJjVUk3UlVGRGJrSXNhMEpCUVd0Q0xFVkJRVVVzVTBGQlV6czdSVUZETjBJc1pVRkJaU3hGUVVGRkxGZEJRVmM3UlVGRE5VSXNhMEpCUVd0Q0xFVkJRVVVzVjBGQlZ6czdSVUZETDBJc1ZVRkJWU3hGUVVGRkxGZEJRVmM3T3pzN096czdPMEZCVTNwQ095dERRVU5uUkR0RlFVTTVReXhyUWtGQmEwSXNSVUZCUlN4SlFVRkpPenM3T3pzN1FVRlBNVUlzVVVGQlV6dEZRVU5RTEUxQlFVMHNSVUZCUlN4cFFrRkJhVUk3UlVGRGVrSXNUVUZCVFN4RlFVRkZMRXRCUVVzN1JVRkRZaXhQUVVGUExFVkJRVVVzY1VKQlFYRkNPenM3T3pzN08wRkJVV2hETEUxQlFVODdSVUZEVEN4TlFVRk5MRVZCUVVVc1EwRkJRenM3UlVGRFZDeFBRVUZQTEVWQlFVVXNRMEZCUXpzN096czdPenRCUVU5YUxGRkJRVk03UlVGRFVDeFJRVUZSTEVWQlFVVXNTVUZCU1RzN096czdPenRCUVZGb1FpeFJRVUZUTzBWQlExQXNWMEZCVnl4RlFVRkZMRWxCUVVrN096czdPenM3TzBGQlZXNUNMRXRCUVUwN1JVRkRTaXhsUVVGbExFVkJRVVVzVVVGQlVUdEZRVU42UWl4alFVRmpMRVZCUVVVc1EwRkJRenM3TzBGQlIyNUNPMFZCUTBjN1JVRkRSQ3hQUVVGUExFVkJRVVVzUTBGQlF6czdPenM3UVVNM1dsb3NNa05CUVdVN1JVRkRZaXhUUVVGVExFVkJURWtzUzBGQlN6dEZRVTFzUWl4TFFVRkxMRVZCUVVVc1IwRkJSenRGUVVOV0xGbEJRVmtzUlVGQlJTeEpRVUZKTzBWQlEyeENMRmRCUVZjc1JVRkJSU3hKUVVGSk96dEJRMDFtTEcxRFFVRjVRenRGUkZZM1F5d3lRMEZCWlR0SlFVOVlMRXRCUVVzc1JVRkJSU3hIUVVGSE8wbEJRMVlzV1VGQldTeEZRVUZGTEVWQlFVVTdTVUZEYUVJc1YwRkJWeXhGUVVGRkxFVkJRVVU3T3pzN1FVRkpia0lzVTBGQlZUdEZRVU5TTEZGQlFWRXNSVUZCUlN4UlFVRlJPMFZCUTJ4Q0xHRkJRV0VzUlVGQlJTeEpRVUZKT3p0QlFVMXVRaXg1UWtGQlowSTdSVUZEWkN4WFFVRlhMRVZCUVVVc1pVRkJaVHRGUVVNMVFpeFZRVUZWTEVWQlFVVXNiMEpCUVc5Q08wVkJRMmhETEV0QlFVc3NSVVZhVXl4UFFVRnJRanRGUm1Gb1F5eFhRVUZYTEVWSFdFZ3NaMGRCUVdkRE96dEJTR0Y0UXl3clFrRkJVVHRGUVVOT0xGZEJRVmNzUlVka1RDeHRTa0ZCWjBNN096dEJTRzFDTlVNc1MwRkJUVHRGUVVWS0xHRkJRV0VzUlVGeVEwNHNTVUZCU1RzN08wRkJkME5pTEdGQlFXTTdSVUZGV2l4UlFVRlJMRVZCUVVVc1VVRkJVVHRGUVVOc1FpeFhRVUZYTEVWQlFVVXNTVUZCVnp0RlFVTjRRaXhqUVVGakxFVkJRVVVzU1VGQlZ6dEZRVU16UWl4VlFVRlZMRVZCTjBOSUxFbEJRVWs3TzBGQkswTllMSFZDUVVGVk8wVkJRMUlzVVVGQlVTeEZRVUZGTEZGQlFWRTdSVUZEYkVJc1RVRkJUU3hGUVVGRkxFbEJRVWs3UlVGRFdpeExRVUZMTEVWQlFVVXNRMEZCUXp0RlFVTlNMRTFCUVUwc1JVRkJSU3hEUVVGRE8wVkJRMVFzVlVGQlZTeEZRVUZGTEV0QlFVczdPMEZCUldwQ0xEUkNRVUZQTzBWQlEwd3NWMEZCVnl4RlFVRkZMRWxCUVVrN096dEJRVXQyUWl4VFFVRlZPMFZCUTFJc1ZVRkJWU3hGUVVGRkxFMUJRVTA3TzBGQlJXeENMR0ZCUVUwN1JVRkRTaXhQUVVGUExFVkJRVVVzV1VGQldUdEZRVU55UWl4TlFVRk5MRVZCUVVVc1MwRkJkVUk3UlVGREwwSXNTMEZCU3l4RlFVRkZMRXRCUVhWQ08wVkJSVGxDTEUxQlFVMHNSVUZCUlN4cFFrRkJjVUk3UlVGRE4wSXNZVUZCWVN4RlFVRkZMRWRCUVVjN1JVRkRiRUlzWlVGQlpTeEZRVUZGTEVsQlFVazdSVUZEY2tJc1kwRkJZeXhGUVVGRkxFMUJRVTA3T3p0QlFVa3hRaXhUUVVGVk8wVkJRMUlzVFVGQlRTeEZRVUZGTEUxQlFVMDdSVUZEWkN4UFFVRlBMRVZCUVVVc1EwRkJRenRGUVVOV0xGVkJRVlVzUlVGQlJTeEpRVUZKT3p0QlFVZG9RaXhqUVVGUE8wVkJRMHdzWTBGQll5eEZRVUZGTEZOQlFWTTdPMEZCUnpOQ0xHdENRVUZYTzBWQlExUXNaVUZCWlN4RlFVRkZMRWxCUVVrN08wRkJSM1pDTEhkQ1FVRnBRanRGUVVObUxHVkJRV1VzUlVGQlJTeFRRVUZUT3pzN1FVRkpPVUlzVlVGQlZ6dEZRVU5VTEUxQlFVMHNSVUZCUlN4TlFVRk5PenRCUVVWa08yOUNRVU5WTzBWQlExSXNTMEZCU3l4RlJYUkdTU3hQUVVGcFFqdEZSblZHTVVJc1pVRkJaU3hGUVVGRkxFbEJRVWs3T3pzN08wRkpka2Q2UWl4SlFVRkxPMFZCUTBnc1ZVRkJWU3hGUm1OTkxFOUJRV2xDTzBWRlltcERMRXRCUVVzc1JVWmpUU3hQUVVGcFFqdEZSV0kxUWl4WFFVRlhMRVZCUVVVc2VVWkJRWGxHTzBWQlEzUkhMRk5CUVZNc1JVRkJSU3hIUVVFeVFqdEZRVU4wUXl4WFFVRlhMRVZHYTBKTkxFZEJRVWM3T3p0QlJXWjBRaXhEUVVGRk8wVkJRMEVzUzBGQlN5eEZSbFZOTEU5QlFXZENPMFZGVkROQ0xHVkJRV1VzUlVGQlJTeFRRVUZUTzBWQlF6RkNMRlZCUVZVc1JVRkJSU3hsUVVGbE96czdRVUZITjBJc1UwRkJWVHRGUVVOU0xFdEJRVXNzUlVGQlJTeFBRVUYzUWpzN08wRkJSMnBETEU5QlFWRTdSVUZEVGl4TFFVRkxMRVZCUVVVc1QwRkJlVUk3UlVGRGFFTXNaVUZCWlN4RlFVRkZMRWxCUVVrN096dEJRVWQyUWl4UlFVRlRPMFZCUTFBc1VVRkJVU3hGUVVGRkxGRkJRVkU3UlVGRGJFSXNSMEZCUnl4RlFVRkZMRWRCUVVjN096dEJRVWRXTEhOQ1FVRjFRanRGUVVOeVFpeExRVUZMTEVWQlFVVXNTVUZCU1R0RlFVTllMSEZDUVVGeFFpeEZRVUZGTEZGQlFWRTdSVUZETDBJc1dVRkJXU3hGUVVGRkxHdENRVUZyUWpzN08wRkJSMnhETEZkQlFWazdSVUZEVml4dFFrRkJiVUlzUlVGQlJTeERRVUZET3pzN1FVRkhlRUlzVFVGQlR6dEZRVU5NTEUxQlFVMHNSVUZCUlN4RFFVRkRPenM3TzBGQlVWZ3NTVUZCU3p0RlFVTklMRmRCUVZjc1JVRkJSU3cwUWtGQk5FSTdPenRCUXpsRE0wTXNVVUZCVnp0RlFVTlVMRmRCUVZjc1JVRkJSU3hyUWtGQmEwSTdSVUZETDBJc1kwRkJZeXhGUVVGRkxFZEJRVWM3T3p0QlFWRnlRaXh0U0VGQmJVSTdSVXBRYWtJc1UwRkJVeXhGUVVGRkxFOUJRV003T3p0QlNXVXpRaXh2UkVGQmFVSTdSVXBtWml4VFFVRlRMRVZCUVVVc1QwRkJZenM3TzBGSmJVSXpRaXgxUTBGQmJVSTdSVXB1UW1wQ0xGTkJRVk1zUlVGQlJTeExRVUZqT3pzN1FVbDFRak5DTEc5SVFVRnZRanRGU25aQ2JFSXNVMEZCVXl4RlFVRkZMRWRCUVdNN096dEJTU3RDTTBJc2RVUkJRV2RDTzBWQlEyUXNWVUZCVlN4RlFVRkZMRU5CUVVNN1JVRkZZaXhYUVVGWExFVkJRVVVzU1VGQlNUdEZRVU5xUWl4elFrRkJjMElzUlVGQlJTeFhRVUZYT3p0QlNucENha01zYlVOQlFYbERPMFZKY1VJM1F5eDFSRUZCWjBJN1NVb3ZRbVFzVTBGQlV5eEZRVUZGTEV0QlFXTTdPenM3T3pzN1FVdE1NMElzVjBGQldUdEZRVU5XTEZkQlFWY3NSVUZCUlN4clFrRkJhMEk3UlVGREwwSXNjMEpCUVhOQ0xFVkJRVVVzVjBGQlZ6czdRVUZGYmtNc1lVRkJSVHRGUVVOQkxFdEJRVXNzUlVwWFNTeFBRVUZwUWp0RlNWWXhRaXhsUVVGbExFVkJRVVVzU1VGQlNUczdPMEZCU1hwQ0xFOUJRVkU3UlVGRFRpeFBRVUZQTEVWQlFVVXNXVUZCV1RzN08wRkJSM1pDTEhWQ1FVRmhPMFZCUTFnc1ZVRkJWU3hGUVVGRkxFbEJRVWs3UlVGRGFFSXNXVUZCV1N4RlFVRkZMRU5CUVVNN096dEJRVWRxUWpzN096dGpRVVZyUWp0RlFVTm9RaXhQUVVGUExFVkJRVVVzV1VGQldUdEZRVU55UWl4WlFVRlpMRVZCUVVVc1MwRkJTenM3UVVGRmJrSTdPenM3ZVVKQlFXRTdSVUZEV0N4WlFVRlpMRVZCUVVVc1EwRkJRenM3T3p0QlFVdHVRaXh2UWtGQlR6dEZRVU5NTEZGQlFWRXNSVUZCUlN4UlFVRlJPMFZCUTJ4Q0xFOUJRVThzUlVGQlJTeFpRVUZaTzBWQlEzSkNMRmxCUVZrc1JVRkJSU3hKUVVGSk8wVkJRMnhDTEU5QlFVOHNSVUZCUlN4alFVRmpPMFZCUTNaQ0xHRkJRV0VzUlVGQlJTeHhRa0ZCWlR0RlFVTTVRaXhWUVVGVkxFVktPVUpWTEU5QlFVODdPMEZKSzBJelFpeHJRMEZCVXp0RlFVTlFMRTlCUVU4c1JVRkJSU3hIUVVGSE8wVkJRMW9zVDBGQlR5eEZRVUZGTEV0QlFVczdSVUZEWkN4UlFVRlJMRVZCUVVVc1VVRkJVVHRGUVVOc1FpeEhRVUZITEVWQlFVVXNRMEZCUXp0RlFVTk9MRWxCUVVrc1JVRkJSU3hKUVVGSk8wVkJRMVlzVFVGQlRTeEZRVUZGTEVOQlFVTTdSVUZEVkN4TlFVRk5MRVZCUVVVc1RVRkJTenRGUVVOaUxFdEJRVXNzUlVGQlJTeE5RVUZMTzBWQlExb3NUVUZCVFN4RlFVRkZMRWxCUVVrN1JVRkRXaXhoUVVGaExFVkJRVVVzU1VGQlNUdEZRVU51UWl4blFrRkJaMElzUlVwc1EwWXNUMEZCYVVJN1JVbHRReTlDTEZkQlFWY3NSVUZCUlN4RFFVRkRPenRCUVVWb1FpeG5RMEZCVVR0RlFVTk9MRTlCUVU4c1JVRkJSU3hIUVVGSE8wVkJRMW9zVVVGQlVTeEZRVUZGTEZGQlFWRTdSVUZEYkVJc1IwRkJSeXhGUVVGRkxFTkJRVU03UlVGRFRpeExRVUZMTEVWQlFVVXNRMEZCUXp0RlFVTlNMRTFCUVUwc1JVRkJSU3hEUVVGRE8wVkJRMVFzUzBGQlN5eEZRVUZGTEVOQlFVTTdSVUZEVWl4TlFVRk5MRVZCUVVVc1EwRkJRenRGUVVOVUxFMUJRVTBzUlVGQlJTeEpRVUZKTzBWQlExb3NUVUZCVFN4RlFVRkZMSEZDUVVGeFFqdEZRVU0zUWl4clFrRkJhMElzUlVvdlEwb3NUMEZCYVVJN096czdRVWx4UkdwRExHTkJRVXM3UlVGRFNDeGpRVUZqTEVWQlFVVXNTMEZCU3pzN096czdPenRCUTI1RmVrSXNaMEpCUVdsQ08wVkJRMllzVFVGQlRTeEZRVUZGTEVsQlFVazdPMEZCUlZvc05FSkJRVms3UlVGRFZpeFJRVUZSTEVWQlFVVXNVVUZCVVR0RlFVTnNRaXhIUVVGSExFVkJRVVVzUTBGQlF6dEZRVU5PTEV0QlFVc3NSVUZCUlN4RFFVRkRPMFZCUTFJc1RVRkJUU3hGUVVGRkxFTkJRVU03UlVGRFZDeEpRVUZKTEVWQlFVVXNRMEZCUXp0RlFVTlFMRTFCUVUwc1JVRkJSU3hKUVVGSk8wVkJRMW9zVFVGQlRTeEZRVUZGTEV0QlFYVkNPMFZCUXk5Q0xFdEJRVXNzUlVGQlJTeEpRVUZKTzBWQlExZ3NVMEZCVXl4RlFVRkZMRTFCUVUwN1JVRkRha0lzVlVGQlZTeEZRVUZGTEUxQlFVMDdPMEZPUVd4Q0xHMURRVUY1UXp0RlRWWXpReXcwUWtGQldUdEpRV0ZTTEZOQlFWTXNSVUZCUlN4TlFVRk5PenM3UVVGSGJrSXNPRUpCUVVVN1JVRkRRU3hYUVVGWExFVktTRXdzYTBsQlFXZERPenRCU1V0MFF5eHZRMEZCVVR0RlFVTk9MRmRCUVZjc1JVcE9VQ3h0VVVGQlowTTdPMEZKVnpGRExHbERRVUZwUWp0RlFVTm1MRkZCUVZFc1JVRkJSU3hSUVVGUk8wVkJRMnhDTEUxQlFVMHNSVUZCUlN4TlFVRk5PMFZCUTJRc1ZVRkJWU3hGUVVGRkxFMUJRVTA3UlVGRGJFSXNTMEZCU3l4RlFVRkZMRWxCUVVrN1JVRkRXQ3hKUVVGSkxFVkJRVVVzU1VGQlNUczdPMEZCU1dRc1owSkJRV2xDTzBWQlEyWXNUVUZCVFN4RlFVRkZMRU5CUVVNN096dEJRVTlZTEdWQlFXZENPMFZCUTJRc1RVRkJUU3hGUVVGRkxFTkJRVU03UlVGRFZDeFBRVUZQTEVWQlFVVXNRMEZCUXp0RlFVTldMRlZCUVZVc1JVRkJSU3hKUVVGSk96dEJRVVZvUWl4eFFrRkJVVHRGUVVOT0xFOUJRVThzUlVGQlJTeEZRVUZGTzBWQlExZ3NUMEZCVHl4RlFVRkZMRXRCUVVzN1JVRkRaQ3hMUVVGTExFVkJRVVVzU1VGQlNUczdPMEZCU1dZc2IwSkJRWEZDTzBWQlEyNUNMRlZCUVZVc1JVRkJSU3hWUVVGVk8wVkJRM1JDTEV0QlFVc3NSVUZCUlN4SlFVRkpPMFZCUTFnc1MwRkJTeXhGUVVGRkxFdEJRVXM3UlVGRFdpeFhRVUZYTEVWQlFVVXNSVUZCUlR0RlFVTm1MR0ZCUVdFc1JVRkJSU3hQUVVGUE96dEJRVVYwUWl4dlEwRkJhMEk3UlVGRGFFSXNTMEZCU3l4RlFVRkZMRWxCUVVrN1JVRkRXQ3hYUVVGWExFVkJRVVVzUTBGQlF6czdRVTV5UkdRc2JVTkJRWGxETzBWTk5FTTNReXh2UWtGQmNVSTdTVUZoYkVJc1MwRkJTeXhGUVVGRkxFbEJRVWs3U1VGRFdDeE5RVUZOTEVWQlFVVXNTVUZCU1R0SlFVTmFMRTFCUVUwc1JVRkJSU3hWUVVGVk96czdRVUZIYmtJc2QwSkJRVTA3UlVGRFNpeFBRVUZQTEVWQlFVVXNTMEZCU3p0RlFVTmtMR1ZCUVdVc1JVRkJSU3hKUVVGSk8wVkJRM0pDTEZWQlFWVXNSVUZCUlN4WlFVRlpPenRCUVVWNFFpdzRRa0ZCVVR0RlFVTk9MRTFCUVUwc1JVRkJSU3hKUVVGSk8wVkJRMW9zVDBGQlR5eEZRVUZGTEVkQlFVYzdSVUZEV2l4aFFVRmhMRVZCUVVVc1VVRkJTenRGUVVOd1FpeG5Ra0ZCWjBJc1JVd3ZSVUVzVDBGQlR6czdPMEZMY1VZM1FpeHRRMEZCYjBNN1JVRkRiRU1zVjBGQlZ5eEZRVUZGTEd0Q1FVRnJRanRGUVVNdlFpeExRVUZMTEVWTU9VVk5MRTlCUVdsQ096czdRVXRwUmpsQ0xEQkNRVUV5UWp0RlFVTjZRaXhOUVVGTkxFVkJRVVVzUTBGQlF6dEZRVU5VTEU5QlFVOHNSVUZCUlN4aFFVRmhPMFZCUlhSQ0xGZEJRVmNzUlVGQlJTeE5RVUZOTzBWQlEyNUNMRmRCUVZjc1JVRkJSU3hKUVVGSk96czdRVUZIYmtJc1owTkJRV2xETzBWQlF5OUNMRXRCUVVzc1JVRkJSU3hKUVVGSk8wVkJRMWdzUzBGQlN5eEZRVUZGTEVsQlFVazdSVUZEV0N4VFFVRlRMRVZRTTBkSkxFdEJRVXM3UlU4MFIyeENMRTFCUVUwc1JVRkJSU3hKUVVGSk8wVkJRMW9zVjBGQlZ5eEZRVUZGTEVOQlFVTTdPMEZPTVVaYUxHOURRVUZ4UXp0RlRYRkdla01zWjBOQlFXbERPMGxCVVRkQ0xGZEJRVmNzUlVGQlJTeEpRVUZKTzBsQlEycENMRmxCUVZrc1JVRkJSU3hKUVVGSk96czdRVUZIY0VJc01rUkJRVEpDTzBWQlEzcENMR0ZCUVdFc1JVRkJSU3hMUVVGTE8wVkJSWEJDTEZkQlFWY3NSVUZCUlN4SlFVRkpPMFZCUTJwQ0xHVkJRV1VzUlVGQlJTeEpRVUZKTzBWQlEzSkNMRXRCUVVzc1JVeDZSMU1zVDBGQmEwSTdPMEZFUm1oRExHMURRVUY1UXp0RlRYTkhNME1zTWtSQlFUSkNPMGxPYUVnelFpeFRRVUZUTEVWQlFVVXNUMEZCWXpzN08wRk5ORWg2UWl3clJFRkJLMEk3UlVGRE4wSXNaVUZCWlN4RlFVRkZMRWxCUVVrN08wRkJSWFpDTEdsRlFVRnBRenRGUVVNdlFpeE5RVUZOTEVWQlFVVXNRMEZCUXp0RlFVTlVMRXRCUVVzc1JVeDBTRWtzVDBGQmFVSTdPMEZFUkRGQ0xHMURRVUY1UXp0RlRYRklNME1zYVVWQlFXbERPMGxPTDBocVF5eFRRVUZUTEVWQlFVVXNUMEZCWXpzN096czdPenM3TzBGUFJqTkNMR2xDUVVGclFqdEZRVU5vUWl4TlFVRk5MRVZCUVVVc1RVRkJUVHM3T3p0QlFWbG9RaXh0UWtGQmJVSTdSVUZEYWtJc1MwRkJTeXhGUVVGRkxFbEJRVWs3T3p0QlFVdFlMSGxDUVVGUk8wVkJRMDRzVDBGQlR5eEZRVUZGTEVkQlFVYzdSVUZEV2l4TlFVRk5MRVZCUVVVc1VVRkJVVHRGUVVOb1FpeFhRVUZYTEVWQlFVVXNTVUZCU1RzN08wRkJTWEpDTEd0Q1FVRnRRanRGUVVOcVFpeFhRVUZYTEVWQlFVVXNRMEZCUXpzN096dEJRVmRrTEdkQ1FVRkhPMFZCUTBRc1ZVRkJWU3hGUVVGRkxFdEJRV3RDT3p0QlVETkNPVUlzYlVOQlFYbERPMFZQTUVJelF5eG5Ra0ZCUnp0SlFVZERMRmRCUVZjc1JVRkJSU3hKUVVGelFqdEpVSFpEZGtNc1UwRkJVeXhGUVVGRkxFMUJRV003T3p0QlR6UkRla0lzWjBKQlFVYzdSVUZEUkN4VlFVRlZMRVZCUVVVc1RVRkJiMEk3TzBGQlIyeERMR1ZCUVVVN1JVRkRRU3hOUVVGTkxFVkJRVVVzVDBGQll6czdRVUZKZEVJc05FZEJRVTA3UlVGRFNpeFZRVUZWTEVWQlFVVXNRMEZCUXpzN1FVRkpha0k3WjBKQlEwYzdSVUZEUkN4WlFVRlpMRVZCUVVVc1IwRkJSenM3UVVGSGJrSXNaMEpCUVVjN1JVRkRSQ3hYUVVGWExFVkJRVVVzU1VGQlNUczdRVUZIYmtJc1owSkJRVWM3UlVGRFJDeFhRVUZYTEVWQlFVVXNRMEZCUXpzN1FVRkhhRUlzY1VKQlFWRTdSVUZEVGl4VlFVRlZMRVZCUVVVc1NVRkJTVHM3UVVGSGJFSXNaMEpCUVVjN1JVRkRSQ3hOUVVGTkxFVkJRVVVzVlVGQlZUdEZRVU5zUWl4TlFVRk5MRVZCUVVVc1EwRkJRenRGUVVOVUxGVkJRVlVzUlVGQlJTeHRRa0ZCTWtJN08wRkJSM3BETEcxQ1FVRk5PMFZCUTBvc1UwRkJVeXhGUVVGRkxFbEJRVWs3UlVGRFppeFRRVUZUTEVWQlFVVXNSMEZCUnp0RlFVTmtMRTFCUVUwc1JVRkJSU3hsUVVGbE96dEJVREZGZGtJc2JVTkJRWGxETzBWUGRVVXpReXh0UWtGQlRUdEpVR3BHVGl4VFFVRlRMRVZCUVVVc1QwRkJZenM3TzBGUE1FWjZRaXh4UWtGQlVUdEZRVU5PTEdGQlFXRXNSVUZCUlN4TFFVRkxPenRCUVVkMFFpeHJRMEZCVHp0RlFVTk1MRTlCUVU4c1JVRkJSU3hIUVVGSE96dEJVSEpHV2l4dFEwRkJlVU03UlU5dlJqTkRMR3REUVVGUE8wbEJSMGdzVDBGQlR5eEZRVUZGTEV0QlFVczdPenRCUVVsc1FpeG5Ra0ZCUnp0RlFVTkVMR05CUVdNc1JVRkJSU3hKUVVGSk8wVkJRM0JDTEdGQlFXRXNSVUZCUlN4cFFrRkJjVUk3TzBGQlIzUkRMR2RDUVVGSE8wVkJRMFFzWVVGQllTeEZRVUZGTEdsQ1FVRXdRanM3UVVGSE0wTXNhVUpCUVVrN1JVRkRSaXhUUVVGVExFVkJRVVVzU1VGQlNUczdRVUZIYWtJc2IwTkJRWFZDTzBWQlEzSkNMRTFCUVUwc1JVRkJSU3hKUVVGSk96dEJRVWRrTERSQ1FVRmxPMFZCUTJJc1MwRkJTeXhGUVVGRkxFbEJRVWs3UlVGRFdDeE5RVUZOTEVWQlFVVXNZVUZCYlVJN08wRlFPVWN6UWl4dFEwRkJlVU03UlU4MFJ6TkRMRFJDUVVGbE8wbEJTVmdzVFVGQlRTeEZRVUZGTEdGQlFUSkNPenM3UVVGSmRrTXNOa0pCUVdkQ08wVkJRMlFzUzBGQlN5eEZRVUZGTEV0QlFVczdSVUZEV2l4TlFVRk5MRVZCUVVVc1lVRkJiVUk3TzBGUWRFZ3pRaXh0UTBGQmVVTTdSVTl2U0RORExEWkNRVUZuUWp0SlFVbGFMRTFCUVUwc1JVRkJSU3hoUVVFeVFqczdPMEZCU1haRExEaENRVUZwUWp0RlFVTm1MRTlCUVU4c1JVRkJSU3hMUVVGTE8wVkJRMlFzVTBGQlV5eEZRVUZGTEVsQlFVazdSVUZEWml4TlFVRk5MRVZCUVVVc1ZVRkJWVHM3UVVGSGNFSXNkMEpCUVZjN1JVRkRWQ3hYUVVGWExFVkJRVVVzUTBGQlF6dEZRVU5rTEZsQlFWa3NSVUZCUlN4RFFVRkRPMFZCUTJZc1dVRkJXU3hGUVVGRkxFZEJRVWM3UlVGRGFrSXNWMEZCVnl4RlFVRkZMR2xDUVVFd1FqczdRVUZIZWtNc2EwSkJRVXM3UlVGRFNDeFZRVUZWTEVWQlFVVXNTMEZCU3pzN1FVRlBia0lzZDBKQlFWYzdSVUZEVkN4aFFVRmhMRVZCUVVVc1kwRkJZenM3UVVGSEwwSXNiMEpCUVU4N1JVRkRUQ3hoUVVGaExFVkJPVWhCTEV0QlFYVkNPenRCUVdsSmRFTXNiMEpCUVU4N1JVRkRUQ3hOUVVGTkxFVkJRVVVzUzBGQlN6dEZRVU5pTEU5QlFVOHNSVUZCUlN4VFFVRlRPMFZCUTJ4Q0xHRkJRV0VzUlVGQlJTeEhRVUZITzBWQlEyeENMRlZCUVZVc1JVNXlTMUVzVDBGQlR6dEZUWE5MZWtJc1kwRkJZeXhGUVVGRkxFZEJRVWM3T3p0QlFWRnlRaXhSUVVGSE8wVkJRMFFzVFVGQlRTeEZRVUZGTEVOQlFVTTdPenM3UVVGTFlpeE5RVUZQTzBWQlEwd3NVVUZCVVN4RlFVRkZMRkZCUVZFN1JVRkRiRUlzVDBGQlR5eEZRVUZGTEd0Q1FVRnJRanRGUVVNelFpeFZRVUZWTEVWT2RreFZMRTlCUVU4N08wRk5kMHd6UWl4VFFVRkhPMFZCUTBRc1YwRkJWeXhGUVVGRkxFTkJRVU03TzBGQlJXaENMR2xDUVVGWE8wVkJRMVFzVVVGQlVTeEZRVUZGTEZGQlFWRTdSVUZEYkVJc1RVRkJUU3hGUVVGRkxFTkJRVU03UlVGRFZDeFBRVUZQTEVWQlFVVXNRMEZCUXpzN1FVRkZXaXhaUVVGTk8wVkJRMG9zVVVGQlVTeEZRVUZGTEZGQlFWRTdSVUZEYkVJc1MwRkJTeXhGUVVGRkxFbEJRVWs3UlVGRFdDeE5RVUZOTEVWQlFVVXNTVUZCU1R0RlFVTmFMRlZCUVZVc1JVRkJSU3hMUVVGTE96czdRVUZKY2tJc1lVRkJZenRGUVVOYUxGRkJRVkVzUlVGQlJTeFJRVUZSTzBWQlEyeENMRXRCUVVzc1JVRkJSU3hKUVVGSk8wVkJRMWdzWTBGQll5eEZRVUZGTEUxQlFXRTdPMEZCUlRkQ0xITkNRVUZYTzBWQlExUXNVVUZCVVN4RlFVRkZMRkZCUVZFN1JVRkRiRUlzUjBGQlJ5eEZRVUZGTEVOQlFVTTdSVUZEVGl4TFFVRkxMRVZCUVVVc1EwRkJRenRGUVVOU0xFMUJRVTBzUlVGQlJTeERRVUZETzBWQlExUXNTVUZCU1N4RlFVRkZMRU5CUVVNN1JVRkRVQ3hOUVVGTkxFVkJRVVVzU1VGQlNUdEZRVU5hTEV0QlFVc3NSVUZCUlN4SlFVRkpPenM3TzBGQlMyWXNkMEpCUVhsQ08wVkJRM1pDTEUxQlFVMHNSVUZCUlN4VlFVRlZPenM3UVVGSmNFSXNiMEpCUVhGQ08wVkJRMjVDTEUxQlFVMHNSVUZCUlN4TlFVRlRPenM3UVVGSGJrSXNNRUpCUVRKQ08wVkJRM3BDTEZWQlFWVXNSVUZCUlN4SlFVRlhPMFZCUTNaQ0xGZEJRVmNzUlVGQlJTeEpRVUZKT3pzN1FVRkhia0lzZVVKQlFUQkNPMFZCUTNoQ0xGZEJRVmNzUlVGQlJTeERRVUZET3pzN1FVRkxhRUlzVjBGQldUdEZRVU5XTEUxQlFVMHNSVUZCUlN4TlFVRk5PenM3UVVGSGFFSXNhMEpCUVcxQ08wVkJSV3BDTEdGQlFXRXNSVUZCUlN4cFFrRkJNRUk3T3p0QlFVa3pReXhuUWtGQmFVSTdSVUZEWml4UlFVRlJMRVZCUVVVc1VVRkJVVHRGUVVOc1FpeE5RVUZOTEVWQlFVVXNVMEZCVXpzN08wRkJSMjVDTEhOQ1FVRjFRanRGUVVOeVFpeExRVUZMTEVWQlFVVXNSMEZCUnp0RlFVTldMRlZCUVZVc1JVRkJSU3hKUVVGWE8wVkJRM1pDTEZkQlFWY3NSVUZCUlN4SlFVRkpPenM3UVVGSGJrSXNjVUpCUVhOQ08wVkJRM0JDTEZWQlFWVXNSVUZCUlN4VlFVRlZPMFZCUTNSQ0xFdEJRVXNzUlVGQlJTeEhRVUZITzBWQlExWXNWMEZCVnl4RlFVRkZMRU5CUVVNN08wRkJSMlFzZVVKQlFVMDdSVUZEU2l4UFFVRlBMRVZCUVVVc1MwRkJTenM3TzBGQlNXeENMSE5DUVVGMVFqdEZRVU55UWl4aFFVRmhMRVZCUVVVc1NVRkJTVHM3UVZCMFVXcENMRzFEUVVGNVF6dEZUM0ZSTjBNc2MwSkJRWFZDTzBsQlNXNUNMR0ZCUVdFc1JVRkJSU3hMUVVGTE96czdPMEZCU1hoQ0xITkNRVUYxUWp0RlFVTnlRaXhSUVVGUkxFVkJRVVVzVVVGQlVUdEZRVU5zUWl4SFFVRkhMRVZCUVVVc1EwRkJRenRGUVVOT0xFdEJRVXNzUlVGQlJTeERRVUZETzBWQlExSXNWVUZCVlN4RlFVRkZMRU5CUVVNN1JVRkRZaXhaUVVGWkxFVkJRVVVzU1VGQlNUdEZRVU5zUWl4VlFVRlZMRVZCUVVVc1MwRkJTenM3UVZCdVVtWXNiVU5CUVhsRE8wVlBObEUzUXl4elFrRkJkVUk3U1VGVGJrSXNXVUZCV1N4RlFVRkZMRXRCUVVzN096czdRVUZKZGtJc01rTkJRVFJETzBWQlF6RkRMRWRCUVVjc1JVRkJSU3hOUVVGTk96czdPenRCUTNCVFlpeGhRVUZqTzBWQlExb3NXVUZCV1N4RlFVRkZMRU5CUVVNN1JVRkRaaXhWUVVGVkxFVkJRVVVzU1VGQlNUczdPMEZCU1doQ0xHZERRVUZqTzBWQlExb3NTMEZCU3l4RlFVRkZMRWxCUVVrN1JVRkRXQ3hoUVVGaExFVkJRVVVzUzBGQlN6dEZRVU53UWl4VlFVRlZMRVZCUVVVc1NVRkJTVHM3UVVGRmJFSXNhMFJCUVdkRE8wVkJRemxDTEZkQlFWY3NSVUZCUlN4RFFVRkRPenM3UVVGSmJFSXNkMEpCUVhsQ08wVkJRM1pDTEUxQlFVMHNSVUZCUlN4UlFVRlJPMFZCUldoQ0xGZEJRVmNzUlVGQlJTeEhRVUZITzBWQlEyaENMRmRCUVZjc1JVRkJSU3hKUVVGSk96dEJRVU5xUWl3MFFrRkJUVHRGUVVOS0xHVkJRV1VzUlVGQlJTeEpRVUZKT3pzN096czdPenM3UVVOc1FucENMR0ZCUVdNN1JVRkRXaXhMUVVGTExFVkJRVVVzU1VGQlNUdEZRVU5ZTEV0QlFVc3NSVUZCUlN4SFFVRkhPMFZCUTFZc1RVRkJUU3hGUVVGRkxFbEJRVWs3UlVGRFdpeFRRVUZUTEVWQlFVVXNSMEZCUnp0RlFVTmtMRmxCUVZrc1JVRkJSU3hIUVVGSE8wVkJRMnBDTEdGQlFXRXNSVUZCUlN4SFFVRkhPMFZCUTJ4Q0xHRkJRV0VzUlVGQlJTeEhRVUZIT3pzN096czdPenRCUTJSd1FpeExRVUZOTzBWQlEwb3NUMEZCVHl4RlFVRkZMRXRCUVVzN1JVRkRaQ3hWUVVGVkxFVkJRVVVzU1VGQlNUdEZRVU5vUWl4UFFVRlBMRVZCUVVVc1MwRkJTenRGUVVOa0xFdEJRVXNzUlVGQlJTeEpRVUZKTzBWQlExZ3NWVUZCVlN4RlFVRkZMRTlCUVU4N1JVRkRia0lzZDBKQlFYZENMRVZCUVVVc1NVRkJTVHM3TzBGQlIyaERPenRoUVVWak8wVkJRMW9zUzBGQlN5eEZRVUZGTEVsQlFVazdSVUZEV0N4VlFVRlZMRVZCUVVVc1RVRkJUVHM3TzBGQlIzQkNPenM3T3pzN1dVRk5ZVHRGUVVOWUxFdEJRVXNzUlVGQlJTeEpRVUZKTzBWQlExZ3NWMEZCVnl4RlFVRkZMRWxCUVVrN096dEJRVWR1UWpzN2IwSkJSWEZDTzBWQlEyNUNMRXRCUVVzc1JVRkJSU3hQUVVGUE96czdRVUZIYUVJN096czdhMEpCU1cxQ08wVkJRMnBDTEV0QlFVc3NSVUZCUlN4SlFVRkpPenM3UVVGSFlqczdkMEpCUlhsQ08wVkJRM1pDTEV0QlFVc3NSVUZCUlN4SlFVRkpPMFZCUTFnc1YwRkJWeXhGUVVGRkxFbEJRVWs3T3p0QlFVZHVRanRYUVVOWk8wVkJRMVlzVjBGQlZ5eEZRVUZGTEUxQlFVMDdPenRCUVVkeVFqczdPMnRDUVVkdFFqdEZRVU5xUWl4TFFVRkxMRVZCUVVVc1NVRkJTVHRGUVVOWUxGZEJRVmNzUlVGQlJTeEpRVUZKT3pzN1FVRkhia0k3T3pzclFrRkhaME03UlVGRE9VSXNTMEZCU3l4RlFVRkZMRTlCUVU4N1JVRkRaQ3hYUVVGWExFVkJRVVVzVFVGQlRUczdPMEZCUjNKQ096dG5Ra0ZGYVVJN1JVRkRaaXhMUVVGTExFVkJRVVVzVDBGQlR6czdPMEZCUjJoQ0xGbEJRV0U3UlVGRFdDeExRVUZMTEVWQlFVVXNUMEZCVHpzN08wRkJSMmhDT3pzN096czdXVUZOWVR0RlFVTllMRXRCUVVzc1JVRkJSU3hQUVVGUE96czdRVUZIYUVJc1kwRkJaVHRGUVVOaUxFdEJRVXNzUlVGQlJTeFBRVUZQT3pzN1FVRkhhRUk3T3pzN08xZEJTMWs3UlVGRFZpeExRVUZMTEVWQlFVVXNTVUZCU1R0RlFVTllMRmRCUVZjc1JVRkJSU3hKUVVGSk96czdRVUZIYmtJc1kwRkJaVHRGUVVOaUxGVkJRVlVzUlVGQlJTeEpRVUZKT3pzN1FVRkhiRUlzWTBGQlpUdEZRVU5pTEZWQlFWVXNSVUZCUlN4SlFVRkpPenM3UVVGSGJFSXNhMEpCUVcxQ08wVkJRMnBDTEZWQlFWVXNSVUZCUlN4UFFVRlBPenM3UVVGSGNrSXNWMEZCV1R0RlFVTldMRXRCUVVzc1JVRkJSU3hKUVVGSklpd2ljMjkxY21ObGN5STZXeUptYjNWdVpHRjBhVzl1TDE5dWIzSnRZV3hwZW1VdWMyTnpjeUlzSW1admRXNWtZWFJwYjI0dlgyeGhlVzkxZEM1elkzTnpJaXdpWm05MWJtUmhkR2x2Ymk5ZmJXbDRhVzR1YzJOemN5SXNJbVp2ZFc1a1lYUnBiMjR2WDNaaGNtbGhZbXhsTG5OamMzTWlMQ0ptYjNWdVpHRjBhVzl1TDE5bWRXNWpkR2x2Ymk1elkzTnpJaXdpWm05MWJtUmhkR2x2Ymk5ZlkyOXlaUzV6WTNOeklpd2labTkxYm1SaGRHbHZiaTlmWlhoMFpXNWtjeTV6WTNOeklpd2liMkpxWldOMEwyTnZiWEJ2Ym1WdWRDOWZZMjl0Y0c5dVpXNTBMbk5qYzNNaUxDSnZZbXBsWTNRdmNISnZhbVZqZEM5ZmFXNWtaWGd1YzJOemN5SXNJbTlpYW1WamRDOXdjbTlxWldOMEwxOWhjblJwWTJ4bExuTmpjM01pTENKdlltcGxZM1F2Y0hKdmFtVmpkQzlmWVhKamFHbDJaUzV6WTNOeklpd2liMkpxWldOMEwzQnliMnBsWTNRdlgzQmhaMlV1YzJOemN5SXNJbXhwWWk5b2FXZG9iR2xuYUhScWN5OWZaMmwwYUhWaUxuTmpjM01pWFN3aWJtRnRaWE1pT2x0ZExDSm1hV3hsSWpvaWMzUjViR1V1WTNOeklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9oSUc1dmNtMWhiR2w2WlM1amMzTWdkak11TUM0d0lId2dUVWxVSUV4cFkyVnVjMlVnZkNCbmFYUXVhVzh2Ym05eWJXRnNhWHBsSUNvdlhHNWNiaThxS2x4dUlDb2dNUzRnVTJWMElHUmxabUYxYkhRZ1ptOXVkQ0JtWVcxcGJIa2dkRzhnYzJGdWN5MXpaWEpwWmk1Y2JpQXFJREl1SUZCeVpYWmxiblFnYVU5VElIUmxlSFFnYzJsNlpTQmhaR3AxYzNRZ1lXWjBaWElnYjNKcFpXNTBZWFJwYjI0Z1kyaGhibWRsTENCM2FYUm9iM1YwSUdScGMyRmliR2x1WjF4dUlDb2dJQ0FnZFhObGNpQjZiMjl0TGx4dUlDb3ZYRzVjYm1oMGJXd2dlMXh1SUNCbWIyNTBMV1poYldsc2VUb2djMkZ1Y3kxelpYSnBaanNnTHlvZ01TQXFMMXh1SUNBdGJYTXRkR1Y0ZEMxemFYcGxMV0ZrYW5WemREb2dNVEF3SlRzZ0x5b2dNaUFxTDF4dUlDQXRkMlZpYTJsMExYUmxlSFF0YzJsNlpTMWhaR3AxYzNRNklERXdNQ1U3SUM4cUlESWdLaTljYm4xY2JseHVMeW9xWEc0Z0tpQlNaVzF2ZG1VZ1pHVm1ZWFZzZENCdFlYSm5hVzR1WEc0Z0tpOWNibHh1WW05a2VTQjdYRzRnSUcxaGNtZHBiam9nTUR0Y2JuMWNibHh1THlvZ1NGUk5URFVnWkdsemNHeGhlU0JrWldacGJtbDBhVzl1YzF4dUlDQWdQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDBnS2k5Y2JseHVMeW9xWEc0Z0tpQkRiM0p5WldOMElHQmliRzlqYTJBZ1pHbHpjR3hoZVNCdWIzUWdaR1ZtYVc1bFpDQnBiaUJKUlNBNEx6a3VYRzRnS2k5Y2JseHVZWEowYVdOc1pTeGNibUZ6YVdSbExGeHVaR1YwWVdsc2N5eGNibVpwWjJOaGNIUnBiMjRzWEc1bWFXZDFjbVVzWEc1bWIyOTBaWElzWEc1b1pXRmtaWElzWEc1b1ozSnZkWEFzWEc1dFlXbHVMRnh1Ym1GMkxGeHVjMlZqZEdsdmJpeGNibk4xYlcxaGNua2dlMXh1SUNCa2FYTndiR0Y1T2lCaWJHOWphenRjYm4xY2JseHVMeW9xWEc0Z0tpQXhMaUJEYjNKeVpXTjBJR0JwYm14cGJtVXRZbXh2WTJ0Z0lHUnBjM0JzWVhrZ2JtOTBJR1JsWm1sdVpXUWdhVzRnU1VVZ09DODVMbHh1SUNvZ01pNGdUbTl5YldGc2FYcGxJSFpsY25ScFkyRnNJR0ZzYVdkdWJXVnVkQ0J2WmlCZ2NISnZaM0psYzNOZ0lHbHVJRU5vY205dFpTd2dSbWx5WldadmVDd2dZVzVrSUU5d1pYSmhMbHh1SUNvdlhHNWNibUYxWkdsdkxGeHVZMkZ1ZG1GekxGeHVjSEp2WjNKbGMzTXNYRzUyYVdSbGJ5QjdYRzRnSUdScGMzQnNZWGs2SUdsdWJHbHVaUzFpYkc5amF6c2dMeW9nTVNBcUwxeHVJQ0IyWlhKMGFXTmhiQzFoYkdsbmJqb2dZbUZ6Wld4cGJtVTdJQzhxSURJZ0tpOWNibjFjYmx4dUx5b3FYRzRnS2lCUWNtVjJaVzUwSUcxdlpHVnliaUJpY205M2MyVnljeUJtY205dElHUnBjM0JzWVhscGJtY2dZR0YxWkdsdllDQjNhWFJvYjNWMElHTnZiblJ5YjJ4ekxseHVJQ29nVW1WdGIzWmxJR1Y0WTJWemN5Qm9aV2xuYUhRZ2FXNGdhVTlUSURVZ1pHVjJhV05sY3k1Y2JpQXFMMXh1WEc1aGRXUnBienB1YjNRb1cyTnZiblJ5YjJ4elhTa2dlMXh1SUNCa2FYTndiR0Y1T2lCdWIyNWxPMXh1SUNCb1pXbG5hSFE2SURBN1hHNTlYRzVjYmk4cUtseHVJQ29nUVdSa2NtVnpjeUJnVzJocFpHUmxibDFnSUhOMGVXeHBibWNnYm05MElIQnlaWE5sYm5RZ2FXNGdTVVVnT0M4NUxseHVJQ29nU0dsa1pTQjBhR1VnWUhSbGJYQnNZWFJsWUNCbGJHVnRaVzUwSUdsdUlFbEZMQ0JUWVdaaGNta3NJR0Z1WkNCR2FYSmxabTk0SUR3Z01qSXVYRzRnS2k5Y2JseHVXMmhwWkdSbGJsMHNYRzUwWlcxd2JHRjBaU0I3WEc0Z0lHUnBjM0JzWVhrNklHNXZibVU3WEc1OVhHNWNiaThxSUV4cGJtdHpYRzRnSUNBOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBTQXFMMXh1WEc0dktpcGNiaUFxSUZKbGJXOTJaU0IwYUdVZ1ozSmhlU0JpWVdOclozSnZkVzVrSUdOdmJHOXlJR1p5YjIwZ1lXTjBhWFpsSUd4cGJtdHpJR2x1SUVsRklERXdMbHh1SUNvdlhHNWNibUVnZTF4dUlDQmlZV05yWjNKdmRXNWtPaUIwY21GdWMzQmhjbVZ1ZER0Y2JuMWNibHh1THlvcVhHNGdLaUJKYlhCeWIzWmxJSEpsWVdSaFltbHNhWFI1SUhkb1pXNGdabTlqZFhObFpDQmhibVFnWVd4emJ5QnRiM1Z6WlNCb2IzWmxjbVZrSUdsdUlHRnNiQ0JpY205M2MyVnljeTVjYmlBcUwxeHVYRzVoT21GamRHbDJaU3hjYm1FNmFHOTJaWElnZTF4dUlDQnZkWFJzYVc1bE9pQXdPMXh1ZlZ4dVhHNHZLaUJVWlhoMExXeGxkbVZzSUhObGJXRnVkR2xqYzF4dUlDQWdQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDBnS2k5Y2JseHVMeW9xWEc0Z0tpQkJaR1J5WlhOeklITjBlV3hwYm1jZ2JtOTBJSEJ5WlhObGJuUWdhVzRnU1VVZ09DODVMQ0JUWVdaaGNta2dOU3dnWVc1a0lFTm9jbTl0WlM1Y2JpQXFMMXh1WEc1aFltSnlXM1JwZEd4bFhTQjdYRzRnSUdKdmNtUmxjaTFpYjNSMGIyMDZJREZ3ZUNCa2IzUjBaV1E3WEc1OVhHNWNiaThxS2x4dUlDb2dRV1JrY21WemN5QnpkSGxzWlNCelpYUWdkRzhnWUdKdmJHUmxjbUFnYVc0Z1JtbHlaV1p2ZUNBMEt5d2dVMkZtWVhKcElEVXNJR0Z1WkNCRGFISnZiV1V1WEc0Z0tpOWNibHh1WWl4Y2JuTjBjbTl1WnlCN1hHNGdJR1p2Ym5RdGQyVnBaMmgwT2lCaWIyeGtPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFRmtaSEpsYzNNZ2MzUjViR2x1WnlCdWIzUWdjSEpsYzJWdWRDQnBiaUJUWVdaaGNta2dOU0JoYm1RZ1EyaHliMjFsTGx4dUlDb3ZYRzVjYm1SbWJpQjdYRzRnSUdadmJuUXRjM1I1YkdVNklHbDBZV3hwWXp0Y2JuMWNibHh1THlvcVhHNGdLaUJCWkdSeVpYTnpJSFpoY21saFlteGxJR0JvTVdBZ1ptOXVkQzF6YVhwbElHRnVaQ0J0WVhKbmFXNGdkMmwwYUdsdUlHQnpaV04wYVc5dVlDQmhibVFnWUdGeWRHbGpiR1ZnWEc0Z0tpQmpiMjUwWlhoMGN5QnBiaUJHYVhKbFptOTRJRFFyTENCVFlXWmhjbWtnTlN3Z1lXNWtJRU5vY205dFpTNWNiaUFxTDF4dVhHNW9NU0I3WEc0Z0lHWnZiblF0YzJsNlpUb2dNbVZ0TzF4dUlDQnRZWEpuYVc0NklEQXVOamRsYlNBd08xeHVmVnh1WEc0dktpcGNiaUFxSUVGa1pISmxjM01nYzNSNWJHbHVaeUJ1YjNRZ2NISmxjMlZ1ZENCcGJpQkpSU0E0THprdVhHNGdLaTljYmx4dWJXRnlheUI3WEc0Z0lHSmhZMnRuY205MWJtUTZJQ05tWmpBN1hHNGdJR052Ykc5eU9pQWpNREF3TzF4dWZWeHVYRzR2S2lwY2JpQXFJRUZrWkhKbGMzTWdhVzVqYjI1emFYTjBaVzUwSUdGdVpDQjJZWEpwWVdKc1pTQm1iMjUwSUhOcGVtVWdhVzRnWVd4c0lHSnliM2R6WlhKekxseHVJQ292WEc1Y2JuTnRZV3hzSUh0Y2JpQWdabTl1ZEMxemFYcGxPaUE0TUNVN1hHNTlYRzVjYmk4cUtseHVJQ29nVUhKbGRtVnVkQ0JnYzNWaVlDQmhibVFnWUhOMWNHQWdZV1ptWldOMGFXNW5JR0JzYVc1bExXaGxhV2RvZEdBZ2FXNGdZV3hzSUdKeWIzZHpaWEp6TGx4dUlDb3ZYRzVjYm5OMVlpeGNibk4xY0NCN1hHNGdJR1p2Ym5RdGMybDZaVG9nTnpVbE8xeHVJQ0JzYVc1bExXaGxhV2RvZERvZ01EdGNiaUFnY0c5emFYUnBiMjQ2SUhKbGJHRjBhWFpsTzF4dUlDQjJaWEowYVdOaGJDMWhiR2xuYmpvZ1ltRnpaV3hwYm1VN1hHNTlYRzVjYm5OMWNDQjdYRzRnSUhSdmNEb2dMVEF1TldWdE8xeHVmVnh1WEc1emRXSWdlMXh1SUNCaWIzUjBiMjA2SUMwd0xqSTFaVzA3WEc1OVhHNWNiaThxSUVWdFltVmtaR1ZrSUdOdmJuUmxiblJjYmlBZ0lEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlJQ292WEc1Y2JpOHFLbHh1SUNvZ1VtVnRiM1psSUdKdmNtUmxjaUIzYUdWdUlHbHVjMmxrWlNCZ1lXQWdaV3hsYldWdWRDQnBiaUJKUlNBNEx6a3VYRzRnS2k5Y2JseHVhVzFuSUh0Y2JpQWdZbTl5WkdWeU9pQXdPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFTnZjbkpsWTNRZ2IzWmxjbVpzYjNjZ1pHbHpjR3hoZVdWa0lHOWtaR3g1SUdsdUlFbEZJRGt1WEc0Z0tpOWNibHh1YzNabk9tNXZkQ2c2Y205dmRDa2dlMXh1SUNCdmRtVnlabXh2ZHpvZ2FHbGtaR1Z1TzF4dWZWeHVYRzR2S2lCSGNtOTFjR2x1WnlCamIyNTBaVzUwWEc0Z0lDQTlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQU0FxTDF4dVhHNHZLaXBjYmlBcUlFRmtaSEpsYzNNZ2JXRnlaMmx1SUc1dmRDQndjbVZ6Wlc1MElHbHVJRWxGSURndk9TQmhibVFnVTJGbVlYSnBJRFV1WEc0Z0tpOWNibHh1Wm1sbmRYSmxJSHRjYmlBZ2JXRnlaMmx1T2lBeFpXMGdOREJ3ZUR0Y2JuMWNibHh1THlvcVhHNGdLaUJCWkdSeVpYTnpJR1JwWm1abGNtVnVZMlZ6SUdKbGRIZGxaVzRnUm1seVpXWnZlQ0JoYm1RZ2IzUm9aWElnWW5KdmQzTmxjbk11WEc0Z0tpOWNibHh1YUhJZ2UxeHVJQ0F0Ylc5NkxXSnZlQzF6YVhwcGJtYzZJR052Ym5SbGJuUXRZbTk0TzF4dUlDQmliM2d0YzJsNmFXNW5PaUJqYjI1MFpXNTBMV0p2ZUR0Y2JpQWdhR1ZwWjJoME9pQXdPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFTnZiblJoYVc0Z2IzWmxjbVpzYjNjZ2FXNGdZV3hzSUdKeWIzZHpaWEp6TGx4dUlDb3ZYRzVjYm5CeVpTQjdYRzRnSUc5MlpYSm1iRzkzT2lCaGRYUnZPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFRmtaSEpsYzNNZ2IyUmtJR0JsYldBdGRXNXBkQ0JtYjI1MElITnBlbVVnY21WdVpHVnlhVzVuSUdsdUlHRnNiQ0JpY205M2MyVnljeTVjYmlBcUwxeHVYRzVqYjJSbExGeHVhMkprTEZ4dWNISmxMRnh1YzJGdGNDQjdYRzRnSUdadmJuUXRabUZ0YVd4NU9pQnRiMjV2YzNCaFkyVXNJRzF2Ym05emNHRmpaVHRjYmlBZ1ptOXVkQzF6YVhwbE9pQXhaVzA3WEc1OVhHNWNiaThxSUVadmNtMXpYRzRnSUNBOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBTQXFMMXh1WEc0dktpcGNiaUFxSUV0dWIzZHVJR3hwYldsMFlYUnBiMjQ2SUdKNUlHUmxabUYxYkhRc0lFTm9jbTl0WlNCaGJtUWdVMkZtWVhKcElHOXVJRTlUSUZnZ1lXeHNiM2NnZG1WeWVTQnNhVzFwZEdWa1hHNGdLaUJ6ZEhsc2FXNW5JRzltSUdCelpXeGxZM1JnTENCMWJteGxjM01nWVNCZ1ltOXlaR1Z5WUNCd2NtOXdaWEowZVNCcGN5QnpaWFF1WEc0Z0tpOWNibHh1THlvcVhHNGdLaUF4TGlCRGIzSnlaV04wSUdOdmJHOXlJRzV2ZENCaVpXbHVaeUJwYm1obGNtbDBaV1F1WEc0Z0tpQWdJQ0JMYm05M2JpQnBjM04xWlRvZ1lXWm1aV04wY3lCamIyeHZjaUJ2WmlCa2FYTmhZbXhsWkNCbGJHVnRaVzUwY3k1Y2JpQXFJREl1SUVOdmNuSmxZM1FnWm05dWRDQndjbTl3WlhKMGFXVnpJRzV2ZENCaVpXbHVaeUJwYm1obGNtbDBaV1F1WEc0Z0tpQXpMaUJCWkdSeVpYTnpJRzFoY21kcGJuTWdjMlYwSUdScFptWmxjbVZ1ZEd4NUlHbHVJRVpwY21WbWIzZ2dOQ3NzSUZOaFptRnlhU0ExTENCaGJtUWdRMmh5YjIxbExseHVJQ292WEc1Y2JtSjFkSFJ2Yml4Y2JtbHVjSFYwTEZ4dWIzQjBaM0p2ZFhBc1hHNXpaV3hsWTNRc1hHNTBaWGgwWVhKbFlTQjdYRzRnSUdOdmJHOXlPaUJwYm1obGNtbDBPeUF2S2lBeElDb3ZYRzRnSUdadmJuUTZJR2x1YUdWeWFYUTdJQzhxSURJZ0tpOWNiaUFnYldGeVoybHVPaUF3T3lBdktpQXpJQ292WEc1OVhHNWNiaThxS2x4dUlDb2dRV1JrY21WemN5QmdiM1psY21ac2IzZGdJSE5sZENCMGJ5QmdhR2xrWkdWdVlDQnBiaUJKUlNBNEx6a3ZNVEF1WEc0Z0tpOWNibHh1WW5WMGRHOXVJSHRjYmlBZ2IzWmxjbVpzYjNjNklIWnBjMmxpYkdVN1hHNTlYRzVjYmk4cUtseHVJQ29nUVdSa2NtVnpjeUJwYm1OdmJuTnBjM1JsYm5RZ1lIUmxlSFF0ZEhKaGJuTm1iM0p0WUNCcGJtaGxjbWwwWVc1alpTQm1iM0lnWUdKMWRIUnZibUFnWVc1a0lHQnpaV3hsWTNSZ0xseHVJQ29nUVd4c0lHOTBhR1Z5SUdadmNtMGdZMjl1ZEhKdmJDQmxiR1Z0Wlc1MGN5QmtieUJ1YjNRZ2FXNW9aWEpwZENCZ2RHVjRkQzEwY21GdWMyWnZjbTFnSUhaaGJIVmxjeTVjYmlBcUlFTnZjbkpsWTNRZ1lHSjFkSFJ2Ym1BZ2MzUjViR1VnYVc1b1pYSnBkR0Z1WTJVZ2FXNGdSbWx5WldadmVDd2dTVVVnT0Nzc0lHRnVaQ0JQY0dWeVlWeHVJQ29nUTI5eWNtVmpkQ0JnYzJWc1pXTjBZQ0J6ZEhsc1pTQnBibWhsY21sMFlXNWpaU0JwYmlCR2FYSmxabTk0TGx4dUlDb3ZYRzVjYm1KMWRIUnZiaXhjYm5ObGJHVmpkQ0I3WEc0Z0lIUmxlSFF0ZEhKaGJuTm1iM0p0T2lCdWIyNWxPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlERXVJRUYyYjJsa0lIUm9aU0JYWldKTGFYUWdZblZuSUdsdUlFRnVaSEp2YVdRZ05DNHdMaW9nZDJobGNtVWdLRElwSUdSbGMzUnliM2x6SUc1aGRHbDJaU0JnWVhWa2FXOWdYRzRnS2lBZ0lDQmhibVFnWUhacFpHVnZZQ0JqYjI1MGNtOXNjeTVjYmlBcUlESXVJRU52Y25KbFkzUWdhVzVoWW1sc2FYUjVJSFJ2SUhOMGVXeGxJR05zYVdOcllXSnNaU0JnYVc1d2RYUmdJSFI1Y0dWeklHbHVJR2xQVXk1Y2JpQXFJRE11SUVsdGNISnZkbVVnZFhOaFltbHNhWFI1SUdGdVpDQmpiMjV6YVhOMFpXNWplU0J2WmlCamRYSnpiM0lnYzNSNWJHVWdZbVYwZDJWbGJpQnBiV0ZuWlMxMGVYQmxYRzRnS2lBZ0lDQmdhVzV3ZFhSZ0lHRnVaQ0J2ZEdobGNuTXVYRzRnS2k5Y2JseHVZblYwZEc5dUxGeHVhSFJ0YkNCcGJuQjFkRnQwZVhCbFBWd2lZblYwZEc5dVhDSmRMQ0F2S2lBeElDb3ZYRzVwYm5CMWRGdDBlWEJsUFZ3aWNtVnpaWFJjSWwwc1hHNXBibkIxZEZ0MGVYQmxQVndpYzNWaWJXbDBYQ0pkSUh0Y2JpQWdMWGRsWW10cGRDMWhjSEJsWVhKaGJtTmxPaUJpZFhSMGIyNDdJQzhxSURJZ0tpOWNiaUFnWTNWeWMyOXlPaUJ3YjJsdWRHVnlPeUF2S2lBeklDb3ZYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VtVXRjMlYwSUdSbFptRjFiSFFnWTNWeWMyOXlJR1p2Y2lCa2FYTmhZbXhsWkNCbGJHVnRaVzUwY3k1Y2JpQXFMMXh1WEc1aWRYUjBiMjViWkdsellXSnNaV1JkTEZ4dWFIUnRiQ0JwYm5CMWRGdGthWE5oWW14bFpGMGdlMXh1SUNCamRYSnpiM0k2SUdSbFptRjFiSFE3WEc1OVhHNWNiaThxS2x4dUlDb2dVbVZ0YjNabElHbHVibVZ5SUhCaFpHUnBibWNnWVc1a0lHSnZjbVJsY2lCcGJpQkdhWEpsWm05NElEUXJMbHh1SUNvdlhHNWNibUoxZEhSdmJqbzZMVzF2ZWkxbWIyTjFjeTFwYm01bGNpeGNibWx1Y0hWME9qb3RiVzk2TFdadlkzVnpMV2x1Ym1WeUlIdGNiaUFnWW05eVpHVnlPaUF3TzF4dUlDQndZV1JrYVc1bk9pQXdPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFRmtaSEpsYzNNZ1JtbHlaV1p2ZUNBMEt5QnpaWFIwYVc1bklHQnNhVzVsTFdobGFXZG9kR0FnYjI0Z1lHbHVjSFYwWUNCMWMybHVaeUJnSVdsdGNHOXlkR0Z1ZEdBZ2FXNWNiaUFxSUhSb1pTQlZRU0J6ZEhsc1pYTm9aV1YwTGx4dUlDb3ZYRzVjYm1sdWNIVjBJSHRjYmlBZ2JHbHVaUzFvWldsbmFIUTZJRzV2Y20xaGJEdGNibjFjYmx4dUx5b3FYRzRnS2lCSmRDZHpJSEpsWTI5dGJXVnVaR1ZrSUhSb1lYUWdlVzkxSUdSdmJpZDBJR0YwZEdWdGNIUWdkRzhnYzNSNWJHVWdkR2hsYzJVZ1pXeGxiV1Z1ZEhNdVhHNGdLaUJHYVhKbFptOTRKM01nYVcxd2JHVnRaVzUwWVhScGIyNGdaRzlsYzI0bmRDQnlaWE53WldOMElHSnZlQzF6YVhwcGJtY3NJSEJoWkdScGJtY3NJRzl5SUhkcFpIUm9MbHh1SUNwY2JpQXFJREV1SUVGa1pISmxjM01nWW05NElITnBlbWx1WnlCelpYUWdkRzhnWUdOdmJuUmxiblF0WW05NFlDQnBiaUJKUlNBNEx6a3ZNVEF1WEc0Z0tpQXlMaUJTWlcxdmRtVWdaWGhqWlhOeklIQmhaR1JwYm1jZ2FXNGdTVVVnT0M4NUx6RXdMbHh1SUNvdlhHNWNibWx1Y0hWMFczUjVjR1U5WENKamFHVmphMkp2ZUZ3aVhTeGNibWx1Y0hWMFczUjVjR1U5WENKeVlXUnBiMXdpWFNCN1hHNGdJR0p2ZUMxemFYcHBibWM2SUdKdmNtUmxjaTFpYjNnN0lDOHFJREVnS2k5Y2JpQWdjR0ZrWkdsdVp6b2dNRHNnTHlvZ01pQXFMMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFWnBlQ0IwYUdVZ1kzVnljMjl5SUhOMGVXeGxJR1p2Y2lCRGFISnZiV1VuY3lCcGJtTnlaVzFsYm5RdlpHVmpjbVZ0Wlc1MElHSjFkSFJ2Ym5NdUlFWnZjaUJqWlhKMFlXbHVYRzRnS2lCZ1ptOXVkQzF6YVhwbFlDQjJZV3gxWlhNZ2IyWWdkR2hsSUdCcGJuQjFkR0FzSUdsMElHTmhkWE5sY3lCMGFHVWdZM1Z5YzI5eUlITjBlV3hsSUc5bUlIUm9aVnh1SUNvZ1pHVmpjbVZ0Wlc1MElHSjFkSFJ2YmlCMGJ5QmphR0Z1WjJVZ1puSnZiU0JnWkdWbVlYVnNkR0FnZEc4Z1lIUmxlSFJnTGx4dUlDb3ZYRzVjYm1sdWNIVjBXM1I1Y0dVOVhDSnVkVzFpWlhKY0lsMDZPaTEzWldKcmFYUXRhVzV1WlhJdGMzQnBiaTFpZFhSMGIyNHNYRzVwYm5CMWRGdDBlWEJsUFZ3aWJuVnRZbVZ5WENKZE9qb3RkMlZpYTJsMExXOTFkR1Z5TFhOd2FXNHRZblYwZEc5dUlIdGNiaUFnYUdWcFoyaDBPaUJoZFhSdk8xeHVmVnh1WEc0dktpcGNiaUFxSURFdUlFRmtaSEpsYzNNZ1lHRndjR1ZoY21GdVkyVmdJSE5sZENCMGJ5QmdjMlZoY21Ob1ptbGxiR1JnSUdsdUlGTmhabUZ5YVNBMUlHRnVaQ0JEYUhKdmJXVXVYRzRnS2lBeUxpQkJaR1J5WlhOeklHQmliM2d0YzJsNmFXNW5ZQ0J6WlhRZ2RHOGdZR0p2Y21SbGNpMWliM2hnSUdsdUlGTmhabUZ5YVNBMUlHRnVaQ0JEYUhKdmJXVmNiaUFxSUNBZ0lDaHBibU5zZFdSbElHQXRiVzk2WUNCMGJ5Qm1kWFIxY21VdGNISnZiMllwTGx4dUlDb3ZYRzVjYm1sdWNIVjBXM1I1Y0dVOVhDSnpaV0Z5WTJoY0lsMGdlMXh1SUNBdGQyVmlhMmwwTFdGd2NHVmhjbUZ1WTJVNklIUmxlSFJtYVdWc1pEc2dMeW9nTVNBcUwxeHVJQ0F0Ylc5NkxXSnZlQzF6YVhwcGJtYzZJR052Ym5SbGJuUXRZbTk0TzF4dUlDQXRkMlZpYTJsMExXSnZlQzF6YVhwcGJtYzZJR052Ym5SbGJuUXRZbTk0T3lBdktpQXlJQ292WEc0Z0lHSnZlQzF6YVhwcGJtYzZJR052Ym5SbGJuUXRZbTk0TzF4dWZWeHVYRzR2S2lwY2JpQXFJRkpsYlc5MlpTQnBibTVsY2lCd1lXUmthVzVuSUdGdVpDQnpaV0Z5WTJnZ1kyRnVZMlZzSUdKMWRIUnZiaUJwYmlCVFlXWmhjbWtnWVc1a0lFTm9jbTl0WlNCdmJpQlBVeUJZTGx4dUlDb2dVMkZtWVhKcElDaGlkWFFnYm05MElFTm9jbTl0WlNrZ1kyeHBjSE1nZEdobElHTmhibU5sYkNCaWRYUjBiMjRnZDJobGJpQjBhR1VnYzJWaGNtTm9JR2x1Y0hWMElHaGhjMXh1SUNvZ2NHRmtaR2x1WnlBb1lXNWtJR0IwWlhoMFptbGxiR1JnSUdGd2NHVmhjbUZ1WTJVcExseHVJQ292WEc1Y2JtbHVjSFYwVzNSNWNHVTlYQ0p6WldGeVkyaGNJbDA2T2kxM1pXSnJhWFF0YzJWaGNtTm9MV05oYm1ObGJDMWlkWFIwYjI0c1hHNXBibkIxZEZ0MGVYQmxQVndpYzJWaGNtTm9YQ0pkT2pvdGQyVmlhMmwwTFhObFlYSmphQzFrWldOdmNtRjBhVzl1SUh0Y2JpQWdMWGRsWW10cGRDMWhjSEJsWVhKaGJtTmxPaUJ1YjI1bE8xeHVmVnh1WEc0dktpcGNiaUFxSUVSbFptbHVaU0JqYjI1emFYTjBaVzUwSUdKdmNtUmxjaXdnYldGeVoybHVMQ0JoYm1RZ2NHRmtaR2x1Wnk1Y2JpQXFMMXh1WEc1bWFXVnNaSE5sZENCN1hHNGdJR0p2Y21SbGNqb2dNWEI0SUhOdmJHbGtJQ05qTUdNd1l6QTdYRzRnSUcxaGNtZHBiam9nTUNBeWNIZzdYRzRnSUhCaFpHUnBibWM2SURBdU16VmxiU0F3TGpZeU5XVnRJREF1TnpWbGJUdGNibjFjYmx4dUx5b3FYRzRnS2lBeExpQkRiM0p5WldOMElHQmpiMnh2Y21BZ2JtOTBJR0psYVc1bklHbHVhR1Z5YVhSbFpDQnBiaUJKUlNBNEx6a3VYRzRnS2lBeUxpQlNaVzF2ZG1VZ2NHRmtaR2x1WnlCemJ5QndaVzl3YkdVZ1lYSmxiaWQwSUdOaGRXZG9kQ0J2ZFhRZ2FXWWdkR2hsZVNCNlpYSnZJRzkxZENCbWFXVnNaSE5sZEhNdVhHNGdLaTljYmx4dWJHVm5aVzVrSUh0Y2JpQWdZbTl5WkdWeU9pQXdPeUF2S2lBeElDb3ZYRzRnSUhCaFpHUnBibWM2SURBN0lDOHFJRElnS2k5Y2JuMWNibHh1THlvcVhHNGdLaUJTWlcxdmRtVWdaR1ZtWVhWc2RDQjJaWEowYVdOaGJDQnpZM0p2Ykd4aVlYSWdhVzRnU1VVZ09DODVMbHh1SUNvdlhHNWNiblJsZUhSaGNtVmhJSHRjYmlBZ2IzWmxjbVpzYjNjNklHRjFkRzg3WEc1OVhHNWNiaThxS2x4dUlDb2dSRzl1SjNRZ2FXNW9aWEpwZENCMGFHVWdZR1p2Ym5RdGQyVnBaMmgwWUNBb1lYQndiR2xsWkNCaWVTQmhJSEoxYkdVZ1lXSnZkbVVwTGx4dUlDb2dUazlVUlRvZ2RHaGxJR1JsWm1GMWJIUWdZMkZ1Ym05MElITmhabVZzZVNCaVpTQmphR0Z1WjJWa0lHbHVJRU5vY205dFpTQmhibVFnVTJGbVlYSnBJRzl1SUU5VElGZ3VYRzRnS2k5Y2JseHViM0IwWjNKdmRYQWdlMXh1SUNCbWIyNTBMWGRsYVdkb2REb2dZbTlzWkR0Y2JuMWNibHh1THlvZ1ZHRmliR1Z6WEc0Z0lDQTlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQU0FxTDF4dVhHNHZLaXBjYmlBcUlGSmxiVzkyWlNCdGIzTjBJSE53WVdOcGJtY2dZbVYwZDJWbGJpQjBZV0pzWlNCalpXeHNjeTVjYmlBcUwxeHVYRzUwWVdKc1pTQjdYRzRnSUdKdmNtUmxjaTFqYjJ4c1lYQnpaVG9nWTI5c2JHRndjMlU3WEc0Z0lHSnZjbVJsY2kxemNHRmphVzVuT2lBd08xeHVmVnh1WEc1MFpDeGNiblJvSUh0Y2JpQWdjR0ZrWkdsdVp6b2dNRHRjYm4xY2JpSXNJaThxSUY5c1lYbHZkWFF1YzJOemMxeHVJQ0FnUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwZ0tpOWNibHh1THk4Z1RHRjViM1YwWEc0a1ltOWtlVTFoZUZkcFpIUm9PaUEwTkhKbGJUdGNiaVJpYjJSNVRXbHVWMmxrZEdnNklERTRjbVZ0TzF4dUpHMWhjbWRwYmpvZ01uSmxiVHRjYmx4dUpXTnZiblJsYm5RdGQybGtkR2dnZTF4dUlDQnRZWGd0ZDJsa2RHZzZJQ1JpYjJSNVRXRjRWMmxrZEdnN1hHNGdJSGRwWkhSb09pQTNNQ1U3WEc0Z0lHMWhjbWRwYmkxeWFXZG9kRG9nWVhWMGJ6dGNiaUFnYldGeVoybHVMV3hsWm5RNklHRjFkRzg3WEc1Y2JpQWdRR2x1WTJ4MVpHVWdiV1ZrYVdFb2MzQXBJSHRjYmlBZ0lDQjNhV1IwYURvZ09UQWxPMXh1SUNBZ0lHMWhjbWRwYmkxeWFXZG9kRG9nTlNVN1hHNGdJQ0FnYldGeVoybHVMV3hsWm5RNklEVWxPMXh1SUNCOVhHNTlYRzVjYmk1bkxXaGxZV1JsY2lCN1hHNGdJSEJ2YzJsMGFXOXVPaUJ5Wld4aGRHbDJaVHRjYmlBZ2JXRnlaMmx1TFdKdmRIUnZiVG9nTW5KbGJUdGNibHh1SUNBdVl5MXphWFJsYm1GdFpTQjdYRzRnSUNBZ1FHVjRkR1Z1WkNBbFkyOXVkR1Z1ZEMxM2FXUjBhRHRjYmlBZ2ZWeHVYRzRnSUM1akxYTnBkR1Z1WVcxbElENGdZU0I3WEc0Z0lDQWdkR1Y0ZEMxemFHRmtiM2M2SURBZ01DQjBjbUZ1YzNCaGNtVnVkRHRjYmlBZ0lDQjBjbUZ1YzJsMGFXOXVPaUIwWlhoMExYTm9ZV1J2ZHlBdU5ITWdaV0Z6WlR0Y2JpQWdJQ0JqYjJ4dmNqb2dKR052Ykc5eUxXSmhjMlU3WEc0Z0lDQWdkR1Y0ZEMxemFHRmtiM2M2SUd4dmJtZHphR0ZrYjNjb0l6WXdOVEEwTUN3Z05TazdYRzVjYmlBZ0lDQW1PbWh2ZG1WeUlIdGNiaUFnSUNBZ0lIUmxlSFF0YzJoaFpHOTNPaUJzYjI1bmMyaGhaRzkzS0NNMk1EVXdOREFzSURncE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNHViV0ZwYmlCN1hHNGdJRUJsZUhSbGJtUWdKV052Ym5SbGJuUXRkMmxrZEdnN1hHNGdJRzFoY21kcGJpMWliM1IwYjIwNklDUnRZWEpuYVc0N1hHNTlYRzVjYmk1bmJHOWlZV3hHYjI5MFpYSWdlMXh1SUNCQVpYaDBaVzVrSUNWamIyNTBaVzUwTFhkcFpIUm9PMXh1SUNCd2IzTnBkR2x2YmpvZ2NtVnNZWFJwZG1VN1hHNGdJSEJoWkdScGJtY3RkRzl3T2lBa2JXRnlaMmx1SUM4Z01qdGNiaUFnY0dGa1pHbHVaeTFpYjNSMGIyMDZJQ1J0WVhKbmFXNGdMeUF5TzF4dUlDQnRZWEpuYVc0dGRHOXdPaUFrYldGeVoybHVPMXh1WEc0Z0lDNXpibk10YkdsemRDQjdYRzRnSUNBZ2NHOXphWFJwYjI0NklHRmljMjlzZFhSbE8xeHVJQ0FnSUdKdmRIUnZiVG9nTVhKbGJUdGNiaUFnSUNCeWFXZG9kRG9nTUR0Y2JpQWdJQ0J0WVhKbmFXNDZJREE3WEc0Z0lDQWdkR1Y0ZEMxaGJHbG5iam9nY21sbmFIUTdYRzVjYmlBZ0lDQW1JRDRnYkdrZ2UxeHVJQ0FnSUNBZ2JXRnlaMmx1TFd4bFpuUTZJREZ5WlcwN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JpNWlZV05yTW5SdmNDQjdYRzRnSUhSbGVIUXRZV3hwWjI0NklHTmxiblJsY2p0Y2JseHVJQ0FtSUQ0Z1lTQjdYRzRnSUNBZ1pHbHpjR3hoZVRvZ2FXNXNhVzVsTFdKc2IyTnJPMXh1SUNBZ0lHaGxhV2RvZERvZ01XVnRJQ29nSkd4cGJtVXRhR1ZwWjJoMExXSmhjMlU3WEc0Z0lDQWdkMmxrZEdnNklERmxiU0FxSUNSc2FXNWxMV2hsYVdkb2RDMWlZWE5sTzF4dUlDQWdJRUJsZUhSbGJtUWdKV1p2Ym5RdGMybDZaUzFzWVhKblpTMTRPMXh1SUNBZ0lHSnZjbVJsY2pvZ01YQjRJSE52Ykdsa0lDUmpiMnh2Y2kxaVlYTmxPMXh1SUNBZ0lHSnZjbVJsY2kxeVlXUnBkWE02SURVeEpUdGNiaUFnSUNCMFpYaDBMV1JsWTI5eVlYUnBiMjQ2SUc1dmJtVTdYRzRnSUNBZ2RtVnlkR2xqWVd3dFlXeHBaMjQ2SUcxcFpHUnNaVHRjYmlBZ2ZWeHVmVnh1WEc0dWMybDBaUzF1WVhZZ2UxeHVJQ0J0WVhKbmFXNDZJREZ5WlcwZ01EdGNiaUFnY0dGa1pHbHVaem9nTUR0Y2JpQWdiR2x6ZEMxemRIbHNaVG9nYm05dVpUdGNiaUFnUUdWNGRHVnVaQ0F1WXkxbWJHRjBMV3hwYzNRN1hHNWNiaUFnSmlBK0lHeHBJSHRjYmlBZ0lDQjBaWGgwTFhSeVlXNXpabTl5YlRvZ2RYQndaWEpqWVhObE8xeHVJQ0I5WEc1Y2JpQWdKaUErSUd4cElENGdZU0I3WEc0Z0lDQWdkR1Y0ZEMxa1pXTnZjbUYwYVc5dU9pQnViMjVsTzF4dUlDQjlYRzVjYmlBZ0ppQStJR3hwSUQ0Z1lUcG9iM1psY2lCN1hHNGdJQ0FnZEdWNGRDMWtaV052Y21GMGFXOXVPaUIxYm1SbGNteHBibVU3WEc0Z0lIMWNibjFjYmx4dUxtTnZjSGx5YVdkb2RDQjdYRzRnSUcxaGNtZHBiam9nTGpWbGJTQXdPMXh1WEc0Z0lHRXNYRzRnSUdFNmRtbHphWFJsWkNCN1hHNGdJQ0FnWTI5c2IzSTZJQ1JqYjJ4dmNpMTBaWGgwTzF4dUlDQWdJSFJsZUhRdFpHVmpiM0poZEdsdmJqb2dibTl1WlR0Y2JpQWdmVnh1ZlNJc0lpOHZJRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5SUM5Y2JpOHZJRjl0YVhocGJpNXpZM056WEc0dkx5QnRhWGhwYmlEamdvUWdablZ1WTNScGIyN2pnYXJqZ2FsY2JpOHZJRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5SUM5Y2JseHVYRzR2THlCbWIyNTBMWE5wZW1VZzQ0S1NaVzNqZ2FoeVpXM2pnYWZsaDdybGlwdGNia0J0YVhocGJpQm1laWdrY0hnc0lDUmlZWE5sT2lSbWIyNTBMWE5wZW1VdFltRnpaU2tnZTF4dUlDQm1iMjUwTFhOcGVtVTZJR1Z0S0NSd2VDd2dKR0poYzJVcE8xeHVJQ0JBYVdZZ0pHSmhjMlVnSVQwZ0pHWnZiblF0YzJsNlpTMWlZWE5sSUh0Y2JpQWdJQ0JtYjI1MExYTnBlbVU2SUhKbGJTZ2tjSGdwTzF4dUlDQjlYRzU5WEc1Y2JpOHZJRzFsWkdsaElIRjFaWEo1SU9PQnJ1ZXVvZWVRaGx4dVFHMXBlR2x1SUcxbFpHbGhLQ1JpY0NrZ2UxeHVJQ0FrWW5BdGQybGtkR2c2SUdWdEtEYzJPQ2s3WEc0Z0lFQnBaaUFrWW5BZ1BUMGdKM053SnlCN1hHNGdJQ0FnUUcxbFpHbGhJSE5qY21WbGJpQmhibVFnS0cxaGVDMTNhV1IwYURvZ0pHSndMWGRwWkhSb0tTQjdYRzRnSUNBZ0lDQkFZMjl1ZEdWdWREdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ1FHVnNjMlVnYVdZZ0pHSndJRDA5SUNkdGFXUW5JSHRjYmlBZ0lDQkFiV1ZrYVdFZ2MyTnlaV1Z1SUdGdVpDQW9iV2x1TFhkcFpIUm9PaUE1T0RCd2VDa2dlMXh1SUNBZ0lDQWdRR052Ym5SbGJuUTdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lFQmxiSE5sSUdsbUlDUmljQ0E5UFNBbmJHRnlaMlVuSUh0Y2JpQWdJQ0JBYldWa2FXRWdjMk55WldWdUlHRnVaQ0FvYldsdUxYZHBaSFJvT2lBa1luQXRkMmxrZEdnZ0tpQXlLU0I3WEc0Z0lDQWdJQ0JBWTI5dWRHVnVkRHRjYmlBZ0lDQjlYRzRnSUgxY2JuMGlMQ0l2THlBdExTQldZWEpwWVdKc1pTQXRMVnh1WEc0dkx5QkRiMnh2Y2x4dVhHNHZMMEpoYzJVZ1EyOXNiM0pjYmlSamIyeHZjaTFpWVhObExXSnNZV05yT2lBZ0lDQWpORGMwT0RSQ08xeHVKR052Ykc5eUxXSmhjMlV0WW14MVpUb2dJQ0FnSUNNeE1UUkNOVVk3WEc0a1kyOXNiM0l0WW1GelpTMXZabVozYUdsMFpUb2dJMFZHUmtaRE9EdGNiaVJqYjJ4dmNpMWlZWE5sTFdkeVpXVnVPaUFnSUNBak1EQkJRVGc0TzF4dUpHTnZiRzl5TFdKaGMyVXRiR2x0WlRvZ0lDQWdJQ000TlVOQ016TTdYRzRrWTI5c2IzSXRZbUZ6WlMxbmNtRjVPaUFnSUNBZ0kyVmhaV0ZsWVR0Y2JpUmpiMnh2Y2kxaVlYTmxMVzl5WVc1blpUb2dJQ0FqUlRRMU56SkZPMXh1WEc0a1kyOXNiM0l0WW1GelpTMTNhR2wwWlRvZ2JHbG5hSFJsYmlna1kyOXNiM0l0WW1GelpTMXZabVozYUdsMFpTd2dPUzQxSlNrN1hHNWNiaVJqYjJ4dmNpMWlZWE5sT2lBZ0lDQWdJQ1JqYjJ4dmNpMWlZWE5sTFc5eVlXNW5aVHRjYmlSamIyeHZjaTFpWVhObExXeHBaMmgwT2lCc2FXZG9kR1Z1S0NSamIyeHZjaTFpWVhObExDQXhNQ1VwTzF4dUpHTnZiRzl5TFdKaGMyVXRaR0Z5YXpvZ1pHRnlhMlZ1S0NSamIyeHZjaTFpWVhObExDQXhNQ1VwTzF4dUpHTnZiRzl5TFdKdlpIa3RZbWM2SUNBZ0pHTnZiRzl5TFdKaGMyVXRkMmhwZEdVN1hHNGtZMjlzYjNJdGRHVjRkRG9nSkdOdmJHOXlMV0poYzJVdFlteGhZMnM3WEc0a1kyOXNiM0l0WVdOalpXNTBPaUFnSUNBa1kyOXNiM0l0WW1GelpTMXZjbUZ1WjJVN1hHNWNiaVJqYjJ4dmNpMXNhVzVyT2lBa1kyOXNiM0l0WW1GelpTMWtZWEpyTzF4dVhHNHZMeUJHYjI1MFhHNGtabTl1ZEMxemFYcGxMV0poYzJVNklERTJPMXh1Skd4cGJtVXRhR1ZwWjJoMExXSmhjMlU2SURFdU56c2lMQ0l2THlBOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBWeHVMeThnWDJaMWJtTjBhVzl1TG5OamMzTmNiaTh2SUQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVhHNWNiaTh2SUhCNElPT0NraUJsYlNEamdhN2xnS1RqZ2F2bHBJbm1qNXRjYmtCbWRXNWpkR2x2YmlCbGJTZ2tjSGdzSUNSaVlYTmxPaVJtYjI1MExYTnBlbVV0WW1GelpTd2dKSFZ1YVhRNlpXMHBJSHRjYmlBZ1FHbG1JQ1IxYm1sMElEMDlJR1Z0SUh0Y2JpQWdJQ0JBY21WMGRYSnVJQ2drY0hnZ0x5QWtZbUZ6WlNrZ0tpQXhaVzA3WEc0Z0lIMUFaV3h6WldsbUlDUjFibWwwSUQwOUlHNXZibVVnZTF4dUlDQWdJRUJ5WlhSMWNtNGdLQ1J3ZUNBdklDUmlZWE5sS1R0Y2JpQWdmVnh1ZlZ4dVhHNHZMeUJ3ZUNEamdwSWdjbVZ0SU9PQnJ1V0FwT09CcStXa2llYVBtMXh1UUdaMWJtTjBhVzl1SUhKbGJTZ2tjSGdwSUh0Y2JpQWdRSEpsZEhWeWJpQW9KSEI0SUM4Z0pHWnZiblF0YzJsNlpTMWlZWE5sS1NBcUlERnlaVzA3WEc1OVhHNWNiaTh2SUhKbGRIVnliaUJzYjI1bkxYTm9ZV1J2ZDF4dVFHWjFibU4wYVc5dUlHeHZibWR6YUdGa2IzY29KR052Ykc5eUxDQWtaR2x6S1NCN1hHNGdJQ1IyWVd3NklEQWdNQ0FrWTI5c2IzSTdYRzRnSUVCbWIzSWdKR2tnWm5KdmJTQXhJSFJvY205MVoyZ2dKR1JwY3lCN1hHNGdJQ0FnSkhaaGJEb2dJM3NrZG1Gc2ZTd2dJM3NrYVgxd2VDQWpleVJwZlhCNElDTjdKR052Ykc5eWZUdGNiaUFnZlZ4dUlDQkFjbVYwZFhKdUlDUjJZV3c3WEc1OUlpd2lMeW9nWDJOdmNtVXVjMk56YzF4dUlDQWdQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDBnS2k5Y2JseHVhSFJ0YkNCN1hHNGdJR0poWTJ0bmNtOTFibVE2SUNSamIyeHZjaTFpYjJSNUxXSm5PMXh1SUNCamIyeHZjam9nSkdOdmJHOXlMWFJsZUhRN1hHNGdJR1p2Ym5RdFptRnRhV3g1T2lCY0lsTnZkWEpqWlNCVFlXNXpJRkJ5YjF3aUxDQmNJdU9Ea3VPRHFlT0NydU9EanVpbmt1T0N0Q0JRY205T1hDSXNJRndpU0dseVlXZHBibThnUzJGcmRTQkhiM1JvYVdNZ1VISnZUbHdpTENCY0l1T0RvZU9DcE9PRHF1T0NxbHdpTENCTlpXbHllVzhzSUhOaGJuTXRjMlZ5YVdZN1hHNGdJR1p2Ym5RdGMybDZaVG9nS0NSbWIyNTBMWE5wZW1VdFltRnpaU0F2SURFMktTQXJJR1Z0TzF4dUlDQnNhVzVsTFdobGFXZG9kRG9nSkd4cGJtVXRhR1ZwWjJoMExXSmhjMlU3WEc1OVhHNWNibUVnZTF4dUlDQmpiMnh2Y2pvZ0pHTnZiRzl5TFd4cGJtczdYRzRnSUhSbGVIUXRaR1ZqYjNKaGRHbHZiam9nZFc1a1pYSnNhVzVsTzF4dUlDQjBjbUZ1YzJsMGFXOXVPaUJqYjJ4dmNpQXVNVFZ6SUdWaGMyVTdYRzU5WEc1Y2JtRTZkbWx6YVhSbFpDQjdYRzRnSUdOdmJHOXlPaUJrWVhKclpXNG9KR052Ykc5eUxXeHBibXNzSURFd0pTazdYRzU5WEc1Y2JtRTZhRzkyWlhJZ2UxeHVJQ0JqYjJ4dmNqb2diR2xuYUhSbGJpZ2tZMjlzYjNJdGJHbHVheXdnTVRBbEtUdGNiaUFnZEdWNGRDMWtaV052Y21GMGFXOXVPaUJ1YjI1bE8xeHVmVnh1WEc1aE9tRmpkR2wyWlNCN1hHNGdJSEJ2YzJsMGFXOXVPaUJ5Wld4aGRHbDJaVHRjYmlBZ2RHOXdPaUF4Y0hnN1hHNTlYRzVjYm1neExDQm9NaXdnYURNc0lHZzBMQ0JvTlN3Z2FEWWdlMXh1SUNCamJHVmhjam9nWW05MGFEdGNiaUFnWm05dWRDMW1aV0YwZFhKbExYTmxkSFJwYm1kek9pQmNJbXRsY201Y0lpQXhPMXh1SUNCbWIyNTBMWFpoY21saGJuUTZJSEJ5YjNCdmNuUnBiMjVoYkMxM2FXUjBhRHRjYm4xY2JseHVZV0ppY2x0MGFYUnNaVjBnZTF4dUlDQmliM0prWlhJdFltOTBkRzl0TFhkcFpIUm9PaUF3TzF4dWZWeHVYRzVtYVdkMWNtVWdlMXh1SUNCdFlYSm5hVzQ2SURBN1hHNTlYRzVjYm1acFoyTmhjSFJwYjI0Z2UxeHVJQ0JBWlhoMFpXNWtJQ1ZtYjI1MExYTnBlbVV0YzIxaGJHeGxjanRjYm4xY2JseHVMeW9nTFMwZ1UyOTFjbU5sSUVOdlpHVWdMUzBnS2k5Y2JtTnZaR1VnZTF4dUlDQm1iMjUwTFdaaGJXbHNlVG9nWENKVGIzVnlZMlVnUTI5a1pTQlFjbTljSWl3Z2JXOXViM053WVdObE8xeHVmU0lzSWk4dklEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlYRzR2THlCZlpYaDBaVzVrY3k1elkzTnpYRzR2THlCd2JHRmpaV2h2YkdSbGNseHVMeThnUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQxY2JseHVKV1p2Ym5RdGRtbG5ZU0I3WEc0Z0lHWnZiblF0Wm1GdGFXeDVPaUJjSWxacFoyRmNJaXdnYzJGdWN5MXpaWEpwWmp0Y2JpQWdiR1YwZEdWeUxYTndZV05wYm1jNklERndlRHRjYm4xY2JseHVKV1p2Ym5RdFpHVm1ZWFZzZENCN1hHNGdJR1p2Ym5RdFptRnRhV3g1T2lCY0lsTnZkWEpqWlNCVFlXNXpJRkJ5YjF3aUxDQmNJdU9Ea3VPRHFlT0NydU9EanVpbmt1T0N0Q0JRY205T1hDSXNJRndpU0dseVlXZHBibThnUzJGcmRTQkhiM1JvYVdNZ1VISnZUbHdpTENCY0l1T0RvZU9DcE9PRHF1T0NxbHdpTENCTlpXbHllVzhzSUhOaGJuTXRjMlZ5YVdZN1hHNGdJR3hsZEhSbGNpMXpjR0ZqYVc1bk9pQXdPMXh1ZlZ4dVhHNGxabTl1ZEMxemFYcGxMWE50WVd4c1pYSWdlMXh1SUNCQWFXNWpiSFZrWlNCbWVpZ3hOQ2s3WEc1OVhHNWNiaVZtYjI1MExYTnBlbVV0WW1GelpTQjdYRzRnSUVCcGJtTnNkV1JsSUdaNktDUm1iMjUwTFhOcGVtVXRZbUZ6WlNrN1hHNTlYRzVjYmlWbWIyNTBMWE5wZW1VdGJHRnlaMlVnZTF4dUlDQkFhVzVqYkhWa1pTQm1laWd4T0NrN1hHNTlYRzVjYmlWbWIyNTBMWE5wZW1VdGJHRnlaMlV0ZUNCN1hHNGdJRUJwYm1Oc2RXUmxJR1o2S0RJMEtUdGNibjFjYmx4dUpXWnZiblF0YzJsNlpTMXNZWEpuWlMxNGVDQjdYRzRnSUVCcGJtTnNkV1JsSUdaNktETXlLVHRjYm4xY2JseHVKV1p2Ym5RdGMybDZaUzFzWVhKblpTMTRlSGdnZTF4dUlDQkFhVzVqYkhWa1pTQm1laWcwT0NrN1hHNTlYRzVjYmlWd2NtbHRZWEo1U0dWaFpHbHVaeUI3WEc0Z0lHMWhjbWRwYmkxMGIzQTZJREE3WEc0Z0lFQmxlSFJsYm1RZ0pXWnZiblF0YzJsNlpTMXNZWEpuWlMxNGVEdGNiaUFnYkdsdVpTMW9aV2xuYUhRNklERXVNelU3WEc0Z0lDMTNaV0pyYVhRdFptOXVkQzF6Ylc5dmRHaHBibWM2SUdGdWRHbGhiR2xoYzJWa08xeHVJQ0JBYVc1amJIVmtaU0J0WldScFlTaHpjQ2tnZTF4dUlDQWdJRUJwYm1Oc2RXUmxJR1o2S0RJMEtUdGNiaUFnZlZ4dWZWeHVYRzR2S2lBdExTQWxZblYwZEc5dVUybHRjR3hsSUMwdElDb3ZYRzRsWXkxaWRYUjBiMjRnZTF4dUlDQmthWE53YkdGNU9pQnBibXhwYm1VdFlteHZZMnM3WEc0Z0lIQmhaR1JwYm1jNklETndlQ0F1TldWdE8xeHVJQ0JpYjNKa1pYSXRZbTkwZEc5dE9pQXpjSGdnYzI5c2FXUWdaR0Z5YTJWdUtDUmpiMnh2Y2kxaFkyTmxiblFzSURFd0pTazdYRzRnSUdKaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNSamIyeHZjaTFoWTJObGJuUTdYRzRnSUdOdmJHOXlPaUFrWTI5c2IzSXRZbUZ6WlMxM2FHbDBaVHRjYmlBZ1ltOXlaR1Z5TFhKaFpHbDFjem9nTTNCNE8xeHVJQ0JtYjI1MExYTnBlbVU2SUdWdEtESXdLVHRjYmlBZ1FHVjRkR1Z1WkNBbFptOXVkQzEyYVdkaE8xeHVJQ0JzYVc1bExXaGxhV2RvZERvZ01TNHhPMXh1SUNCMGNtRnVjMmwwYVc5dU9pQmhiR3dnTGpGeklHVmhjMlU3WEc0Z0lIUmxlSFF0WkdWamIzSmhkR2x2YmpvZ2JtOXVaVHRjYm4xY2JseHVKV0oxZEhSdmJsTnBiWEJzWlNCN1hHNGdJRUJsZUhSbGJtUWdKV010WW5WMGRHOXVPMXh1SUNCQVpYaDBaVzVrSUNWbWIyNTBMV1JsWm1GMWJIUTdYRzRnSUhCaFpHUnBibWM2SURGd2VDQTFjSGdnTW5CNE8xeHVJQ0JpYjNKa1pYSXRkMmxrZEdnNklEQWdNWEI0SURBZ01YQjRPMXh1SUNCaWIzSmtaWEl0YzNSNWJHVTZJSE52Ykdsa08xeHVJQ0JpYjNKa1pYSXRjbUZrYVhWek9pQTFjSGc3WEc0Z0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklIUnlZVzV6Y0dGeVpXNTBPMXh1SUNCamIyeHZjam9nSkdOdmJHOXlMV0ZqWTJWdWREdGNiaUFnWm05dWRDMXphWHBsT2lCbGJTZ3hOaWs3WEc1Y2JpQWdKanBvYjNabGNpQjdYRzRnSUNBZ1ltRmphMmR5YjNWdVpEb2dKR052Ykc5eUxXRmpZMlZ1ZER0Y2JpQWdJQ0JqYjJ4dmNqb2dKR052Ykc5eUxXSmhjMlV0ZDJocGRHVTdYRzRnSUgxY2JuMWNiaUlzSWk4cUlGOWpiMjV3YjI1bGJuUXVjMk56YzF4dUlDQTlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQU0FxTDF4dVhHNHVZeTF6YVhSbGJtRnRaU0I3WEc0Z0lHWnZiblF0Wm1GdGFXeDVPaUJjSWxacFoyRmNJaXdnYzJGdWN5MXpaWEpwWmp0Y2JpQWdMWGRsWW10cGRDMW1iMjUwTFhOdGIyOTBhR2x1WnpvZ1lXNTBhV0ZzYVdGelpXUTdYRzVjYmlBZ1lTQjdYRzRnSUNBZ1kyOXNiM0k2SUNSamIyeHZjaTEwWlhoME8xeHVJQ0FnSUhSbGVIUXRaR1ZqYjNKaGRHbHZiam9nYm05dVpUdGNiaUFnZlZ4dWZWeHVYRzR1WXkxcFkyOXVJSHRjYmlBZ1pHbHpjR3hoZVRvZ2FXNXNhVzVsTFdKc2IyTnJPMXh1ZlZ4dVhHNHVZeTFtYkdGMExXeHBjM1FnZTF4dUlDQnNhWE4wTFhOMGVXeGxPaUJ1YjI1bE8xeHVJQ0J3WVdSa2FXNW5MV3hsWm5RNklEQTdYRzU5WEc1Y2JpNWpMV1pzWVhRdGJHbHpkQ0ErSUd4cExGeHVMbU10Wm14aGRDMXNhWE4wSUQ0Z1pIUXNYRzR1WXkxbWJHRjBMV3hwYzNRZ1BpQmtaQ0I3WEc0Z0lHUnBjM0JzWVhrNklHbHViR2x1WlMxaWJHOWphenRjYmlBZ2JXRnlaMmx1TFhKcFoyaDBPaUF1TlhKbGJUdGNibHh1SUNBbU9teGhjM1F0WTJocGJHUWdlMXh1SUNBZ0lHMWhjbWRwYmkxeWFXZG9kRG9nTUR0Y2JpQWdmVnh1ZlZ4dVhHNHZLaUF0TFNCMFlXY2dMUzBnS2k5Y2JpNWpMWFJoWnlCN1hHNGdJSEJ2YzJsMGFXOXVPaUJ5Wld4aGRHbDJaVHRjYmlBZ1pHbHpjR3hoZVRvZ2FXNXNhVzVsTFdKc2IyTnJPMXh1SUNCdFlYSm5hVzR0Y21sbmFIUTZJQzQxWlcwN1hHNGdJSEJoWkdScGJtYzZJREFnTVM0M05XVnRJREFnTVdWdE8xeHVJQ0JpYjNKa1pYSXRjbUZrYVhWek9pQmxiU2d6S1NBd0lEQWdaVzBvTXlrN1hHNGdJR0poWTJ0bmNtOTFibVE2SUNSamIyeHZjaTFpWVhObExXZHlZWGs3WEc0Z0lDWTZZbVZtYjNKbElIdGNiaUFnSUNCamIyNTBaVzUwT2lCY0lpQmNJanRjYmlBZ0lDQmthWE53YkdGNU9pQmliRzlqYXp0Y2JpQWdJQ0J3YjNOcGRHbHZiam9nWVdKemIyeDFkR1U3WEc0Z0lDQWdkRzl3T2lBd08xeHVJQ0FnSUd4bFpuUTZJQzQwWlcwN1hHNGdJQ0FnWW05MGRHOXRPaUF3TzF4dUlDQWdJR2hsYVdkb2REb2daVzBvTkNrN1hHNGdJQ0FnZDJsa2RHZzZJR1Z0S0RRcE8xeHVJQ0FnSUcxaGNtZHBiam9nWVhWMGJ6dGNiaUFnSUNCaWIzSmtaWEl0Y21Ga2FYVnpPaUF4TURBbE8xeHVJQ0FnSUdKaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNSamIyeHZjaTFpYjJSNUxXSm5PMXh1SUNBZ0lHeHBibVV0YUdWcFoyaDBPaUF4TzF4dUlDQjlYRzRnSUNZNllXWjBaWElnZTF4dUlDQWdJR052Ym5SbGJuUTZJRndpSUZ3aU8xeHVJQ0FnSUhCdmMybDBhVzl1T2lCaFluTnZiSFYwWlR0Y2JpQWdJQ0IwYjNBNklEQTdYRzRnSUNBZ2NtbG5hSFE2SURBN1hHNGdJQ0FnWW05MGRHOXRPaUF3TzF4dUlDQWdJSGRwWkhSb09pQXdPMXh1SUNBZ0lHaGxhV2RvZERvZ01EdGNiaUFnSUNCdFlYSm5hVzQ2SUdGMWRHODdYRzRnSUNBZ1ltOXlaR1Z5T2lBeFpXMGdjMjlzYVdRZ2RISmhibk53WVhKbGJuUTdYRzRnSUNBZ1ltOXlaR1Z5TFhKcFoyaDBMV052Ykc5eU9pQWtZMjlzYjNJdFltOWtlUzFpWnp0Y2JpQWdmVnh1ZlZ4dVhHNHZLaUF0TFNCVGFYUmxUbUZ0WlNBdExTb3ZYRzR1YzJsMFpVNWhiV1VnZTF4dUlDQnpjR0Z1SUh0Y2JpQWdJQ0JzWlhSMFpYSXRjM0JoWTJsdVp6b2dMUzR4WlcwN1hHNGdJSDFjYm4waUxDSXZLbHh1SUY5cGJtUmxlQzV6WTNOelhHNGdWRTlRNDRPYTQ0Tzg0NEs0NlphaTZZQ2pYRzRnS2k5Y2JseHVMbWx1WkdWNElDNW5MV2hsWVdSbGNpQjdYRzRnSUdobGFXZG9kRG9nTkRCMmFEdGNibHh1SUNBdVl5MXphWFJsYm1GdFpTQjdYRzRnSUNBZ2NHOXphWFJwYjI0NklHRmljMjlzZFhSbE8xeHVJQ0FnSUhSdmNEb2dNRHRjYmlBZ0lDQnlhV2RvZERvZ01EdGNiaUFnSUNCaWIzUjBiMjA2SURBN1hHNGdJQ0FnYkdWbWREb2dNRHRjYmlBZ0lDQnRZWEpuYVc0NklHRjFkRzg3WEc0Z0lDQWdhR1ZwWjJoME9pQWtiR2x1WlMxb1pXbG5hSFF0WW1GelpTQXFJREZsYlR0Y2JpQWdJQ0IzYVdSMGFEb2dNVEF3SlR0Y2JpQWdJQ0JtYjI1MExYTnBlbVU2SURFd2RtMXBianRjYmlBZ0lDQjBaWGgwTFdGc2FXZHVPaUJqWlc1MFpYSTdYRzVjYmlBZ0lDQkFhVzVqYkhWa1pTQnRaV1JwWVNoemNDa2dlMXh1SUNBZ0lDQWdabTl1ZEMxemFYcGxPaUF4TW5adGFXNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1lTQjdYRzRnSUNBZ0lDQjBaWGgwTFhOb1lXUnZkem9nYkc5dVozTm9ZV1J2ZHlnak5qQTFNRFF3TENBM0tUdGNibHh1SUNBZ0lDQWdKanBvYjNabGNpQjdYRzRnSUNBZ0lDQWdJSFJsZUhRdGMyaGhaRzkzT2lCc2IyNW5jMmhoWkc5M0tDTTJNRFV3TkRBc0lERTBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F1YzJsMFpXUmxjMk55YVhCMGFXOXVJSHRjYmlBZ0lDQndiM05wZEdsdmJqb2dZV0p6YjJ4MWRHVTdYRzRnSUNBZ1ltOTBkRzl0T2lBdU1qVnlaVzA3WEc0Z0lDQWdkR1Y0ZEMxaGJHbG5iam9nWTJWdWRHVnlPMXh1SUNBZ0lISnBaMmgwT2lBeGNtVnRPMXh1SUNBZ0lHeGxablE2SURGeVpXMDdYRzRnSUgxY2JuMWNibHh1TG5OcGRHVkVaWE5qY21sd2RHbHZiaUI3WEc0Z0lHMWhjbWRwYmpvZ01EdGNibjFjYmx4dUxuSmxZMlZ1ZEVGeWRHbGpiR1ZUWldOMGFXOXVJR2d4SUh0Y2JpQWdRR1Y0ZEdWdVpDQWxabTl1ZEMxemFYcGxMV3hoY21kbExYZzdYRzU5WEc1Y2JpNXlaV05sYm5RdFlYSjBhV05zWlNCN1hHNGdJRzFoY21kcGJqb2dNRHRjYmlBZ2NHRmtaR2x1WnpvZ01EdGNiaUFnYkdsemRDMXpkSGxzWlRvZ2JtOXVaVHRjYmx4dUlDQW1PbUZtZEdWeUlIdGNiaUFnSUNCamIyNTBaVzUwT2lCY0lsd2lPMXh1SUNBZ0lHUnBjM0JzWVhrNklIUmhZbXhsTzF4dUlDQWdJR05zWldGeU9pQmliM1JvTzF4dUlDQjlYRzU5WEc1Y2JpNXlaV05sYm5RdFlYSjBhV05zWlMxcGRHVnRJSHRjYmlBZ1ltOTRMWE5wZW1sdVp6b2dZbTl5WkdWeUxXSnZlRHRjYmlBZ1pteHZZWFE2SUd4bFpuUTdYRzRnSUhkcFpIUm9PaUEwTnk0MUpUdGNiaUFnYldGeVoybHVMV3hsWm5RNklEVWxPMXh1SUNCdFlYSm5hVzR0WW05MGRHOXRPaUF5TGpVMWNtVnRPMXh1WEc0Z0lDWTZiblJvTFdOb2FXeGtLREp1S3pJcElIdGNiaUFnSUNCamJHVmhjam9nYkdWbWREdGNiaUFnSUNCdFlYSm5hVzR0YkdWbWREb2dNRHRjYmlBZ2ZWeHVYRzRnSUVCcGJtTnNkV1JsSUcxbFpHbGhLSE53S1NCN1hHNGdJQ0IzYVdSMGFEb2dNVEF3SlR0Y2JpQWdJR2hsYVdkb2REb2dZWFYwYnp0Y2JpQWdJRzFoY21kcGJqb2dNQ0F3SURKeVpXMGdNRHRjYmlBZ2ZWeHVYRzRnSUNZZ1BpQmhJSHRjYmlBZ0lDQmthWE53YkdGNU9pQmliRzlqYXp0Y2JpQWdJQ0IwWlhoMExXUmxZMjl5WVhScGIyNDZJRzV2Ym1VN1hHNGdJQ0FnZEhKaGJuTnBkR2x2YmpvZ1lXeHNJQzR5Y3lCbFlYTmxPMXh1WEc0Z0lDQWdKanBvYjNabGNpQjdYRzRnSUNBZ0lDQnRZWEpuYVc0NklDMHhaVzA3WEc0Z0lDQWdJQ0J3WVdSa2FXNW5PaUF4WlcwN1hHNGdJQ0FnSUNCaWIzSmtaWEl0Y21Ga2FYVnpPaUJsYlNnMUtUdGNiaUFnSUNBZ0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDUmpiMnh2Y2kxaVlYTmxMV2R5WVhrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYm4xY2JseHVMbkpsWTJWdWRDMWhjblJwWTJ4bExXbDBaVzB0Y0hWaWJHbHphR1ZrTFhScGJXVWdlMXh1SUNCbWIyNTBMV1poYldsc2VUb2dYQ0pXYVdkaFhDSXNJSE5oYm5NdGMyVnlhV1k3WEc0Z0lHTnZiRzl5T2lBa1kyOXNiM0l0ZEdWNGREdGNibjFjYmx4dUxuSmxZMlZ1ZEMxaGNuUnBZMnhsTFdsMFpXMHRkR2wwYkdVZ2UxeHVJQ0J0WVhKbmFXNDZJREE3WEc0Z0lIQmhaR1JwYm1jNklDNHljbVZ0SURBZ0xqTnlaVzA3WEc0Z0lFQmxlSFJsYm1RZ0pXWnZiblF0YzJsNlpTMXNZWEpuWlR0Y2JpQWdabTl1ZEMxM1pXbG5hSFE2SUc1dmNtMWhiRHRjYmlBZ2JHbHVaUzFvWldsbmFIUTZJREV1TXpVN1hHNTlYRzVjYmk1eVpXTmxiblF0WVhKMGFXTnNaUzFwZEdWdE9tWnBjbk4wTFdOb2FXeGtJSHRjYmlBZ1pteHZZWFE2SUc1dmJtVTdYRzRnSUhkcFpIUm9PaUF4TURBbE8xeHVJQ0J0WVhndGQybGtkR2c2SUNSaWIyUjVUV0Y0VjJsa2RHZzdYRzRnSUdobGFXZG9kRG9nWVhWMGJ6dGNiaUFnYldGeVoybHVMV3hsWm5RNklEQTdYRzVjYmlBZ1FHbHVZMngxWkdVZ2JXVmthV0VvYldsa0tTQjdYRzRnSUNBZ2JXRnlaMmx1TFd4bFpuUTZJR0YxZEc4N1hHNGdJQ0FnYldGeVoybHVMWEpwWjJoME9pQmhkWFJ2TzF4dUlDQjlYRzVjYmlBZ0xuSmxZMlZ1ZEMxaGNuUnBZMnhsTFdsMFpXMHRkR2wwYkdVZ2UxeHVJQ0FnSUcxaGNtZHBiaTFpYjNSMGIyMDZJQzR5TldWdE8xeHVJQ0FnSUVCbGVIUmxibVFnSldadmJuUXRjMmw2WlMxc1lYSm5aUzE0ZUR0Y2JpQWdJQ0JtYjI1MExYZGxhV2RvZERvZ1ltOXNaRHRjYmlBZ0lDQjBaWGgwTFdSbFkyOXlZWFJwYjI0NklHNXZibVU3WEc0Z0lDQWdZMjlzYjNJNklDUmpiMnh2Y2kxaVlYTmxPMXh1WEc0Z0lDQWdRR2x1WTJ4MVpHVWdiV1ZrYVdFb2MzQXBJSHRjYmlBZ0lDQWdJRUJwYm1Oc2RXUmxJR1o2S0RJeUtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXVjbVZqWlc1MExXRnlkR2xqYkdVdGFYUmxiUzEwYVhSc1pTQStJR0VnZTF4dUlDQWdJSFJsZUhRdFpHVmpiM0poZEdsdmJqb2dibTl1WlR0Y2JpQWdmVnh1SUNBdWNtVmpaVzUwTFdGeWRHbGpiR1V0YVhSbGJTMWtaWE5qY21sd2RHbHZiaUI3WEc0Z0lDQWdiV0Z5WjJsdU9pQXdPMXh1SUNBZ0lHTnZiRzl5T2lBa1kyOXNiM0l0ZEdWNGREdGNibHh1SUNBZ0lFQnBibU5zZFdSbElHMWxaR2xoS0hOd0tTQjdYRzRnSUNBZ0lDQkFhVzVqYkhWa1pTQm1laWd4TkNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5SWl3aUx5cGNiaUJmWVhKMGFXTnNaUzV6WTNOelhHNGc2S2lZNUxxTDQ0T2E0NE84NDRLNDQ0R3U0NEs1NDRLLzQ0S2s0NE9yWEc0cUwxeHVYRzR2S2lBdExTQkJjblJwWTJ4bElDMHRJQ292WEc0dWNDMWhjblJwWTJ4bExXaGxZV1JsY2lCN1hHNGdJRzFoY21kcGJqb2dOSEpsYlNBd08xeHVmVnh1WEc0dWNDMWhjblJwWTJ4bExYUnBkR3hsSUh0Y2JpQWdRR1Y0ZEdWdVpDQWxjSEpwYldGeWVVaGxZV1JwYm1jN1hHNTlYRzVjYmk4cUlDMHRJQzVoY25ScFkyeGxTVzVtYnlBdExTQXFMMXh1TG1GeWRHbGpiR1V0YVc1bWJ5QjdYRzRnSUVCbGVIUmxibVFnSldadmJuUXRjMmw2WlMxemJXRnNiR1Z5TzF4dWZWeHVYRzR1WVhKMGFXTnNaUzFwYm1adkxXeGhZbVZzZTF4dUlDQm1iRzloZERvZ2JHVm1kRHRjYm4xY2JseHVMbUZ5ZEdsamJHVXRhVzVtYnkxc1lXSmxiQ0I3WEc1Y2JpQWdKanBoWm5SbGNpQjdYRzRnSUNBZ1kyOXVkR1Z1ZERvZ1hDSTZYQ0k3WEc0Z0lDQWdiV0Z5WjJsdU9pQXdJQzR4TlhKbGJUdGNiaUFnSUNCbWIyNTBMWGRsYVdkb2REb2dZbTlzWkR0Y2JpQWdmVnh1ZlZ4dVhHNHVZWEowYVdOc1pTMXBibVp2TFhCeWIzQWdlMXh1SUNCdFlYSm5hVzR0YkdWbWREb2dNRHRjYm4xY2JseHVMbUZ5ZEdsamJHVXRkR0ZuSUh0Y2JpQWdRR1Y0ZEdWdVpDQXVZeTEwWVdjN1hHNTlYRzVjYmk4cUlDMHRJT2Fjck9hV2grT0NxT09EcXVPQ29pQXRMU0FxTDF4dUxtRnlkR2xqYkdVdFltOWtlU0I3WEc0Z0lDUmlZWE5sTFcxaGNtZHBiam9nS0NSc2FXNWxMV2hsYVdkb2RDMWlZWE5sSUNvZ01XVnRLVHRjYmx4dUlDQm9NaUI3WEc0Z0lDQWdiV0Z5WjJsdUxYUnZjRG9nS0NSaVlYTmxMVzFoY21kcGJpQXFJRElwTzF4dUlDQWdJRUJwYm1Oc2RXUmxJRzFsWkdsaEtITndLU0I3WEc0Z0lDQWdJQ0JzYVc1bExXaGxhV2RvZERvZ0tESXdJQzhnSkdadmJuUXRjMmw2WlMxaVlYTmxLVHRjYmlBZ0lDQWdJRUJwYm1Oc2RXUmxJR1o2S0RJd0tUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQm9NeUI3WEc0Z0lDQWdiV0Z5WjJsdUxYUnZjRG9nS0NSaVlYTmxMVzFoY21kcGJpQXFJREV1TlNrN1hHNGdJSDFjYmx4dUlDQndJSHRjYmlBZ0lDQnRZWEpuYVc0NklDUmlZWE5sTFcxaGNtZHBiaUF3TzF4dUlDQjlYRzVjYmlBZ2FESXNJR2d6TENCb05Dd2dhRFVzSUdnMklIdGNiaUFnSUNBbUlDc2djQ0I3WEc0Z0lDQWdJQ0J0WVhKbmFXNHRkRzl3T2lBd08xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lIVnNMRnh1SUNCdmJDQjdYRzRnSUNBZ2NHRmtaR2x1Wnkxc1pXWjBPaUF4WlcwN1hHNGdJSDFjYmx4dUlDQmtkQ0I3WEc0Z0lDQWdabTl1ZEMxM1pXbG5hSFE2SUdKdmJHUTdYRzRnSUgxY2JseHVJQ0JrWkNCN1hHNGdJQ0FnYldGeVoybHVMV3hsWm5RNklEQTdYRzRnSUgxY2JseHVJQ0JrWkNBcklHUjBJSHRjYmlBZ0lDQnRZWEpuYVc0dGRHOXdPaUF1TldWdE8xeHVJQ0I5WEc1Y2JpQWdhSElnZTF4dUlDQWdJRzFoY21kcGJqb2dNUzQzTldWdElETmxiVHRjYmlBZ0lDQmliM0prWlhJNklEQTdYRzRnSUNBZ1ltOXlaR1Z5TFhSdmNEb2dMakpsYlNCemIyeHBaQ0FrWTI5c2IzSXRZbUZ6WlMxbmNtRjVPMXh1SUNCOVhHNWNiaUFnZEdGaWJHVWdlMXh1SUNBZ0lHMWhlQzEzYVdSMGFEb2dNVEF3SlR0Y2JpQWdJQ0J0YVc0dGQybGtkR2c2SURVd0pUdGNiaUFnSUNCdFlYSm5hVzQ2SURGbGJTQmhkWFJ2SURFdU56VmxiVHRjYmlBZ0lDQkFhVzVqYkhWa1pTQnRaV1JwWVNoemNDa2dlMXh1SUNBZ0lDQWdRR2x1WTJ4MVpHVWdabm9vTVRRcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHTmhjSFJwYjI0Z2UxeHVJQ0FnSUcxaGNtZHBiaTFpYjNSMGIyMDZJQzR5TldWdE8xeHVJQ0I5WEc1Y2JpQWdkR1FzSUhSb0lIdGNiaUFnSUNCd1lXUmthVzVuT2lBeFpXMDdYRzRnSUNBZ1FHbHVZMngxWkdVZ2JXVmthV0VvYzNBcElIdGNiaUFnSUNBZ0lIQmhaR1JwYm1jNklDNHlOV1Z0TzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhSb0lIdGNiaUFnSUNCd1lXUmthVzVuTFdKdmRIUnZiVG9nTGpWbGJUdGNiaUFnSUNCaWIzSmtaWEl0WW05MGRHOXRPaUF5Y0hnZ2MyOXNhV1FnSkdOdmJHOXlMV0poYzJVN1hHNGdJSDFjYmx4dUlDQjBaQ0I3WEc0Z0lDQWdZbTl5WkdWeUxXSnZkSFJ2YlRvZ01YQjRJSE52Ykdsa0lDUmpiMnh2Y2kxaVlYTmxMV3hwYldVN1hHNGdJSDFjYmx4dUlDQnBiV2NnZTF4dUlDQWdJRzFoZUMxM2FXUjBhRG9nTVRBd0pUdGNiaUFnZlZ4dVhHNGdJR2x0WjF0amJHRnpjMTQ5WENKdGRDMXBiV0ZuWlZ3aVhTQjdYRzRnSUNBZ2FHVnBaMmgwT2lCaGRYUnZPMXh1SUNCOVhHNWNiaUFnTG0xMExXbHRZV2RsTFd4bFpuUWdlMXh1SUNBZ0lHWnNiMkYwT2lCc1pXWjBPMXh1SUNBZ0lHMWhjbWRwYmpvZ01DQWtiV0Z5WjJsdUlDUnRZWEpuYVc0Z01EdGNiaUFnSUNCQWFXNWpiSFZrWlNCdFpXUnBZU2h6Y0NrZ2UxeHVJQ0FnSUNBZ2JXRnlaMmx1T2lBd0lDUnRZWEpuYVc0Z0x5QXlJQ1J0WVhKbmFXNGdMeUF5SURBN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0xtMTBMV2x0WVdkbExYSnBaMmgwSUh0Y2JpQWdJQ0JtYkc5aGREb2djbWxuYUhRN1hHNGdJQ0FnYldGeVoybHVPaUF3SURBZ0pHMWhjbWRwYmlBa2JXRnlaMmx1TzF4dUlDQWdJRUJwYm1Oc2RXUmxJRzFsWkdsaEtITndLU0I3WEc0Z0lDQWdJQ0J0WVhKbmFXNDZJREFnTUNBa2JXRnlaMmx1SUM4Z01pQWtiV0Z5WjJsdUlDOGdNanRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F1YlhRdGFXMWhaMlV0WTJWdWRHVnlJSHRjYmlBZ0lDQmthWE53YkdGNU9pQmliRzlqYXp0Y2JpQWdJQ0J0WVhndGQybGtkR2c2SURFeE1TVTdYRzRnSUNBZ2JXRnlaMmx1T2lBd0lDMDFKU0F1TldWdE8xeHVJQ0I5WEc1Y2JpQWdZbXh2WTJ0eGRXOTBaU0I3WEc0Z0lDQWdiV0Z5WjJsdUxXeGxablE2SURBN1hHNGdJQ0FnYldGeVoybHVMWEpwWjJoME9pQXdPMXh1SUNBZ0lIQmhaR1JwYm1jdGJHVm1kRG9nTVdWdE8xeHVJQ0FnSUdKdmNtUmxjaTFzWldaME9pQXpjSGdnYzI5c2FXUWdKR052Ykc5eUxXSmhjMlV0WjNKaGVUdGNiaUFnZlZ4dVhHNGdJR05wZEdVZ2UxeHVJQ0FnSUhSbGVIUXRZV3hwWjI0NklISnBaMmgwTzF4dUlDQjlYRzVjYmlBZ1kyOWtaU0I3WEc0Z0lDQWdRR1Y0ZEdWdVpDQWxabTl1ZEMxemFYcGxMWE50WVd4c1pYSTdYRzRnSUgxY2JseHVJQ0J3Y21VZ1BpQmpiMlJsSUh0Y2JpQWdJQ0JpYjNKa1pYSXRZbTkwZEc5dE9pQXpjSGdnYzI5c2FXUWdJems1T1R0Y2JpQWdmVnh1WEc0Z0lHWnBaM1Z5WlNCN1hHNGdJQ0FnYldGeVoybHVMV0p2ZEhSdmJUb2dKR0poYzJVdGJXRnlaMmx1TzF4dUlDQjlYRzVjYmlBZ2NDQmpiMlJsSUh0Y2JpQWdJQ0J0WVhKbmFXNDZJREFnTW5CNE8xeHVJQ0FnSUhCaFpHUnBibWM2SURBZ00zQjRJREp3ZUR0Y2JpQWdJQ0JpYjNKa1pYSXRjbUZrYVhWek9pQXpjSGc3WEc0Z0lDQWdZbUZqYTJkeWIzVnVaRG9nSkdOdmJHOXlMV0poYzJVdFozSmhlVHRjYmlBZ0lDQjJaWEowYVdOaGJDMWhiR2xuYmpvZ2RHOXdPMXh1SUNCOVhHNTlYRzVjYmk1amIyUmxJSHRjYmlBZ1pIUWdlMXh1SUNBZ0lFQmxlSFJsYm1RZ0pXWnZiblF0ZG1sbllUdGNiaUFnZlZ4dUlDQmtaQ0I3WEc0Z0lDQWdiV0Z5WjJsdU9pQXdPMXh1SUNCOVhHNTlYRzVjYmk4cUlDMHRJRkYxYjNSbElDMHRLaTljYmk1eGRXOTBaU0I3WEc0Z0lIQnZjMmwwYVc5dU9pQnlaV3hoZEdsMlpUdGNiaUFnY0dGa1pHbHVaem9nTGpWbGJTQXhjbVZ0SURObGJTQXhjbVZ0TzF4dUlDQmlZV05yWjNKdmRXNWtPaUFrWTI5c2IzSXRZbUZ6WlMxbmNtRjVPMXh1SUNCa1pDQjdYRzRnSUNBZ2JXRnlaMmx1TFd4bFpuUTZJREE3WEc0Z0lIMWNiaUFnWW14dlkydHhkVzkwWlNCN1hHNGdJQ0FnY0c5emFYUnBiMjQ2SUhKbGJHRjBhWFpsTzF4dUlDQWdJRzFoY21kcGJqb2dNRHRjYmlBZ0lDQndZV1JrYVc1bk9pQXdPMXh1SUNCOVhHNGdJQzVqYVhSbElIdGNiaUFnSUNCd2IzTnBkR2x2YmpvZ1lXSnpiMngxZEdVN1hHNGdJQ0FnY21sbmFIUTZJREZ5WlcwN1hHNGdJQ0FnWW05MGRHOXRPaUF4Y21WdE8xeHVJQ0FnSUhSbGVIUXRZV3hwWjI0NklISnBaMmgwTzF4dUlDQjlYRzU5WEc1Y2JpNWxiV0psWkMxcFpuSmhiV1VnZTF4dUlDQndiM05wZEdsdmJqb2djbVZzWVhScGRtVTdYRzRnSUhkcFpIUm9PaUF4TURBbE8xeHVJQ0J3WVdSa2FXNW5MV0p2ZEhSdmJUb2dPU0F2SURFMklDb2dNVEF3SlR0Y2JseHVJQ0FtSUQ0Z2FXWnlZVzFsSUh0Y2JpQWdJQ0J3YjNOcGRHbHZiam9nWVdKemIyeDFkR1U3WEc0Z0lDQWdkRzl3T2lBd08xeHVJQ0FnSUhKcFoyaDBPaUF3TzF4dUlDQWdJR0p2ZEhSdmJUb2dNRHRjYmlBZ0lDQnNaV1owT2lBd08xeHVJQ0FnSUdobGFXZG9kRG9nTVRBd0pUdGNiaUFnSUNCM2FXUjBhRG9nTVRBd0pUdGNiaUFnZlZ4dWZWeHVYRzR2S2lBdExTRGxqNExvZ0lQamdhdmpnWmZqZ1o5WFpXTGpnNXJqZzd6amdyZ2dMUzBnS2k5Y2JpNXlaV1psY21WdVkyVXRkMlZpTFhCaFoyVWdQaUJrWkNCN1hHNGdJRzFoY21kcGJqb2dNQ0F3SUM0eU5YSmxiVHRjYm4xY2JseHVMeThnY0dWeWJXRnNhVzVyWEc0dWNDMWhjblJwWTJ4bExYQmxjbTFoYkdsdWF5QjdYRzRnSUcxaGNtZHBiam9nSkcxaGNtZHBiaUF3TzF4dWZWeHVYRzR1Y0MxaGNuUnBZMnhsTFhCbGNtMWhiR2x1YXkxc1lXSmxiQ0I3WEc0Z0lHMWhjbWRwYmkxMGIzQTZJQ1J0WVhKbmFXNGdMeUF5TzF4dUlDQm1iMjUwTFhkbGFXZG9kRG9nWW05c1pEdGNibjFjYmx4dUxuQXRZWEowYVdOc1pTMXdaWEp0WVd4cGJtc3RiR2x1YXlCN1hHNGdJRzFoY21kcGJpMXNaV1owT2lBd08xeHVJQ0JBWlhoMFpXNWtJQ1ZtYjI1MExYTnBlbVV0YzIxaGJHeGxjanRjYm4xY2JseHVMeThnWVhKMGFXTnNaU0JpYjNSMGIyMGdZV1J6WEc0dVlYSjBhV05zWlVGa2N5QjdYRzRnSUcxaGNtZHBiam9nTW5KbGJTQXdPMXh1ZlZ4dVhHNHVZWEowYVdOc1pTMWhaSE10ZEdsMGJHVWdlMXh1SUNCQVpYaDBaVzVrSUNWbWIyNTBMWE5wZW1VdGMyMWhiR3hsY2p0Y2JpQWdZbTl5WkdWeUxXSnZkSFJ2YlRvZ01YQjRJSE52Ykdsa0lDUmpiMnh2Y2kxaVlYTmxMV2R5WVhrN1hHNTlYRzVjYmk4dklIQmhaMlZ5WEc0dWNDMWhjblJwWTJ4bExYQmhaMlZ5SUh0Y2JpQWdjRzl6YVhScGIyNDZJSEpsYkdGMGFYWmxPMXh1SUNCdFlYSm5hVzQ2SURSeVpXMGdZWFYwYnp0Y2JuMWNibHh1TG5BdFlYSjBhV05zWlMxd1lXZGxjaTFzWVdKbGJDQjdYRzRnSUhkcFpIUm9PaUExTUNVN1hHNGdJRzFoY21kcGJpMTBiM0E2SUNSdFlYSm5hVzRnTHlBeU8xeHVJQ0JtYjI1MExYZGxhV2RvZERvZ1ltOXNaRHRjYm4xY2JseHVMbkF0WVhKMGFXTnNaUzF3WVdkbGNpMXNhVzVySUh0Y2JpQWdZbTk0TFhOcGVtbHVaem9nWW05eVpHVnlMV0p2ZUR0Y2JpQWdkMmxrZEdnNklEVXdKVHRjYmlBZ2JXRnlaMmx1TFd4bFpuUTZJREE3WEc0Z0lFQmxlSFJsYm1RZ0pXWnZiblF0YzJsNlpTMXpiV0ZzYkdWeU8xeHVYRzRnSUNZZ1BpQmhJSHRjYmlBZ0lDQmthWE53YkdGNU9pQmliRzlqYXp0Y2JpQWdmVnh1ZlZ4dVhHNHVjQzFoY25ScFkyeGxMWEJoWjJWeUxXOXNaR1Z5SUh0Y2JpQWdjR0ZrWkdsdVp5MXlhV2RvZERvZ01YSmxiVHRjYmx4dUlDQkFhVzVqYkhWa1pTQnRaV1JwWVNoemNDa2dlMXh1SUNBZ0lIQmhaR1JwYm1jdGNtbG5hSFE2SUM0MWNtVnRPMXh1SUNCOVhHNTlYRzVjYmk1d0xXRnlkR2xqYkdVdGNHRm5aWEl0Ym1WM1pYSWdlMXh1SUNCd2IzTnBkR2x2YmpvZ1lXSnpiMngxZEdVN1hHNGdJSFJ2Y0RvZ01EdGNiaUFnY21sbmFIUTZJREE3WEc0Z0lHMWhjbWRwYmkxMGIzQTZJREE3WEc0Z0lIQmhaR1JwYm1jdGJHVm1kRG9nTVhKbGJUdGNiaUFnZEdWNGRDMWhiR2xuYmpvZ2NtbG5hSFE3WEc1Y2JpQWdRR2x1WTJ4MVpHVWdiV1ZrYVdFb2MzQXBJSHRjYmlBZ0lDQndZV1JrYVc1bkxXeGxablE2SUM0MWNtVnRPMXh1SUNCOVhHNTlYRzVjYmk1d0xXRnlkR2xqYkdVdGNHRm5aWEl0Ym1WM1pYSXVjQzFoY25ScFkyeGxMWEJoWjJWeUxXeHBibXNnZTF4dUlDQjBiM0E2SURFdU5YSmxiVHRjYm4xY2JseHVJaXdpTHlvZ1gyRnlZMmhwZG1VdWMyTnpjMXh1SUNBOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBTQXFMMXh1WEc0dVlYSmphR2wyWlVobFlXUmxjaUI3ZlZ4dVhHNHVZWEpqYUdsMlpTMTBhWFJzWlNCN1hHNGdJRUJsZUhSbGJtUWdKWEJ5YVcxaGNubElaV0ZrYVc1bk8xeHVmVnh1WEc0dVlYSmphR2wyWlMxc2FYTjBJSHRjYmlBZ2NHRmtaR2x1Wnkxc1pXWjBPaUF3TzF4dUlDQnNhWE4wTFhOMGVXeGxPaUJ1YjI1bE8xeHVmVnh1WEc0dVlYSmphR2wyWlMxc2FYTjBMV2wwWlcwZ2UxeHVJQ0F1WVhKMGFXTnNaUzFwYm1adklIdGNiaUFnSUNCM2FXUjBhRG9nWVhWMGJ6dGNiaUFnSUNCdFlYSm5hVzR0WW05MGRHOXRPaUF1TlhKbGJUdGNiaUFnSUNCMFpYaDBMV0ZzYVdkdU9pQnNaV1owTzF4dUlDQjlYRzRnSUM1aGNuUnBZMnhsTFdsdVptOHRiR0ZpWld3NlptbHljM1F0WTJocGJHUWdlMXh1SUNBZ0lHMWhjbWRwYmkxc1pXWjBPaUF3TzF4dUlDQjlYRzU5WEc1Y2JpNWhjbU5vYVhabExXeHBjM1F0YVhSbGJTMTBhWFJzWlNCN1hHNGdJRzFoY21kcGJqb2dNQ0F3SURKeVpXMDdYRzRnSUVCbGVIUmxibVFnSldadmJuUXRjMmw2WlMxc1lYSm5aVHRjYmlBZ2JHbHVaUzFvWldsbmFIUTZJREV1TXp0Y2JpQWdabTl1ZEMxM1pXbG5hSFE2SUdKdmJHUTdYRzRnSUNZZ1BpQmhJSHRjYmlBZ0lDQjBaWGgwTFdSbFkyOXlZWFJwYjI0NklHNXZibVU3WEc0Z0lIMWNibjFjYmlJc0lpOHFYRzRnWDNCaFoyVXVjMk56YzF4dUlPT0NwdU9DcCtPRGx1T0RtdU9Edk9PQ3VPT0JydU9DdWVPQ3YrT0NwT09EcTF4dUtpOWNibHh1THlvZ0xTMGdVR0ZuWlNBdExTQXFMMXh1TG5CaFoyVlRaV04wYVc5dVNHVmhaR1Z5SUh0Y2JpQWdhREVnZTF4dUlDQWdJRUJsZUhSbGJtUWdKWEJ5YVcxaGNubElaV0ZrYVc1bk8xeHVJQ0I5WEc1OVhHNWNiaThxSUMwdElGQmhaMlVnUVdKdmRYUWdMUzBxTDF4dUxuQnliMlpwYkdWUWFHOTBieUI3WEc0Z0lHWnNiMkYwT2lCc1pXWjBPMXh1SUNCM2FXUjBhRG9nTWpVbE8xeHVJQ0JvWldsbmFIUTZJR0YxZEc4N1hHNGdJRzFoZUMxM2FXUjBhRG9nT1dWdE8xeHVJQ0J0WVhKbmFXNHRjbWxuYUhRNklERmxiVHRjYmlBZ2JXRnlaMmx1TFdKdmRIUnZiVG9nTVdWdE8xeHVJQ0JpYjNKa1pYSXRjbUZrYVhWek9pQTFNQ1U3WEc1OUlpd2lMeW9oWEc1Y2JtZHBkR2gxWWk1amIyMGdjM1I1YkdVZ0tHTXBJRlpoYzJsc2VTQlFiMnh2ZG01NWIzWWdQSFpoYzNSQWQyaHBkR1ZoYm5SekxtNWxkRDVjYmx4dUtpOWNibHh1TG1oc2FuTWdlMXh1SUNCa2FYTndiR0Y1T2lCaWJHOWphenRjYmlBZ2IzWmxjbVpzYjNjdGVEb2dZWFYwYnp0Y2JpQWdjR0ZrWkdsdVp6b2dNQzQxWlcwN1hHNGdJR052Ykc5eU9pQWpNek16TzF4dUlDQmlZV05yWjNKdmRXNWtPaUFqWmpobU9HWTRPMXh1SUNBdGQyVmlhMmwwTFhSbGVIUXRjMmw2WlMxaFpHcDFjM1E2SUc1dmJtVTdYRzU5WEc1Y2JpNW9iR3B6TFdOdmJXMWxiblFzWEc0dVpHbG1aaUF1YUd4cWN5MW9aV0ZrWlhJc1hHNHVhR3hxY3kxcVlYWmhaRzlqSUh0Y2JpQWdZMjlzYjNJNklDTTVPVGc3WEc0Z0lHWnZiblF0YzNSNWJHVTZJR2wwWVd4cFl6dGNibjFjYmx4dUxtaHNhbk10YTJWNWQyOXlaQ3hjYmk1amMzTWdMbkoxYkdVZ0xtaHNhbk10YTJWNWQyOXlaQ3hjYmk1b2JHcHpMWGRwYm5WMGFXeHpMRnh1TG01bmFXNTRJQzVvYkdwekxYUnBkR3hsTEZ4dUxtaHNhbk10YzNWaWMzUXNYRzR1YUd4cWN5MXlaWEYxWlhOMExGeHVMbWhzYW5NdGMzUmhkSFZ6SUh0Y2JpQWdZMjlzYjNJNklDTXpNek03WEc0Z0lHWnZiblF0ZDJWcFoyaDBPaUJpYjJ4a08xeHVmVnh1WEc0dWFHeHFjeTF1ZFcxaVpYSXNYRzR1YUd4cWN5MW9aWGhqYjJ4dmNpeGNiaTV5ZFdKNUlDNW9iR3B6TFdOdmJuTjBZVzUwSUh0Y2JpQWdZMjlzYjNJNklDTXdNRGd3T0RBN1hHNTlYRzVjYmk1b2JHcHpMWE4wY21sdVp5eGNiaTVvYkdwekxYUmhaeUF1YUd4cWN5MTJZV3gxWlN4Y2JpNW9iR3B6TFhCb2NHUnZZeXhjYmk1b2JHcHpMV1JoY25Sa2IyTXNYRzR1ZEdWNElDNW9iR3B6TFdadmNtMTFiR0VnZTF4dUlDQmpiMnh2Y2pvZ0kyUXhORHRjYm4xY2JseHVMbWhzYW5NdGRHbDBiR1VzWEc0dWFHeHFjeTFwWkN4Y2JpNXpZM056SUM1b2JHcHpMWEJ5WlhCeWIyTmxjM052Y2lCN1hHNGdJR052Ykc5eU9pQWpPVEF3TzF4dUlDQm1iMjUwTFhkbGFXZG9kRG9nWW05c1pEdGNibjFjYmx4dUxtaHNhbk10YkdsemRDQXVhR3hxY3kxclpYbDNiM0prTEZ4dUxtaHNhbk10YzNWaWMzUWdlMXh1SUNCbWIyNTBMWGRsYVdkb2REb2dibTl5YldGc08xeHVmVnh1WEc0dWFHeHFjeTFqYkdGemN5QXVhR3hxY3kxMGFYUnNaU3hjYmk1b2JHcHpMWFI1Y0dVc1hHNHVkbWhrYkNBdWFHeHFjeTFzYVhSbGNtRnNMRnh1TG5SbGVDQXVhR3hxY3kxamIyMXRZVzVrSUh0Y2JpQWdZMjlzYjNJNklDTTBOVGc3WEc0Z0lHWnZiblF0ZDJWcFoyaDBPaUJpYjJ4a08xeHVmVnh1WEc0dWFHeHFjeTEwWVdjc1hHNHVhR3hxY3kxMFlXY2dMbWhzYW5NdGRHbDBiR1VzWEc0dWFHeHFjeTF5ZFd4bGN5QXVhR3hxY3kxd2NtOXdaWEowZVN4Y2JpNWthbUZ1WjI4Z0xtaHNhbk10ZEdGbklDNW9iR3B6TFd0bGVYZHZjbVFnZTF4dUlDQmpiMnh2Y2pvZ0l6QXdNREE0TUR0Y2JpQWdabTl1ZEMxM1pXbG5hSFE2SUc1dmNtMWhiRHRjYm4xY2JseHVMbWhzYW5NdFlYUjBjbWxpZFhSbExGeHVMbWhzYW5NdGRtRnlhV0ZpYkdVc1hHNHViR2x6Y0NBdWFHeHFjeTFpYjJSNUlIdGNiaUFnWTI5c2IzSTZJQ013TURnd09EQTdYRzU5WEc1Y2JpNW9iR3B6TFhKbFoyVjRjQ0I3WEc0Z0lHTnZiRzl5T2lBak1EQTVPVEkyTzF4dWZWeHVYRzR1YUd4cWN5MXplVzFpYjJ3c1hHNHVjblZpZVNBdWFHeHFjeTF6ZVcxaWIyd2dMbWhzYW5NdGMzUnlhVzVuTEZ4dUxteHBjM0FnTG1oc2FuTXRhMlY1ZDI5eVpDeGNiaTVqYkc5cWRYSmxJQzVvYkdwekxXdGxlWGR2Y21Rc1hHNHVjMk5vWlcxbElDNW9iR3B6TFd0bGVYZHZjbVFzWEc0dWRHVjRJQzVvYkdwekxYTndaV05wWVd3c1hHNHVhR3hxY3kxd2NtOXRjSFFnZTF4dUlDQmpiMnh2Y2pvZ0l6azVNREEzTXp0Y2JuMWNibHh1TG1oc2FuTXRZblZwYkhSZmFXNGdlMXh1SUNCamIyeHZjam9nSXpBd09EWmlNenRjYm4xY2JseHVMbWhzYW5NdGNISmxjSEp2WTJWemMyOXlMRnh1TG1oc2FuTXRjSEpoWjIxaExGeHVMbWhzYW5NdGNHa3NYRzR1YUd4cWN5MWtiMk4wZVhCbExGeHVMbWhzYW5NdGMyaGxZbUZ1Wnl4Y2JpNW9iR3B6TFdOa1lYUmhJSHRjYmlBZ1kyOXNiM0k2SUNNNU9UazdYRzRnSUdadmJuUXRkMlZwWjJoME9pQmliMnhrTzF4dWZWeHVYRzR1YUd4cWN5MWtaV3hsZEdsdmJpQjdYRzRnSUdKaFkydG5jbTkxYm1RNklDTm1aR1E3WEc1OVhHNWNiaTVvYkdwekxXRmtaR2wwYVc5dUlIdGNiaUFnWW1GamEyZHliM1Z1WkRvZ0kyUm1aRHRjYm4xY2JseHVMbVJwWm1ZZ0xtaHNhbk10WTJoaGJtZGxJSHRjYmlBZ1ltRmphMmR5YjNWdVpEb2dJekF3T0RaaU16dGNibjFjYmx4dUxtaHNhbk10WTJoMWJtc2dlMXh1SUNCamIyeHZjam9nSTJGaFlUdGNibjFjYmlKZExDSnpiM1Z5WTJWU2IyOTBJam9pTDNOdmRYSmpaUzhpZlE9PSAqLyIsIi8qISBub3JtYWxpemUuY3NzIHYzLjAuMCB8IE1JVCBMaWNlbnNlIHwgZ2l0LmlvL25vcm1hbGl6ZSAqL1xuXG4vKipcbiAqIDEuIFNldCBkZWZhdWx0IGZvbnQgZmFtaWx5IHRvIHNhbnMtc2VyaWYuXG4gKiAyLiBQcmV2ZW50IGlPUyB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZSwgd2l0aG91dCBkaXNhYmxpbmdcbiAqICAgIHVzZXIgem9vbS5cbiAqL1xuXG5odG1sIHtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7IC8qIDEgKi9cbiAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgbWFyZ2luLlxuICovXG5cbmJvZHkge1xuICBtYXJnaW46IDA7XG59XG5cbi8qIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUUgOC85LlxuICovXG5cbmFydGljbGUsXG5hc2lkZSxcbmRldGFpbHMsXG5maWdjYXB0aW9uLFxuZmlndXJlLFxuZm9vdGVyLFxuaGVhZGVyLFxuaGdyb3VwLFxubWFpbixcbm5hdixcbnNlY3Rpb24sXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCBgaW5saW5lLWJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGluIElFIDgvOS5cbiAqIDIuIE5vcm1hbGl6ZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgb2YgYHByb2dyZXNzYCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAqL1xuXG5hdWRpbyxcbmNhbnZhcyxcbnByb2dyZXNzLFxudmlkZW8ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IC8qIDEgKi9cbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyAvKiAyICovXG59XG5cbi8qKlxuICogUHJldmVudCBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nIGBhdWRpb2Agd2l0aG91dCBjb250cm9scy5cbiAqIFJlbW92ZSBleGNlc3MgaGVpZ2h0IGluIGlPUyA1IGRldmljZXMuXG4gKi9cblxuYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgaGVpZ2h0OiAwO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgYFtoaWRkZW5dYCBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS5cbiAqIEhpZGUgdGhlIGB0ZW1wbGF0ZWAgZWxlbWVudCBpbiBJRSwgU2FmYXJpLCBhbmQgRmlyZWZveCA8IDIyLlxuICovXG5cbltoaWRkZW5dLFxudGVtcGxhdGUge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4vKiBMaW5rc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBjb2xvciBmcm9tIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuXG5hIHtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG59XG5cbi8qKlxuICogSW1wcm92ZSByZWFkYWJpbGl0eSB3aGVuIGZvY3VzZWQgYW5kIGFsc28gbW91c2UgaG92ZXJlZCBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuYTphY3RpdmUsXG5hOmhvdmVyIHtcbiAgb3V0bGluZTogMDtcbn1cblxuLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOSwgU2FmYXJpIDUsIGFuZCBDaHJvbWUuXG4gKi9cblxuYWJiclt0aXRsZV0ge1xuICBib3JkZXItYm90dG9tOiAxcHggZG90dGVkO1xufVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGUgc2V0IHRvIGBib2xkZXJgIGluIEZpcmVmb3ggNCssIFNhZmFyaSA1LCBhbmQgQ2hyb21lLlxuICovXG5cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gU2FmYXJpIDUgYW5kIENocm9tZS5cbiAqL1xuXG5kZm4ge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbi8qKlxuICogQWRkcmVzcyB2YXJpYWJsZSBgaDFgIGZvbnQtc2l6ZSBhbmQgbWFyZ2luIHdpdGhpbiBgc2VjdGlvbmAgYW5kIGBhcnRpY2xlYFxuICogY29udGV4dHMgaW4gRmlyZWZveCA0KywgU2FmYXJpIDUsIGFuZCBDaHJvbWUuXG4gKi9cblxuaDEge1xuICBmb250LXNpemU6IDJlbTtcbiAgbWFyZ2luOiAwLjY3ZW0gMDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LlxuICovXG5cbm1hcmsge1xuICBiYWNrZ3JvdW5kOiAjZmYwO1xuICBjb2xvcjogIzAwMDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIGluY29uc2lzdGVudCBhbmQgdmFyaWFibGUgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5zbWFsbCB7XG4gIGZvbnQtc2l6ZTogODAlO1xufVxuXG4vKipcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGFmZmVjdGluZyBgbGluZS1oZWlnaHRgIGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5zdWIsXG5zdXAge1xuICBmb250LXNpemU6IDc1JTtcbiAgbGluZS1oZWlnaHQ6IDA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xufVxuXG5zdXAge1xuICB0b3A6IC0wLjVlbTtcbn1cblxuc3ViIHtcbiAgYm90dG9tOiAtMC4yNWVtO1xufVxuXG4vKiBFbWJlZGRlZCBjb250ZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIFJlbW92ZSBib3JkZXIgd2hlbiBpbnNpZGUgYGFgIGVsZW1lbnQgaW4gSUUgOC85LlxuICovXG5cbmltZyB7XG4gIGJvcmRlcjogMDtcbn1cblxuLyoqXG4gKiBDb3JyZWN0IG92ZXJmbG93IGRpc3BsYXllZCBvZGRseSBpbiBJRSA5LlxuICovXG5cbnN2Zzpub3QoOnJvb3QpIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLyogR3JvdXBpbmcgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBBZGRyZXNzIG1hcmdpbiBub3QgcHJlc2VudCBpbiBJRSA4LzkgYW5kIFNhZmFyaSA1LlxuICovXG5cbmZpZ3VyZSB7XG4gIG1hcmdpbjogMWVtIDQwcHg7XG59XG5cbi8qKlxuICogQWRkcmVzcyBkaWZmZXJlbmNlcyBiZXR3ZWVuIEZpcmVmb3ggYW5kIG90aGVyIGJyb3dzZXJzLlxuICovXG5cbmhyIHtcbiAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIGhlaWdodDogMDtcbn1cblxuLyoqXG4gKiBDb250YWluIG92ZXJmbG93IGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5wcmUge1xuICBvdmVyZmxvdzogYXV0bztcbn1cblxuLyoqXG4gKiBBZGRyZXNzIG9kZCBgZW1gLXVuaXQgZm9udCBzaXplIHJlbmRlcmluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuY29kZSxcbmtiZCxcbnByZSxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIGZvbnQtc2l6ZTogMWVtO1xufVxuXG4vKiBGb3Jtc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBLbm93biBsaW1pdGF0aW9uOiBieSBkZWZhdWx0LCBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYIGFsbG93IHZlcnkgbGltaXRlZFxuICogc3R5bGluZyBvZiBgc2VsZWN0YCwgdW5sZXNzIGEgYGJvcmRlcmAgcHJvcGVydHkgaXMgc2V0LlxuICovXG5cbi8qKlxuICogMS4gQ29ycmVjdCBjb2xvciBub3QgYmVpbmcgaW5oZXJpdGVkLlxuICogICAgS25vd24gaXNzdWU6IGFmZmVjdHMgY29sb3Igb2YgZGlzYWJsZWQgZWxlbWVudHMuXG4gKiAyLiBDb3JyZWN0IGZvbnQgcHJvcGVydGllcyBub3QgYmVpbmcgaW5oZXJpdGVkLlxuICogMy4gQWRkcmVzcyBtYXJnaW5zIHNldCBkaWZmZXJlbnRseSBpbiBGaXJlZm94IDQrLCBTYWZhcmkgNSwgYW5kIENocm9tZS5cbiAqL1xuXG5idXR0b24sXG5pbnB1dCxcbm9wdGdyb3VwLFxuc2VsZWN0LFxudGV4dGFyZWEge1xuICBjb2xvcjogaW5oZXJpdDsgLyogMSAqL1xuICBmb250OiBpbmhlcml0OyAvKiAyICovXG4gIG1hcmdpbjogMDsgLyogMyAqL1xufVxuXG4vKipcbiAqIEFkZHJlc3MgYG92ZXJmbG93YCBzZXQgdG8gYGhpZGRlbmAgaW4gSUUgOC85LzEwLlxuICovXG5cbmJ1dHRvbiB7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGB0ZXh0LXRyYW5zZm9ybWAgaW5oZXJpdGFuY2UgZm9yIGBidXR0b25gIGFuZCBgc2VsZWN0YC5cbiAqIEFsbCBvdGhlciBmb3JtIGNvbnRyb2wgZWxlbWVudHMgZG8gbm90IGluaGVyaXQgYHRleHQtdHJhbnNmb3JtYCB2YWx1ZXMuXG4gKiBDb3JyZWN0IGBidXR0b25gIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3gsIElFIDgrLCBhbmQgT3BlcmFcbiAqIENvcnJlY3QgYHNlbGVjdGAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveC5cbiAqL1xuXG5idXR0b24sXG5zZWxlY3Qge1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbn1cblxuLyoqXG4gKiAxLiBBdm9pZCB0aGUgV2ViS2l0IGJ1ZyBpbiBBbmRyb2lkIDQuMC4qIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYFxuICogICAgYW5kIGB2aWRlb2AgY29udHJvbHMuXG4gKiAyLiBDb3JyZWN0IGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgYGlucHV0YCB0eXBlcyBpbiBpT1MuXG4gKiAzLiBJbXByb3ZlIHVzYWJpbGl0eSBhbmQgY29uc2lzdGVuY3kgb2YgY3Vyc29yIHN0eWxlIGJldHdlZW4gaW1hZ2UtdHlwZVxuICogICAgYGlucHV0YCBhbmQgb3RoZXJzLlxuICovXG5cbmJ1dHRvbixcbmh0bWwgaW5wdXRbdHlwZT1cImJ1dHRvblwiXSwgLyogMSAqL1xuaW5wdXRbdHlwZT1cInJlc2V0XCJdLFxuaW5wdXRbdHlwZT1cInN1Ym1pdFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAyICovXG4gIGN1cnNvcjogcG9pbnRlcjsgLyogMyAqL1xufVxuXG4vKipcbiAqIFJlLXNldCBkZWZhdWx0IGN1cnNvciBmb3IgZGlzYWJsZWQgZWxlbWVudHMuXG4gKi9cblxuYnV0dG9uW2Rpc2FibGVkXSxcbmh0bWwgaW5wdXRbZGlzYWJsZWRdIHtcbiAgY3Vyc29yOiBkZWZhdWx0O1xufVxuXG4vKipcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBib3JkZXIgaW4gRmlyZWZveCA0Ky5cbiAqL1xuXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5pbnB1dDo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlcjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIEZpcmVmb3ggNCsgc2V0dGluZyBgbGluZS1oZWlnaHRgIG9uIGBpbnB1dGAgdXNpbmcgYCFpbXBvcnRhbnRgIGluXG4gKiB0aGUgVUEgc3R5bGVzaGVldC5cbiAqL1xuXG5pbnB1dCB7XG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XG59XG5cbi8qKlxuICogSXQncyByZWNvbW1lbmRlZCB0aGF0IHlvdSBkb24ndCBhdHRlbXB0IHRvIHN0eWxlIHRoZXNlIGVsZW1lbnRzLlxuICogRmlyZWZveCdzIGltcGxlbWVudGF0aW9uIGRvZXNuJ3QgcmVzcGVjdCBib3gtc2l6aW5nLCBwYWRkaW5nLCBvciB3aWR0aC5cbiAqXG4gKiAxLiBBZGRyZXNzIGJveCBzaXppbmcgc2V0IHRvIGBjb250ZW50LWJveGAgaW4gSUUgOC85LzEwLlxuICogMi4gUmVtb3ZlIGV4Y2VzcyBwYWRkaW5nIGluIElFIDgvOS8xMC5cbiAqL1xuXG5pbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0sXG5pbnB1dFt0eXBlPVwicmFkaW9cIl0ge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXG4gIHBhZGRpbmc6IDA7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBGaXggdGhlIGN1cnNvciBzdHlsZSBmb3IgQ2hyb21lJ3MgaW5jcmVtZW50L2RlY3JlbWVudCBidXR0b25zLiBGb3IgY2VydGFpblxuICogYGZvbnQtc2l6ZWAgdmFsdWVzIG9mIHRoZSBgaW5wdXRgLCBpdCBjYXVzZXMgdGhlIGN1cnNvciBzdHlsZSBvZiB0aGVcbiAqIGRlY3JlbWVudCBidXR0b24gdG8gY2hhbmdlIGZyb20gYGRlZmF1bHRgIHRvIGB0ZXh0YC5cbiAqL1xuXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gIGhlaWdodDogYXV0bztcbn1cblxuLyoqXG4gKiAxLiBBZGRyZXNzIGBhcHBlYXJhbmNlYCBzZXQgdG8gYHNlYXJjaGZpZWxkYCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lLlxuICogMi4gQWRkcmVzcyBgYm94LXNpemluZ2Agc2V0IHRvIGBib3JkZXItYm94YCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lXG4gKiAgICAoaW5jbHVkZSBgLW1vemAgdG8gZnV0dXJlLXByb29mKS5cbiAqL1xuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7IC8qIDEgKi9cbiAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBjb250ZW50LWJveDsgLyogMiAqL1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbn1cblxuLyoqXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgc2VhcmNoIGNhbmNlbCBidXR0b24gaW4gU2FmYXJpIGFuZCBDaHJvbWUgb24gT1MgWC5cbiAqIFNhZmFyaSAoYnV0IG5vdCBDaHJvbWUpIGNsaXBzIHRoZSBjYW5jZWwgYnV0dG9uIHdoZW4gdGhlIHNlYXJjaCBpbnB1dCBoYXNcbiAqIHBhZGRpbmcgKGFuZCBgdGV4dGZpZWxkYCBhcHBlYXJhbmNlKS5cbiAqL1xuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbn1cblxuLyoqXG4gKiBEZWZpbmUgY29uc2lzdGVudCBib3JkZXIsIG1hcmdpbiwgYW5kIHBhZGRpbmcuXG4gKi9cblxuZmllbGRzZXQge1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICBtYXJnaW46IDAgMnB4O1xuICBwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCBgY29sb3JgIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gSUUgOC85LlxuICogMi4gUmVtb3ZlIHBhZGRpbmcgc28gcGVvcGxlIGFyZW4ndCBjYXVnaHQgb3V0IGlmIHRoZXkgemVybyBvdXQgZmllbGRzZXRzLlxuICovXG5cbmxlZ2VuZCB7XG4gIGJvcmRlcjogMDsgLyogMSAqL1xuICBwYWRkaW5nOiAwOyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDgvOS5cbiAqL1xuXG50ZXh0YXJlYSB7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4vKipcbiAqIERvbid0IGluaGVyaXQgdGhlIGBmb250LXdlaWdodGAgKGFwcGxpZWQgYnkgYSBydWxlIGFib3ZlKS5cbiAqIE5PVEU6IHRoZSBkZWZhdWx0IGNhbm5vdCBzYWZlbHkgYmUgY2hhbmdlZCBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYLlxuICovXG5cbm9wdGdyb3VwIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi8qIFRhYmxlc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgbW9zdCBzcGFjaW5nIGJldHdlZW4gdGFibGUgY2VsbHMuXG4gKi9cblxudGFibGUge1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBib3JkZXItc3BhY2luZzogMDtcbn1cblxudGQsXG50aCB7XG4gIHBhZGRpbmc6IDA7XG59XG4iLCIvKiBfbGF5b3V0LnNjc3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8vIExheW91dFxuJGJvZHlNYXhXaWR0aDogNDRyZW07XG4kYm9keU1pbldpZHRoOiAxOHJlbTtcbiRtYXJnaW46IDJyZW07XG5cbiVjb250ZW50LXdpZHRoIHtcbiAgbWF4LXdpZHRoOiAkYm9keU1heFdpZHRoO1xuICB3aWR0aDogNzAlO1xuICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuXG4gIEBpbmNsdWRlIG1lZGlhKHNwKSB7XG4gICAgd2lkdGg6IDkwJTtcbiAgICBtYXJnaW4tcmlnaHQ6IDUlO1xuICAgIG1hcmdpbi1sZWZ0OiA1JTtcbiAgfVxufVxuXG4uZy1oZWFkZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1hcmdpbi1ib3R0b206IDJyZW07XG5cbiAgLmMtc2l0ZW5hbWUge1xuICAgIEBleHRlbmQgJWNvbnRlbnQtd2lkdGg7XG4gIH1cblxuICAuYy1zaXRlbmFtZSA+IGEge1xuICAgIHRleHQtc2hhZG93OiAwIDAgdHJhbnNwYXJlbnQ7XG4gICAgdHJhbnNpdGlvbjogdGV4dC1zaGFkb3cgLjRzIGVhc2U7XG4gICAgY29sb3I6ICRjb2xvci1iYXNlO1xuICAgIHRleHQtc2hhZG93OiBsb25nc2hhZG93KCM2MDUwNDAsIDUpO1xuXG4gICAgJjpob3ZlciB7XG4gICAgICB0ZXh0LXNoYWRvdzogbG9uZ3NoYWRvdygjNjA1MDQwLCA4KTtcbiAgICB9XG4gIH1cbn1cblxuLm1haW4ge1xuICBAZXh0ZW5kICVjb250ZW50LXdpZHRoO1xuICBtYXJnaW4tYm90dG9tOiAkbWFyZ2luO1xufVxuXG4uZ2xvYmFsRm9vdGVyIHtcbiAgQGV4dGVuZCAlY29udGVudC13aWR0aDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nLXRvcDogJG1hcmdpbiAvIDI7XG4gIHBhZGRpbmctYm90dG9tOiAkbWFyZ2luIC8gMjtcbiAgbWFyZ2luLXRvcDogJG1hcmdpbjtcblxuICAuc25zLWxpc3Qge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3R0b206IDFyZW07XG4gICAgcmlnaHQ6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuXG4gICAgJiA+IGxpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAxcmVtO1xuICAgIH1cbiAgfVxufVxuXG4uYmFjazJ0b3Age1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgJiA+IGEge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBoZWlnaHQ6IDFlbSAqICRsaW5lLWhlaWdodC1iYXNlO1xuICAgIHdpZHRoOiAxZW0gKiAkbGluZS1oZWlnaHQtYmFzZTtcbiAgICBAZXh0ZW5kICVmb250LXNpemUtbGFyZ2UteDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkY29sb3ItYmFzZTtcbiAgICBib3JkZXItcmFkaXVzOiA1MSU7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbn1cblxuLnNpdGUtbmF2IHtcbiAgbWFyZ2luOiAxcmVtIDA7XG4gIHBhZGRpbmc6IDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIEBleHRlbmQgLmMtZmxhdC1saXN0O1xuXG4gICYgPiBsaSB7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgfVxuXG4gICYgPiBsaSA+IGEge1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgfVxuXG4gICYgPiBsaSA+IGE6aG92ZXIge1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICB9XG59XG5cbi5jb3B5cmlnaHQge1xuICBtYXJnaW46IC41ZW0gMDtcblxuICBhLFxuICBhOnZpc2l0ZWQge1xuICAgIGNvbG9yOiAkY29sb3ItdGV4dDtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIH1cbn0iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAvXG4vLyBfbWl4aW4uc2Nzc1xuLy8gbWl4aW4g44KEIGZ1bmN0aW9u44Gq44GpXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAvXG5cblxuLy8gZm9udC1zaXplIOOCkmVt44GocmVt44Gn5Ye65YqbXG5AbWl4aW4gZnooJHB4LCAkYmFzZTokZm9udC1zaXplLWJhc2UpIHtcbiAgZm9udC1zaXplOiBlbSgkcHgsICRiYXNlKTtcbiAgQGlmICRiYXNlICE9ICRmb250LXNpemUtYmFzZSB7XG4gICAgZm9udC1zaXplOiByZW0oJHB4KTtcbiAgfVxufVxuXG4vLyBtZWRpYSBxdWVyeSDjga7nrqHnkIZcbkBtaXhpbiBtZWRpYSgkYnApIHtcbiAgJGJwLXdpZHRoOiBlbSg3NjgpO1xuICBAaWYgJGJwID09ICdzcCcge1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRicC13aWR0aCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG4gIEBlbHNlIGlmICRicCA9PSAnbWlkJyB7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTgwcHgpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxuICBAZWxzZSBpZiAkYnAgPT0gJ2xhcmdlJyB7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJGJwLXdpZHRoICogMikge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG59IiwiLy8gLS0gVmFyaWFibGUgLS1cblxuLy8gQ29sb3JcblxuLy9CYXNlIENvbG9yXG4kY29sb3ItYmFzZS1ibGFjazogICAgIzQ3NDg0QjtcbiRjb2xvci1iYXNlLWJsdWU6ICAgICAjMTE0QjVGO1xuJGNvbG9yLWJhc2Utb2Zmd2hpdGU6ICNFRkZGQzg7XG4kY29sb3ItYmFzZS1ncmVlbjogICAgIzAwQUE4ODtcbiRjb2xvci1iYXNlLWxpbWU6ICAgICAjODVDQjMzO1xuJGNvbG9yLWJhc2UtZ3JheTogICAgICNlYWVhZWE7XG4kY29sb3ItYmFzZS1vcmFuZ2U6ICAgI0U0NTcyRTtcblxuJGNvbG9yLWJhc2Utd2hpdGU6IGxpZ2h0ZW4oJGNvbG9yLWJhc2Utb2Zmd2hpdGUsIDkuNSUpO1xuXG4kY29sb3ItYmFzZTogICAgICAkY29sb3ItYmFzZS1vcmFuZ2U7XG4kY29sb3ItYmFzZS1saWdodDogbGlnaHRlbigkY29sb3ItYmFzZSwgMTAlKTtcbiRjb2xvci1iYXNlLWRhcms6IGRhcmtlbigkY29sb3ItYmFzZSwgMTAlKTtcbiRjb2xvci1ib2R5LWJnOiAgICRjb2xvci1iYXNlLXdoaXRlO1xuJGNvbG9yLXRleHQ6ICRjb2xvci1iYXNlLWJsYWNrO1xuJGNvbG9yLWFjY2VudDogICAgJGNvbG9yLWJhc2Utb3JhbmdlO1xuXG4kY29sb3ItbGluazogJGNvbG9yLWJhc2UtZGFyaztcblxuLy8gRm9udFxuJGZvbnQtc2l6ZS1iYXNlOiAxNjtcbiRsaW5lLWhlaWdodC1iYXNlOiAxLjc7IiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIF9mdW5jdGlvbi5zY3NzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBweCDjgpIgZW0g44Gu5YCk44Gr5aSJ5o+bXG5AZnVuY3Rpb24gZW0oJHB4LCAkYmFzZTokZm9udC1zaXplLWJhc2UsICR1bml0OmVtKSB7XG4gIEBpZiAkdW5pdCA9PSBlbSB7XG4gICAgQHJldHVybiAoJHB4IC8gJGJhc2UpICogMWVtO1xuICB9QGVsc2VpZiAkdW5pdCA9PSBub25lIHtcbiAgICBAcmV0dXJuICgkcHggLyAkYmFzZSk7XG4gIH1cbn1cblxuLy8gcHgg44KSIHJlbSDjga7lgKTjgavlpInmj5tcbkBmdW5jdGlvbiByZW0oJHB4KSB7XG4gIEByZXR1cm4gKCRweCAvICRmb250LXNpemUtYmFzZSkgKiAxcmVtO1xufVxuXG4vLyByZXR1cm4gbG9uZy1zaGFkb3dcbkBmdW5jdGlvbiBsb25nc2hhZG93KCRjb2xvciwgJGRpcykge1xuICAkdmFsOiAwIDAgJGNvbG9yO1xuICBAZm9yICRpIGZyb20gMSB0aHJvdWdoICRkaXMge1xuICAgICR2YWw6ICN7JHZhbH0sICN7JGl9cHggI3skaX1weCAjeyRjb2xvcn07XG4gIH1cbiAgQHJldHVybiAkdmFsO1xufSIsIi8qIF9jb3JlLnNjc3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbmh0bWwge1xuICBiYWNrZ3JvdW5kOiAkY29sb3ItYm9keS1iZztcbiAgY29sb3I6ICRjb2xvci10ZXh0O1xuICBmb250LWZhbWlseTogXCJTb3VyY2UgU2FucyBQcm9cIiwgXCLjg5Ljg6njgq7jg47op5LjgrQgUHJvTlwiLCBcIkhpcmFnaW5vIEtha3UgR290aGljIFByb05cIiwgXCLjg6HjgqTjg6rjgqpcIiwgTWVpcnlvLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6ICgkZm9udC1zaXplLWJhc2UgLyAxNikgKyBlbTtcbiAgbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodC1iYXNlO1xufVxuXG5hIHtcbiAgY29sb3I6ICRjb2xvci1saW5rO1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgdHJhbnNpdGlvbjogY29sb3IgLjE1cyBlYXNlO1xufVxuXG5hOnZpc2l0ZWQge1xuICBjb2xvcjogZGFya2VuKCRjb2xvci1saW5rLCAxMCUpO1xufVxuXG5hOmhvdmVyIHtcbiAgY29sb3I6IGxpZ2h0ZW4oJGNvbG9yLWxpbmssIDEwJSk7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cblxuYTphY3RpdmUge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHRvcDogMXB4O1xufVxuXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcbiAgY2xlYXI6IGJvdGg7XG4gIGZvbnQtZmVhdHVyZS1zZXR0aW5nczogXCJrZXJuXCIgMTtcbiAgZm9udC12YXJpYW50OiBwcm9wb3J0aW9uYWwtd2lkdGg7XG59XG5cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbS13aWR0aDogMDtcbn1cblxuZmlndXJlIHtcbiAgbWFyZ2luOiAwO1xufVxuXG5maWdjYXB0aW9uIHtcbiAgQGV4dGVuZCAlZm9udC1zaXplLXNtYWxsZXI7XG59XG5cbi8qIC0tIFNvdXJjZSBDb2RlIC0tICovXG5jb2RlIHtcbiAgZm9udC1mYW1pbHk6IFwiU291cmNlIENvZGUgUHJvXCIsIG1vbm9zcGFjZTtcbn0iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gX2V4dGVuZHMuc2Nzc1xuLy8gcGxhY2Vob2xkZXJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiVmb250LXZpZ2Ege1xuICBmb250LWZhbWlseTogXCJWaWdhXCIsIHNhbnMtc2VyaWY7XG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XG59XG5cbiVmb250LWRlZmF1bHQge1xuICBmb250LWZhbWlseTogXCJTb3VyY2UgU2FucyBQcm9cIiwgXCLjg5Ljg6njgq7jg47op5LjgrQgUHJvTlwiLCBcIkhpcmFnaW5vIEtha3UgR290aGljIFByb05cIiwgXCLjg6HjgqTjg6rjgqpcIiwgTWVpcnlvLCBzYW5zLXNlcmlmO1xuICBsZXR0ZXItc3BhY2luZzogMDtcbn1cblxuJWZvbnQtc2l6ZS1zbWFsbGVyIHtcbiAgQGluY2x1ZGUgZnooMTQpO1xufVxuXG4lZm9udC1zaXplLWJhc2Uge1xuICBAaW5jbHVkZSBmeigkZm9udC1zaXplLWJhc2UpO1xufVxuXG4lZm9udC1zaXplLWxhcmdlIHtcbiAgQGluY2x1ZGUgZnooMTgpO1xufVxuXG4lZm9udC1zaXplLWxhcmdlLXgge1xuICBAaW5jbHVkZSBmeigyNCk7XG59XG5cbiVmb250LXNpemUtbGFyZ2UteHgge1xuICBAaW5jbHVkZSBmeigzMik7XG59XG5cbiVmb250LXNpemUtbGFyZ2UteHh4IHtcbiAgQGluY2x1ZGUgZnooNDgpO1xufVxuXG4lcHJpbWFyeUhlYWRpbmcge1xuICBtYXJnaW4tdG9wOiAwO1xuICBAZXh0ZW5kICVmb250LXNpemUtbGFyZ2UteHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjM1O1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgQGluY2x1ZGUgbWVkaWEoc3ApIHtcbiAgICBAaW5jbHVkZSBmeigyNCk7XG4gIH1cbn1cblxuLyogLS0gJWJ1dHRvblNpbXBsZSAtLSAqL1xuJWMtYnV0dG9uIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwYWRkaW5nOiAzcHggLjVlbTtcbiAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkIGRhcmtlbigkY29sb3ItYWNjZW50LCAxMCUpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItYWNjZW50O1xuICBjb2xvcjogJGNvbG9yLWJhc2Utd2hpdGU7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgZm9udC1zaXplOiBlbSgyMCk7XG4gIEBleHRlbmQgJWZvbnQtdmlnYTtcbiAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgdHJhbnNpdGlvbjogYWxsIC4xcyBlYXNlO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59XG5cbiVidXR0b25TaW1wbGUge1xuICBAZXh0ZW5kICVjLWJ1dHRvbjtcbiAgQGV4dGVuZCAlZm9udC1kZWZhdWx0O1xuICBwYWRkaW5nOiAxcHggNXB4IDJweDtcbiAgYm9yZGVyLXdpZHRoOiAwIDFweCAwIDFweDtcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgY29sb3I6ICRjb2xvci1hY2NlbnQ7XG4gIGZvbnQtc2l6ZTogZW0oMTYpO1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQ6ICRjb2xvci1hY2NlbnQ7XG4gICAgY29sb3I6ICRjb2xvci1iYXNlLXdoaXRlO1xuICB9XG59XG4iLCIvKiBfY29ucG9uZW50LnNjc3NcbiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLmMtc2l0ZW5hbWUge1xuICBmb250LWZhbWlseTogXCJWaWdhXCIsIHNhbnMtc2VyaWY7XG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuXG4gIGEge1xuICAgIGNvbG9yOiAkY29sb3ItdGV4dDtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIH1cbn1cblxuLmMtaWNvbiB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cblxuLmMtZmxhdC1saXN0IHtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgcGFkZGluZy1sZWZ0OiAwO1xufVxuXG4uYy1mbGF0LWxpc3QgPiBsaSxcbi5jLWZsYXQtbGlzdCA+IGR0LFxuLmMtZmxhdC1saXN0ID4gZGQge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbi1yaWdodDogLjVyZW07XG5cbiAgJjpsYXN0LWNoaWxkIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gIH1cbn1cblxuLyogLS0gdGFnIC0tICovXG4uYy10YWcge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgbWFyZ2luLXJpZ2h0OiAuNWVtO1xuICBwYWRkaW5nOiAwIDEuNzVlbSAwIDFlbTtcbiAgYm9yZGVyLXJhZGl1czogZW0oMykgMCAwIGVtKDMpO1xuICBiYWNrZ3JvdW5kOiAkY29sb3ItYmFzZS1ncmF5O1xuICAmOmJlZm9yZSB7XG4gICAgY29udGVudDogXCIgXCI7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAuNGVtO1xuICAgIGJvdHRvbTogMDtcbiAgICBoZWlnaHQ6IGVtKDQpO1xuICAgIHdpZHRoOiBlbSg0KTtcbiAgICBtYXJnaW46IGF1dG87XG4gICAgYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItYm9keS1iZztcbiAgICBsaW5lLWhlaWdodDogMTtcbiAgfVxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiBcIiBcIjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGJvdHRvbTogMDtcbiAgICB3aWR0aDogMDtcbiAgICBoZWlnaHQ6IDA7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIGJvcmRlcjogMWVtIHNvbGlkIHRyYW5zcGFyZW50O1xuICAgIGJvcmRlci1yaWdodC1jb2xvcjogJGNvbG9yLWJvZHktYmc7XG4gIH1cbn1cblxuLyogLS0gU2l0ZU5hbWUgLS0qL1xuLnNpdGVOYW1lIHtcbiAgc3BhbiB7XG4gICAgbGV0dGVyLXNwYWNpbmc6IC0uMWVtO1xuICB9XG59IiwiLypcbiBfaW5kZXguc2Nzc1xuIFRPUOODmuODvOOCuOmWoumAo1xuICovXG5cbi5pbmRleCAuZy1oZWFkZXIge1xuICBoZWlnaHQ6IDQwdmg7XG5cbiAgLmMtc2l0ZW5hbWUge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIGhlaWdodDogJGxpbmUtaGVpZ2h0LWJhc2UgKiAxZW07XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZm9udC1zaXplOiAxMHZtaW47XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gICAgQGluY2x1ZGUgbWVkaWEoc3ApIHtcbiAgICAgIGZvbnQtc2l6ZTogMTJ2bWluO1xuICAgIH1cblxuICAgIGEge1xuICAgICAgdGV4dC1zaGFkb3c6IGxvbmdzaGFkb3coIzYwNTA0MCwgNyk7XG5cbiAgICAgICY6aG92ZXIge1xuICAgICAgICB0ZXh0LXNoYWRvdzogbG9uZ3NoYWRvdygjNjA1MDQwLCAxNCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLnNpdGVkZXNjcmlwdGlvbiB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogLjI1cmVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICByaWdodDogMXJlbTtcbiAgICBsZWZ0OiAxcmVtO1xuICB9XG59XG5cbi5zaXRlRGVzY3JpcHRpb24ge1xuICBtYXJnaW46IDA7XG59XG5cbi5yZWNlbnRBcnRpY2xlU2VjdGlvbiBoMSB7XG4gIEBleHRlbmQgJWZvbnQtc2l6ZS1sYXJnZS14O1xufVxuXG4ucmVjZW50LWFydGljbGUge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG5cbiAgJjphZnRlciB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBkaXNwbGF5OiB0YWJsZTtcbiAgICBjbGVhcjogYm90aDtcbiAgfVxufVxuXG4ucmVjZW50LWFydGljbGUtaXRlbSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGZsb2F0OiBsZWZ0O1xuICB3aWR0aDogNDcuNSU7XG4gIG1hcmdpbi1sZWZ0OiA1JTtcbiAgbWFyZ2luLWJvdHRvbTogMi41NXJlbTtcblxuICAmOm50aC1jaGlsZCgybisyKSB7XG4gICAgY2xlYXI6IGxlZnQ7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gIH1cblxuICBAaW5jbHVkZSBtZWRpYShzcCkge1xuICAgd2lkdGg6IDEwMCU7XG4gICBoZWlnaHQ6IGF1dG87XG4gICBtYXJnaW46IDAgMCAycmVtIDA7XG4gIH1cblxuICAmID4gYSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIHRyYW5zaXRpb246IGFsbCAuMnMgZWFzZTtcblxuICAgICY6aG92ZXIge1xuICAgICAgbWFyZ2luOiAtMWVtO1xuICAgICAgcGFkZGluZzogMWVtO1xuICAgICAgYm9yZGVyLXJhZGl1czogZW0oNSk7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItYmFzZS1ncmF5O1xuICAgIH1cbiAgfVxuXG59XG5cbi5yZWNlbnQtYXJ0aWNsZS1pdGVtLXB1Ymxpc2hlZC10aW1lIHtcbiAgZm9udC1mYW1pbHk6IFwiVmlnYVwiLCBzYW5zLXNlcmlmO1xuICBjb2xvcjogJGNvbG9yLXRleHQ7XG59XG5cbi5yZWNlbnQtYXJ0aWNsZS1pdGVtLXRpdGxlIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAuMnJlbSAwIC4zcmVtO1xuICBAZXh0ZW5kICVmb250LXNpemUtbGFyZ2U7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGxpbmUtaGVpZ2h0OiAxLjM1O1xufVxuXG4ucmVjZW50LWFydGljbGUtaXRlbTpmaXJzdC1jaGlsZCB7XG4gIGZsb2F0OiBub25lO1xuICB3aWR0aDogMTAwJTtcbiAgbWF4LXdpZHRoOiAkYm9keU1heFdpZHRoO1xuICBoZWlnaHQ6IGF1dG87XG4gIG1hcmdpbi1sZWZ0OiAwO1xuXG4gIEBpbmNsdWRlIG1lZGlhKG1pZCkge1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgIG1hcmdpbi1yaWdodDogYXV0bztcbiAgfVxuXG4gIC5yZWNlbnQtYXJ0aWNsZS1pdGVtLXRpdGxlIHtcbiAgICBtYXJnaW4tYm90dG9tOiAuMjVlbTtcbiAgICBAZXh0ZW5kICVmb250LXNpemUtbGFyZ2UteHg7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIGNvbG9yOiAkY29sb3ItYmFzZTtcblxuICAgIEBpbmNsdWRlIG1lZGlhKHNwKSB7XG4gICAgICBAaW5jbHVkZSBmeigyMik7XG4gICAgfVxuICB9XG5cbiAgLnJlY2VudC1hcnRpY2xlLWl0ZW0tdGl0bGUgPiBhIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIH1cbiAgLnJlY2VudC1hcnRpY2xlLWl0ZW0tZGVzY3JpcHRpb24ge1xuICAgIG1hcmdpbjogMDtcbiAgICBjb2xvcjogJGNvbG9yLXRleHQ7XG5cbiAgICBAaW5jbHVkZSBtZWRpYShzcCkge1xuICAgICAgQGluY2x1ZGUgZnooMTQpO1xuICAgIH1cbiAgfVxufSIsIi8qXG4gX2FydGljbGUuc2Nzc1xuIOiomOS6i+ODmuODvOOCuOOBruOCueOCv+OCpOODq1xuKi9cblxuLyogLS0gQXJ0aWNsZSAtLSAqL1xuLnAtYXJ0aWNsZS1oZWFkZXIge1xuICBtYXJnaW46IDRyZW0gMDtcbn1cblxuLnAtYXJ0aWNsZS10aXRsZSB7XG4gIEBleHRlbmQgJXByaW1hcnlIZWFkaW5nO1xufVxuXG4vKiAtLSAuYXJ0aWNsZUluZm8gLS0gKi9cbi5hcnRpY2xlLWluZm8ge1xuICBAZXh0ZW5kICVmb250LXNpemUtc21hbGxlcjtcbn1cblxuLmFydGljbGUtaW5mby1sYWJlbHtcbiAgZmxvYXQ6IGxlZnQ7XG59XG5cbi5hcnRpY2xlLWluZm8tbGFiZWwge1xuXG4gICY6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiOlwiO1xuICAgIG1hcmdpbjogMCAuMTVyZW07XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIH1cbn1cblxuLmFydGljbGUtaW5mby1wcm9wIHtcbiAgbWFyZ2luLWxlZnQ6IDA7XG59XG5cbi5hcnRpY2xlLXRhZyB7XG4gIEBleHRlbmQgLmMtdGFnO1xufVxuXG4vKiAtLSDmnKzmlofjgqjjg6rjgqIgLS0gKi9cbi5hcnRpY2xlLWJvZHkge1xuICAkYmFzZS1tYXJnaW46ICgkbGluZS1oZWlnaHQtYmFzZSAqIDFlbSk7XG5cbiAgaDIge1xuICAgIG1hcmdpbi10b3A6ICgkYmFzZS1tYXJnaW4gKiAyKTtcbiAgICBAaW5jbHVkZSBtZWRpYShzcCkge1xuICAgICAgbGluZS1oZWlnaHQ6ICgyMCAvICRmb250LXNpemUtYmFzZSk7XG4gICAgICBAaW5jbHVkZSBmeigyMCk7XG4gICAgfVxuICB9XG5cbiAgaDMge1xuICAgIG1hcmdpbi10b3A6ICgkYmFzZS1tYXJnaW4gKiAxLjUpO1xuICB9XG5cbiAgcCB7XG4gICAgbWFyZ2luOiAkYmFzZS1tYXJnaW4gMDtcbiAgfVxuXG4gIGgyLCBoMywgaDQsIGg1LCBoNiB7XG4gICAgJiArIHAge1xuICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICB9XG4gIH1cblxuICB1bCxcbiAgb2wge1xuICAgIHBhZGRpbmctbGVmdDogMWVtO1xuICB9XG5cbiAgZHQge1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICB9XG5cbiAgZGQge1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICB9XG5cbiAgZGQgKyBkdCB7XG4gICAgbWFyZ2luLXRvcDogLjVlbTtcbiAgfVxuXG4gIGhyIHtcbiAgICBtYXJnaW46IDEuNzVlbSAzZW07XG4gICAgYm9yZGVyOiAwO1xuICAgIGJvcmRlci10b3A6IC4yZW0gc29saWQgJGNvbG9yLWJhc2UtZ3JheTtcbiAgfVxuXG4gIHRhYmxlIHtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgbWluLXdpZHRoOiA1MCU7XG4gICAgbWFyZ2luOiAxZW0gYXV0byAxLjc1ZW07XG4gICAgQGluY2x1ZGUgbWVkaWEoc3ApIHtcbiAgICAgIEBpbmNsdWRlIGZ6KDE0KTtcbiAgICB9XG4gIH1cblxuICBjYXB0aW9uIHtcbiAgICBtYXJnaW4tYm90dG9tOiAuMjVlbTtcbiAgfVxuXG4gIHRkLCB0aCB7XG4gICAgcGFkZGluZzogMWVtO1xuICAgIEBpbmNsdWRlIG1lZGlhKHNwKSB7XG4gICAgICBwYWRkaW5nOiAuMjVlbTtcbiAgICB9XG4gIH1cblxuICB0aCB7XG4gICAgcGFkZGluZy1ib3R0b206IC41ZW07XG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICRjb2xvci1iYXNlO1xuICB9XG5cbiAgdGQge1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY29sb3ItYmFzZS1saW1lO1xuICB9XG5cbiAgaW1nIHtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gIH1cblxuICBpbWdbY2xhc3NePVwibXQtaW1hZ2VcIl0ge1xuICAgIGhlaWdodDogYXV0bztcbiAgfVxuXG4gIC5tdC1pbWFnZS1sZWZ0IHtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBtYXJnaW46IDAgJG1hcmdpbiAkbWFyZ2luIDA7XG4gICAgQGluY2x1ZGUgbWVkaWEoc3ApIHtcbiAgICAgIG1hcmdpbjogMCAkbWFyZ2luIC8gMiAkbWFyZ2luIC8gMiAwO1xuICAgIH1cbiAgfVxuXG4gIC5tdC1pbWFnZS1yaWdodCB7XG4gICAgZmxvYXQ6IHJpZ2h0O1xuICAgIG1hcmdpbjogMCAwICRtYXJnaW4gJG1hcmdpbjtcbiAgICBAaW5jbHVkZSBtZWRpYShzcCkge1xuICAgICAgbWFyZ2luOiAwIDAgJG1hcmdpbiAvIDIgJG1hcmdpbiAvIDI7XG4gICAgfVxuICB9XG5cbiAgLm10LWltYWdlLWNlbnRlciB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgbWF4LXdpZHRoOiAxMTElO1xuICAgIG1hcmdpbjogMCAtNSUgLjVlbTtcbiAgfVxuXG4gIGJsb2NrcXVvdGUge1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICBwYWRkaW5nLWxlZnQ6IDFlbTtcbiAgICBib3JkZXItbGVmdDogM3B4IHNvbGlkICRjb2xvci1iYXNlLWdyYXk7XG4gIH1cblxuICBjaXRlIHtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgfVxuXG4gIGNvZGUge1xuICAgIEBleHRlbmQgJWZvbnQtc2l6ZS1zbWFsbGVyO1xuICB9XG5cbiAgcHJlID4gY29kZSB7XG4gICAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICM5OTk7XG4gIH1cblxuICBmaWd1cmUge1xuICAgIG1hcmdpbi1ib3R0b206ICRiYXNlLW1hcmdpbjtcbiAgfVxuXG4gIHAgY29kZSB7XG4gICAgbWFyZ2luOiAwIDJweDtcbiAgICBwYWRkaW5nOiAwIDNweCAycHg7XG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgIGJhY2tncm91bmQ6ICRjb2xvci1iYXNlLWdyYXk7XG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgfVxufVxuXG4uY29kZSB7XG4gIGR0IHtcbiAgICBAZXh0ZW5kICVmb250LXZpZ2E7XG4gIH1cbiAgZGQge1xuICAgIG1hcmdpbjogMDtcbiAgfVxufVxuXG4vKiAtLSBRdW90ZSAtLSovXG4ucXVvdGUge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHBhZGRpbmc6IC41ZW0gMXJlbSAzZW0gMXJlbTtcbiAgYmFja2dyb3VuZDogJGNvbG9yLWJhc2UtZ3JheTtcbiAgZGQge1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICB9XG4gIGJsb2NrcXVvdGUge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgfVxuICAuY2l0ZSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiAxcmVtO1xuICAgIGJvdHRvbTogMXJlbTtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgfVxufVxuXG4uZW1iZWQtaWZyYW1lIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZy1ib3R0b206IDkgLyAxNiAqIDEwMCU7XG5cbiAgJiA+IGlmcmFtZSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICByaWdodDogMDtcbiAgICBib3R0b206IDA7XG4gICAgbGVmdDogMDtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbn1cblxuLyogLS0g5Y+C6ICD44Gr44GX44GfV2Vi44Oa44O844K4IC0tICovXG4ucmVmZXJlbmNlLXdlYi1wYWdlID4gZGQge1xuICBtYXJnaW46IDAgMCAuMjVyZW07XG59XG5cbi8vIHBlcm1hbGlua1xuLnAtYXJ0aWNsZS1wZXJtYWxpbmsge1xuICBtYXJnaW46ICRtYXJnaW4gMDtcbn1cblxuLnAtYXJ0aWNsZS1wZXJtYWxpbmstbGFiZWwge1xuICBtYXJnaW4tdG9wOiAkbWFyZ2luIC8gMjtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5wLWFydGljbGUtcGVybWFsaW5rLWxpbmsge1xuICBtYXJnaW4tbGVmdDogMDtcbiAgQGV4dGVuZCAlZm9udC1zaXplLXNtYWxsZXI7XG59XG5cbi8vIGFydGljbGUgYm90dG9tIGFkc1xuLmFydGljbGVBZHMge1xuICBtYXJnaW46IDJyZW0gMDtcbn1cblxuLmFydGljbGUtYWRzLXRpdGxlIHtcbiAgQGV4dGVuZCAlZm9udC1zaXplLXNtYWxsZXI7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY29sb3ItYmFzZS1ncmF5O1xufVxuXG4vLyBwYWdlclxuLnAtYXJ0aWNsZS1wYWdlciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luOiA0cmVtIGF1dG87XG59XG5cbi5wLWFydGljbGUtcGFnZXItbGFiZWwge1xuICB3aWR0aDogNTAlO1xuICBtYXJnaW4tdG9wOiAkbWFyZ2luIC8gMjtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5wLWFydGljbGUtcGFnZXItbGluayB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdpZHRoOiA1MCU7XG4gIG1hcmdpbi1sZWZ0OiAwO1xuICBAZXh0ZW5kICVmb250LXNpemUtc21hbGxlcjtcblxuICAmID4gYSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbn1cblxuLnAtYXJ0aWNsZS1wYWdlci1vbGRlciB7XG4gIHBhZGRpbmctcmlnaHQ6IDFyZW07XG5cbiAgQGluY2x1ZGUgbWVkaWEoc3ApIHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAuNXJlbTtcbiAgfVxufVxuXG4ucC1hcnRpY2xlLXBhZ2VyLW5ld2VyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIHJpZ2h0OiAwO1xuICBtYXJnaW4tdG9wOiAwO1xuICBwYWRkaW5nLWxlZnQ6IDFyZW07XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xuXG4gIEBpbmNsdWRlIG1lZGlhKHNwKSB7XG4gICAgcGFkZGluZy1sZWZ0OiAuNXJlbTtcbiAgfVxufVxuXG4ucC1hcnRpY2xlLXBhZ2VyLW5ld2VyLnAtYXJ0aWNsZS1wYWdlci1saW5rIHtcbiAgdG9wOiAxLjVyZW07XG59XG5cbiIsIi8qIF9hcmNoaXZlLnNjc3NcbiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLmFyY2hpdmVIZWFkZXIge31cblxuLmFyY2hpdmUtdGl0bGUge1xuICBAZXh0ZW5kICVwcmltYXJ5SGVhZGluZztcbn1cblxuLmFyY2hpdmUtbGlzdCB7XG4gIHBhZGRpbmctbGVmdDogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbn1cblxuLmFyY2hpdmUtbGlzdC1pdGVtIHtcbiAgLmFydGljbGUtaW5mbyB7XG4gICAgd2lkdGg6IGF1dG87XG4gICAgbWFyZ2luLWJvdHRvbTogLjVyZW07XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgfVxuICAuYXJ0aWNsZS1pbmZvLWxhYmVsOmZpcnN0LWNoaWxkIHtcbiAgICBtYXJnaW4tbGVmdDogMDtcbiAgfVxufVxuXG4uYXJjaGl2ZS1saXN0LWl0ZW0tdGl0bGUge1xuICBtYXJnaW46IDAgMCAycmVtO1xuICBAZXh0ZW5kICVmb250LXNpemUtbGFyZ2U7XG4gIGxpbmUtaGVpZ2h0OiAxLjM7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAmID4gYSB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICB9XG59XG4iLCIvKlxuIF9wYWdlLnNjc3NcbiDjgqbjgqfjg5bjg5rjg7zjgrjjga7jgrnjgr/jgqTjg6tcbiovXG5cbi8qIC0tIFBhZ2UgLS0gKi9cbi5wYWdlU2VjdGlvbkhlYWRlciB7XG4gIGgxIHtcbiAgICBAZXh0ZW5kICVwcmltYXJ5SGVhZGluZztcbiAgfVxufVxuXG4vKiAtLSBQYWdlIEFib3V0IC0tKi9cbi5wcm9maWxlUGhvdG8ge1xuICBmbG9hdDogbGVmdDtcbiAgd2lkdGg6IDI1JTtcbiAgaGVpZ2h0OiBhdXRvO1xuICBtYXgtd2lkdGg6IDllbTtcbiAgbWFyZ2luLXJpZ2h0OiAxZW07XG4gIG1hcmdpbi1ib3R0b206IDFlbTtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xufSIsIi8qIVxuXG5naXRodWIuY29tIHN0eWxlIChjKSBWYXNpbHkgUG9sb3ZueW92IDx2YXN0QHdoaXRlYW50cy5uZXQ+XG5cbiovXG5cbi5obGpzIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG92ZXJmbG93LXg6IGF1dG87XG4gIHBhZGRpbmc6IDAuNWVtO1xuICBjb2xvcjogIzMzMztcbiAgYmFja2dyb3VuZDogI2Y4ZjhmODtcbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiBub25lO1xufVxuXG4uaGxqcy1jb21tZW50LFxuLmRpZmYgLmhsanMtaGVhZGVyLFxuLmhsanMtamF2YWRvYyB7XG4gIGNvbG9yOiAjOTk4O1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbi5obGpzLWtleXdvcmQsXG4uY3NzIC5ydWxlIC5obGpzLWtleXdvcmQsXG4uaGxqcy13aW51dGlscyxcbi5uZ2lueCAuaGxqcy10aXRsZSxcbi5obGpzLXN1YnN0LFxuLmhsanMtcmVxdWVzdCxcbi5obGpzLXN0YXR1cyB7XG4gIGNvbG9yOiAjMzMzO1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLmhsanMtbnVtYmVyLFxuLmhsanMtaGV4Y29sb3IsXG4ucnVieSAuaGxqcy1jb25zdGFudCB7XG4gIGNvbG9yOiAjMDA4MDgwO1xufVxuXG4uaGxqcy1zdHJpbmcsXG4uaGxqcy10YWcgLmhsanMtdmFsdWUsXG4uaGxqcy1waHBkb2MsXG4uaGxqcy1kYXJ0ZG9jLFxuLnRleCAuaGxqcy1mb3JtdWxhIHtcbiAgY29sb3I6ICNkMTQ7XG59XG5cbi5obGpzLXRpdGxlLFxuLmhsanMtaWQsXG4uc2NzcyAuaGxqcy1wcmVwcm9jZXNzb3Ige1xuICBjb2xvcjogIzkwMDtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5obGpzLWxpc3QgLmhsanMta2V5d29yZCxcbi5obGpzLXN1YnN0IHtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbn1cblxuLmhsanMtY2xhc3MgLmhsanMtdGl0bGUsXG4uaGxqcy10eXBlLFxuLnZoZGwgLmhsanMtbGl0ZXJhbCxcbi50ZXggLmhsanMtY29tbWFuZCB7XG4gIGNvbG9yOiAjNDU4O1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLmhsanMtdGFnLFxuLmhsanMtdGFnIC5obGpzLXRpdGxlLFxuLmhsanMtcnVsZXMgLmhsanMtcHJvcGVydHksXG4uZGphbmdvIC5obGpzLXRhZyAuaGxqcy1rZXl3b3JkIHtcbiAgY29sb3I6ICMwMDAwODA7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG59XG5cbi5obGpzLWF0dHJpYnV0ZSxcbi5obGpzLXZhcmlhYmxlLFxuLmxpc3AgLmhsanMtYm9keSB7XG4gIGNvbG9yOiAjMDA4MDgwO1xufVxuXG4uaGxqcy1yZWdleHAge1xuICBjb2xvcjogIzAwOTkyNjtcbn1cblxuLmhsanMtc3ltYm9sLFxuLnJ1YnkgLmhsanMtc3ltYm9sIC5obGpzLXN0cmluZyxcbi5saXNwIC5obGpzLWtleXdvcmQsXG4uY2xvanVyZSAuaGxqcy1rZXl3b3JkLFxuLnNjaGVtZSAuaGxqcy1rZXl3b3JkLFxuLnRleCAuaGxqcy1zcGVjaWFsLFxuLmhsanMtcHJvbXB0IHtcbiAgY29sb3I6ICM5OTAwNzM7XG59XG5cbi5obGpzLWJ1aWx0X2luIHtcbiAgY29sb3I6ICMwMDg2YjM7XG59XG5cbi5obGpzLXByZXByb2Nlc3Nvcixcbi5obGpzLXByYWdtYSxcbi5obGpzLXBpLFxuLmhsanMtZG9jdHlwZSxcbi5obGpzLXNoZWJhbmcsXG4uaGxqcy1jZGF0YSB7XG4gIGNvbG9yOiAjOTk5O1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLmhsanMtZGVsZXRpb24ge1xuICBiYWNrZ3JvdW5kOiAjZmRkO1xufVxuXG4uaGxqcy1hZGRpdGlvbiB7XG4gIGJhY2tncm91bmQ6ICNkZmQ7XG59XG5cbi5kaWZmIC5obGpzLWNoYW5nZSB7XG4gIGJhY2tncm91bmQ6ICMwMDg2YjM7XG59XG5cbi5obGpzLWNodW5rIHtcbiAgY29sb3I6ICNhYWE7XG59XG4iXX0= */