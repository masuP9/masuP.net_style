@charset "UTF-8";
/*! style.css https://github.com/masuP9/masuP.net_style */
/*! normalize.css v3.0.0 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9.
 * Hide the `template` element in IE, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0;
}

/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8+, and Opera
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/* _layout.scss
   ========================================================================== */
.g-header .c-sitename, .main, .globalFooter {
  max-width: 44rem;
  width: 70%;
  margin-right: auto;
  margin-left: auto;
}
@media screen and (max-width: 48em) {
  .g-header .c-sitename, .main, .globalFooter {
    width: 90%;
    margin-right: 5%;
    margin-left: 5%;
  }
}

.g-header {
  position: relative;
  margin-bottom: 2rem;
}
.g-header .c-sitename > a {
  text-shadow: 0 0 transparent;
  transition: text-shadow .4s ease;
  color: #E4572E;
}
.g-header .c-sitename > a:hover {
  text-shadow: 0 0 #543, 1px 1px #543, 2px 2px #543, 3px 3px #543, 4px 4px #543, 5px 5px #543, 6px 6px #543, 7px 7px #543;
}

.index .g-header {
  height: 40vh;
}
.index .g-header .c-sitename {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  margin: auto;
  height: 1.625em;
  width: 100%;
  font-size: 10vmin;
  text-align: center;
}
@media screen and (max-width: 48em) {
  .index .g-header .c-sitename {
    font-size: 12vmin;
  }
}
.index .g-header .sitedescription {
  position: absolute;
  bottom: .25rem;
  text-align: center;
  right: 1rem;
  left: 1rem;
}

.main {
  margin-bottom: 2rem;
}

.globalFooter {
  position: relative;
  padding-top: 1rem;
  padding-bottom: 1rem;
  margin-top: 2rem;
}
.globalFooter .sns-list {
  position: absolute;
  bottom: 1rem;
  right: 0;
  margin: 0;
  text-align: right;
}
.globalFooter .sns-list > li {
  margin-left: 1rem;
}

.back2top {
  text-align: center;
}
.back2top > a {
  display: inline-block;
  height: 1.625em;
  width: 1.625em;
  border: 1px solid #E4572E;
  border-radius: 51%;
  text-decoration: none;
  vertical-align: middle;
}

.site-nav {
  margin: 1rem 0;
  padding: 0;
  list-style: none;
}
.site-nav > li {
  text-transform: uppercase;
}
.site-nav > li > a {
  text-decoration: none;
}
.site-nav > li > a:hover {
  text-decoration: underline;
}

.copyright {
  margin: .5em 0;
}
.copyright a,
.copyright a:visited {
  color: #2A2B2E;
  text-decoration: none;
}

/* _core.scss
   ========================================================================== */
html {
  background: #fdfff8;
  color: #2A2B2E;
  font-family: "Source Sans Pro", "ヒラギノ角ゴ ProN", "Hiragino Kaku Gothic ProN", "メイリオ", Meiryo, sans-serif;
  font-size: 1em;
  line-height: 1.625;
}

a {
  color: #c5401a;
  text-decoration: underline;
  transition: color .15s ease;
}

a:hover {
  color: #e4572e;
  text-decoration: none;
}

a:active {
  position: relative;
  top: 1px;
}

a:visited {
  color: #983214;
}

h1, h2, h3, h4, h5, h6 {
  clear: both;
  -webkit-font-feature-settings: "kern" 1;
          font-feature-settings: "kern" 1;
  font-variant: proportional-width;
}

abbr[title] {
  border-bottom-width: 0;
}

figure {
  margin: 0;
}

/* -- Source Code -- */
code {
  font-family: "Source Code Pro", monospace;
}

.code dt {
  font-family: "Viga", sans-serif;
  letter-spacing: 1px;
}

figcaption, .recent-article-item:first-child .recent-article-item-description, .article-info, .article-body p code, .code dd, .p-article-permalink-link, .article-ads-title, .p-article-pager-link {
  font-size: 0.875em;
}

.recent-article-item-title, .archive-list-item-title {
  font-size: 1.125em;
}

.back2top > a, .recentArticleSection h1 {
  font-size: 1.5em;
}

.p-article-title, .archive-title, .pageSectionHeader h1, .recent-article-item:first-child .recent-article-item-title {
  font-size: 2em;
}

.p-article-title, .archive-title, .pageSectionHeader h1 {
  margin-top: 0;
  line-height: 1.1;
  -webkit-font-smoothing: antialiased;
}
@media screen and (max-width: 48em) {
  .p-article-title, .archive-title, .pageSectionHeader h1 {
    font-size: 1.5em;
  }
}

/* -- %buttonSimple -- */
/* _conponent.scss
  ========================================================================== */
.c-sitename {
  font-family: "Viga", sans-serif;
  -webkit-font-smoothing: antialiased;
}
.c-sitename a {
  color: #2A2B2E;
  text-decoration: none;
}

.c-icon {
  display: inline-block;
}

.c-flat-list, .site-nav {
  list-style: none;
  padding-left: 0;
}

.c-flat-list > li, .site-nav > li,
.c-flat-list > dt,
.site-nav > dt,
.c-flat-list > dd,
.site-nav > dd {
  display: inline-block;
  margin-right: .5rem;
}
.c-flat-list > li:last-child, .site-nav > li:last-child,
.c-flat-list > dt:last-child,
.site-nav > dt:last-child,
.c-flat-list > dd:last-child,
.site-nav > dd:last-child {
  margin-right: 0;
}

/* -- tag -- */
.c-tag, .article-tag {
  position: relative;
  display: inline-block;
  margin-right: .5em;
  padding: 0 1.75em 0 1em;
  border-radius: 0.1875em 0 0 0.1875em;
  background: #eaeaea;
}
.c-tag:before, .article-tag:before {
  content: " ";
  display: block;
  position: absolute;
  top: 0;
  left: .4em;
  bottom: 0;
  height: 0.25em;
  width: 0.25em;
  margin: auto;
  border-radius: 100%;
  background-color: #fdfff8;
  line-height: 1;
}
.c-tag:after, .article-tag:after {
  content: " ";
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  width: 0;
  height: 0;
  margin: auto;
  border: 1em solid transparent;
  border-right-color: #fdfff8;
}

/* -- SiteName --*/
.siteName span {
  letter-spacing: -.1em;
}

/*
 _index.scss
 TOPページ関連
 */
.siteDescription {
  margin: 0;
}

.recent-article {
  margin: 0;
  padding: 0;
  list-style: none;
  overflow: hidden;
}

.recent-article-item {
  box-sizing: border-box;
  float: left;
  width: 47.5%;
  margin-left: 5%;
  margin-bottom: 2rem;
}
.recent-article-item:nth-child(2n+2) {
  clear: left;
  margin-left: 0;
}
@media screen and (max-width: 48em) {
  .recent-article-item {
    width: 100%;
    height: auto;
    margin: 0 0 1.5rem 0;
  }
}
.recent-article-item > a {
  display: block;
  text-decoration: none;
  padding: 1rem;
  transition: all .2s ease;
}
.recent-article-item > a:hover {
  border-radius: 0.3125em;
  background-color: #eaeaea;
}

.recent-article-item-published-time {
  font-family: "Viga", sans-serif;
  color: #2A2B2E;
}

.recent-article-item-title {
  margin: 0;
  padding: .2rem 0 .3rem;
  font-weight: normal;
  line-height: 1.2;
  text-decoration: underline;
}

.recent-article-item:first-child {
  width: 100%;
  height: auto;
  max-width: 44rem;
  float: none;
  margin-left: 0;
  margin-bottom: 2rem;
}
@media screen and (min-width: 980px) {
  .recent-article-item:first-child {
    margin-left: auto;
    margin-right: auto;
  }
}
.recent-article-item:first-child .recent-article-item-title {
  font-weight: bold;
  text-decoration: none;
  color: #E4572E;
  text-shadow: 0 0 #fff, 1px 1px #fff, 2px 2px #fff, 3px 3px #fff;
}
@media screen and (max-width: 48em) {
  .recent-article-item:first-child .recent-article-item-title {
    font-size: 1.375em;
  }
}
.recent-article-item:first-child .recent-article-item-title > a {
  text-decoration: none;
}
.recent-article-item:first-child .recent-article-item-description {
  margin: 0;
  color: #2A2B2E;
}

/*
 _article.scss
 記事ページのスタイル
*/
/* -- Article -- */
.p-article-header {
  margin: 4rem 0;
}

/* -- .articleInfo -- */
.article-info-label {
  float: left;
}

.article-info-label:after {
  content: ":";
  margin: 0 .15rem;
  font-weight: bold;
}

.article-info-prop {
  margin-left: 0;
}

/* -- 本文エリア -- */
.article-body h2 {
  margin-top: 3rem;
}
@media screen and (max-width: 48em) {
  .article-body h2 {
    line-height: 1.25;
    font-size: 1.25em;
  }
}
.article-body p {
  margin: 1.5em 0;
}
.article-body p code {
  margin: 0 2px;
  padding: 0 3px 2px;
  border-radius: 3px;
  background: #eaeaea;
  vertical-align: top;
}
.article-body ul, .article-body ol {
  padding-left: 1em;
}
.article-body dt {
  font-weight: bold;
}
.article-body dd {
  margin-left: 0;
}
.article-body dd + dt {
  margin-top: .5em;
}
.article-body hr {
  margin: 1.75em 3em;
  border: 0;
  border-top: 0.2em solid #eaeaea;
}
.article-body table {
  max-width: 100%;
  min-width: 50%;
  margin: 1em auto 1.75em;
}
@media screen and (max-width: 48em) {
  .article-body table {
    font-size: 0.875em;
  }
}
.article-body caption {
  margin-bottom: .25em;
}
.article-body td, .article-body th {
  padding: 1em;
}
@media screen and (max-width: 48em) {
  .article-body td, .article-body th {
    padding: .25em;
  }
}
.article-body th {
  padding-bottom: .5em;
  border-bottom: 2px solid #E4572E;
}
.article-body td {
  border-bottom: 1px solid #85CB33;
}
.article-body img {
  max-width: 100%;
}
.article-body img[class^="mt-image"] {
  height: auto;
}
.article-body .mt-image-left {
  float: left;
  margin: 0 2rem 2rem 0;
}
@media screen and (max-width: 48em) {
  .article-body .mt-image-left {
    margin: 0 1rem 1rem 0;
  }
}
.article-body .mt-image-right {
  float: right;
  margin: 0 0 2rem 2rem;
}
@media screen and (max-width: 48em) {
  .article-body .mt-image-right {
    margin: 0 0 1rem 1rem;
  }
}
.article-body .mt-image-center {
  display: block;
  max-width: 100%;
  margin: 0 auto .5em;
}
.article-body blockquote {
  margin-left: 0;
  margin-right: 0;
  padding-left: 1em;
  border-left: 3px solid #eaeaea;
}
.article-body cite {
  text-align: right;
}

.code dd {
  margin: 0;
}

/* -- Quote --*/
.quote {
  position: relative;
  padding: .5em 1rem 3em 1rem;
  background: #eaeaea;
}
.quote dd {
  margin-left: 0;
}
.quote blockquote {
  position: relative;
  margin: 0;
  padding: 0;
}
.quote .cite {
  position: absolute;
  right: 1rem;
  bottom: 1rem;
  text-align: right;
}

.embed-iframe {
  position: relative;
  width: 100%;
  padding-bottom: 56.25%;
}
.embed-iframe > iframe {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  height: 100%;
  width: 100%;
}

/* -- 参考にしたWebページ -- */
.reference-web-page > dd {
  margin: 0 0 .25rem;
}

.p-article-permalink {
  margin: 2rem 0;
}

.p-article-permalink-label {
  margin-top: 1rem;
  font-weight: bold;
}

.p-article-permalink-link {
  margin-left: 0;
}

.articleAds {
  margin: 2rem 0;
}

.article-ads-title {
  border-bottom: 1px solid #eaeaea;
}

.p-article-pager {
  position: relative;
  margin: 4rem auto;
}

.p-article-pager-label {
  width: 50%;
  margin-top: 1rem;
  font-weight: bold;
}

.p-article-pager-link {
  box-sizing: border-box;
  width: 50%;
  margin-left: 0;
}

.p-article-pager-older {
  padding-right: 1rem;
}
@media screen and (max-width: 48em) {
  .p-article-pager-older {
    padding-right: .5rem;
  }
}

.p-article-pager-newer {
  position: absolute;
  top: 0;
  right: 0;
  margin-top: 0;
  padding-left: 1rem;
  text-align: right;
}
@media screen and (max-width: 48em) {
  .p-article-pager-newer {
    padding-left: .5rem;
  }
}

.p-article-pager-newer.p-article-pager-link {
  top: 1.5rem;
}

/* _archive.scss
  ========================================================================== */
.archive-list {
  padding-left: 0;
  list-style: none;
}

.archive-list-item .article-info {
  width: auto;
  margin-bottom: .5rem;
  text-align: left;
}
.archive-list-item .article-info-label:first-child {
  margin-left: 0;
}

.archive-list-item-title {
  margin: 0 0 2rem;
  line-height: 1.3;
  font-weight: bold;
}
.archive-list-item-title > a {
  text-decoration: none;
}

/*
 _page.scss
 ウェブページのスタイル
*/
/* -- Page -- */
/* -- Page About --*/
.profilePhoto {
  float: left;
  width: 25%;
  height: auto;
  max-width: 9em;
  margin-right: 1em;
  margin-bottom: 1em;
  border-radius: 50%;
}

/*!

github.com style (c) Vasily Polovnyov <vast@whiteants.net>

*/
.hljs {
  display: block;
  overflow-x: auto;
  padding: 0.5em;
  color: #333;
  background: #f8f8f8;
  -webkit-text-size-adjust: none;
}

.hljs-comment,
.diff .hljs-header,
.hljs-javadoc {
  color: #998;
  font-style: italic;
}

.hljs-keyword,
.css .rule .hljs-keyword,
.hljs-winutils,
.nginx .hljs-title,
.hljs-subst,
.hljs-request,
.hljs-status {
  color: #333;
  font-weight: bold;
}

.hljs-number,
.hljs-hexcolor,
.ruby .hljs-constant {
  color: #008080;
}

.hljs-string,
.hljs-tag .hljs-value,
.hljs-phpdoc,
.hljs-dartdoc,
.tex .hljs-formula {
  color: #d14;
}

.hljs-title,
.hljs-id,
.scss .hljs-preprocessor {
  color: #900;
  font-weight: bold;
}

.hljs-list .hljs-keyword,
.hljs-subst {
  font-weight: normal;
}

.hljs-class .hljs-title,
.hljs-type,
.vhdl .hljs-literal,
.tex .hljs-command {
  color: #458;
  font-weight: bold;
}

.hljs-tag,
.hljs-tag .hljs-title,
.hljs-rules .hljs-property,
.django .hljs-tag .hljs-keyword {
  color: #000080;
  font-weight: normal;
}

.hljs-attribute,
.hljs-variable,
.lisp .hljs-body {
  color: #008080;
}

.hljs-regexp {
  color: #009926;
}

.hljs-symbol,
.ruby .hljs-symbol .hljs-string,
.lisp .hljs-keyword,
.clojure .hljs-keyword,
.scheme .hljs-keyword,
.tex .hljs-special,
.hljs-prompt {
  color: #990073;
}

.hljs-built_in {
  color: #0086b3;
}

.hljs-preprocessor,
.hljs-pragma,
.hljs-pi,
.hljs-doctype,
.hljs-shebang,
.hljs-cdata {
  color: #999;
  font-weight: bold;
}

.hljs-deletion {
  background: #fdd;
}

.hljs-addition {
  background: #dfd;
}

.diff .hljs-change {
  background: #0086b3;
}

.hljs-chunk {
  color: #aaa;
}



/*# sourceMappingURL=data:application/json;base64, */
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlLmNzcyIsIi9zb3VyY2UvZm91bmRhdGlvbi9fbm9ybWFsaXplLnNjc3MiLCIvc291cmNlL2ZvdW5kYXRpb24vX2xheW91dC5zY3NzIiwiL3NvdXJjZS9mb3VuZGF0aW9uL19taXhpbi5zY3NzIiwiL3NvdXJjZS9mb3VuZGF0aW9uL192YXJpYWJsZS5zY3NzIiwiL3NvdXJjZS9mb3VuZGF0aW9uL19mdW5jdGlvbi5zY3NzIiwiL3NvdXJjZS9mb3VuZGF0aW9uL19jb3JlLnNjc3MiLCIvc291cmNlL2ZvdW5kYXRpb24vX2V4dGVuZHMuc2NzcyIsIi9zb3VyY2Uvb2JqZWN0L2NvbXBvbmVudC9fY29tcG9uZW50LnNjc3MiLCIvc291cmNlL29iamVjdC9wcm9qZWN0L19pbmRleC5zY3NzIiwiL3NvdXJjZS9vYmplY3QvcHJvamVjdC9fYXJ0aWNsZS5zY3NzIiwiL3NvdXJjZS9vYmplY3QvcHJvamVjdC9fYXJjaGl2ZS5zY3NzIiwiL3NvdXJjZS9vYmplY3QvcHJvamVjdC9fcGFnZS5zY3NzIiwiL3NvdXJjZS9saWIvaGlnaGxpZ2h0anMvX2dpdGh1Yi5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQjtBQUNqQiwwREFBMEQ7QUFDMUQsNERBQTREO0FBQzVEOzs7O0dBSUc7QUNDSDtFQUNFLHdCQUF1QjtFREN2QixPQUFPO0VDQVAsMkJBQTBCO0VERTFCLE9BQU87RUNEUCwrQkFBOEI7RURHOUIsT0FBTztDQUNSOztBQUVEOztHQUVHO0FDREg7RUFDRSxVQUFTO0NER1Y7O0FBRUQ7Z0ZBQ2dGO0FBQ2hGOztHQUVHO0FDQ0g7Ozs7Ozs7Ozs7OztFQVlFLGVBQWM7Q0RDZjs7QUFFRDs7O0dBR0c7QUNFSDs7OztFQUlFLHNCQUFxQjtFREFyQixPQUFPO0VDQ1AseUJBQXdCO0VEQ3hCLE9BQU87Q0FDUjs7QUFFRDs7O0dBR0c7QUNDSDtFQUNFLGNBQWE7RUFDYixVQUFTO0NEQ1Y7O0FBRUQ7OztHQUdHO0FDRUg7O0VBRUUsY0FBYTtD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Qjs7QWE1Z0NEOzs7RUFHRSxlQUFjO0NiK2dDZjs7QWE1Z0NEOzs7OztFQUtFLFlBQVc7Q2IrZ0NaOztBYTVnQ0Q7OztFQUdFLFlBQVc7RUFDWCxrQkFBaUI7Q2IrZ0NsQjs7QWE1Z0NEOztFQUVFLG9CQUFtQjtDYitnQ3BCOztBYTVnQ0Q7Ozs7RUFJRSxZQUFXO0VBQ1gsa0JBQWlCO0NiK2dDbEI7O0FhNWdDRDs7OztFQUlFLGVBQWM7RUFDZCxvQkFBbUI7Q2IrZ0NwQjs7QWE1Z0NEOzs7RUFHRSxlQUFjO0NiK2dDZjs7QWE1Z0NEO0VBQ0UsZUFBYztDYitnQ2Y7O0FhNWdDRDs7Ozs7OztFQU9FLGVBQWM7Q2IrZ0NmOztBYTVnQ0Q7RUFDRSxlQUFjO0NiK2dDZjs7QWE1Z0NEOzs7Ozs7RUFNRSxZQUFXO0VBQ1gsa0JBQWlCO0NiK2dDbEI7O0FhNWdDRDtFQUNFLGlCQUFnQjtDYitnQ2pCOztBYTVnQ0Q7RUFDRSxpQkFBZ0I7Q2IrZ0NqQjs7QWE1Z0NEO0VBQ0Usb0JBQW1CO0NiK2dDcEI7O0FhNWdDRDtFQUNFLFlBQVc7Q2IrZ0NaOzs7O0FBSUQsNjk5Q0FBNjk5QyIsImZpbGUiOiI8bm8tb3V0cHV0PiIsInNvdXJjZXNDb250ZW50IjpbIkBjaGFyc2V0IFwiVVRGLThcIjtcbi8qISBzdHlsZS5jc3MgaHR0cHM6Ly9naXRodWIuY29tL21hc3VQOS9tYXN1UC5uZXRfc3R5bGUgKi9cbi8qISBub3JtYWxpemUuY3NzIHYzLjAuMCB8IE1JVCBMaWNlbnNlIHwgZ2l0LmlvL25vcm1hbGl6ZSAqL1xuLyoqXG4gKiAxLiBTZXQgZGVmYXVsdCBmb250IGZhbWlseSB0byBzYW5zLXNlcmlmLlxuICogMi4gUHJldmVudCBpT1MgdGV4dCBzaXplIGFkanVzdCBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2UsIHdpdGhvdXQgZGlzYWJsaW5nXG4gKiAgICB1c2VyIHpvb20uXG4gKi9cbmh0bWwge1xuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcbiAgLyogMSAqL1xuICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLyogMiAqL1xuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XG4gIC8qIDIgKi9cbn1cblxuLyoqXG4gKiBSZW1vdmUgZGVmYXVsdCBtYXJnaW4uXG4gKi9cbmJvZHkge1xuICBtYXJnaW46IDA7XG59XG5cbi8qIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIENvcnJlY3QgYGJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGluIElFIDgvOS5cbiAqL1xuYXJ0aWNsZSxcbmFzaWRlLFxuZGV0YWlscyxcbmZpZ2NhcHRpb24sXG5maWd1cmUsXG5mb290ZXIsXG5oZWFkZXIsXG5oZ3JvdXAsXG5tYWluLFxubmF2LFxuc2VjdGlvbixcbnN1bW1hcnkge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IGBpbmxpbmUtYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUUgOC85LlxuICogMi4gTm9ybWFsaXplIHZlcnRpY2FsIGFsaWdubWVudCBvZiBgcHJvZ3Jlc3NgIGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxuICovXG5hdWRpbyxcbmNhbnZhcyxcbnByb2dyZXNzLFxudmlkZW8ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIC8qIDEgKi9cbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICAvKiAyICovXG59XG5cbi8qKlxuICogUHJldmVudCBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nIGBhdWRpb2Agd2l0aG91dCBjb250cm9scy5cbiAqIFJlbW92ZSBleGNlc3MgaGVpZ2h0IGluIGlPUyA1IGRldmljZXMuXG4gKi9cbmF1ZGlvOm5vdChbY29udHJvbHNdKSB7XG4gIGRpc3BsYXk6IG5vbmU7XG4gIGhlaWdodDogMDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIGBbaGlkZGVuXWAgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkuXG4gKiBIaWRlIHRoZSBgdGVtcGxhdGVgIGVsZW1lbnQgaW4gSUUsIFNhZmFyaSwgYW5kIEZpcmVmb3ggPCAyMi5cbiAqL1xuW2hpZGRlbl0sXG50ZW1wbGF0ZSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi8qIExpbmtzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBjb2xvciBmcm9tIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuYSB7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xufVxuXG4vKipcbiAqIEltcHJvdmUgcmVhZGFiaWxpdHkgd2hlbiBmb2N1c2VkIGFuZCBhbHNvIG1vdXNlIGhvdmVyZWQgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5hOmFjdGl2ZSxcbmE6aG92ZXIge1xuICBvdXRsaW5lOiAwO1xufVxuXG4vKiBUZXh0LWxldmVsIHNlbWFudGljc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOSwgU2FmYXJpIDUsIGFuZCBDaHJvbWUuXG4gKi9cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxlIHNldCB0byBgYm9sZGVyYCBpbiBGaXJlZm94IDQrLCBTYWZhcmkgNSwgYW5kIENocm9tZS5cbiAqL1xuYixcbnN0cm9uZyB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lLlxuICovXG5kZm4ge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbi8qKlxuICogQWRkcmVzcyB2YXJpYWJsZSBgaDFgIGZvbnQtc2l6ZSBhbmQgbWFyZ2luIHdpdGhpbiBgc2VjdGlvbmAgYW5kIGBhcnRpY2xlYFxuICogY29udGV4dHMgaW4gRmlyZWZveCA0KywgU2FmYXJpIDUsIGFuZCBDaHJvbWUuXG4gKi9cbmgxIHtcbiAgZm9udC1zaXplOiAyZW07XG4gIG1hcmdpbjogMC42N2VtIDA7XG59XG5cbi8qKlxuICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS5cbiAqL1xubWFyayB7XG4gIGJhY2tncm91bmQ6ICNmZjA7XG4gIGNvbG9yOiAjMDAwO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGFuZCB2YXJpYWJsZSBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5zbWFsbCB7XG4gIGZvbnQtc2l6ZTogODAlO1xufVxuXG4vKipcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGFmZmVjdGluZyBgbGluZS1oZWlnaHRgIGluIGFsbCBicm93c2Vycy5cbiAqL1xuc3ViLFxuc3VwIHtcbiAgZm9udC1zaXplOiA3NSU7XG4gIGxpbmUtaGVpZ2h0OiAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07XG59XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTtcbn1cblxuLyogRW1iZWRkZWQgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogUmVtb3ZlIGJvcmRlciB3aGVuIGluc2lkZSBgYWAgZWxlbWVudCBpbiBJRSA4LzkuXG4gKi9cbmltZyB7XG4gIGJvcmRlcjogMDtcbn1cblxuLyoqXG4gKiBDb3JyZWN0IG92ZXJmbG93IGRpc3BsYXllZCBvZGRseSBpbiBJRSA5LlxuICovXG5zdmc6bm90KDpyb290KSB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi8qIEdyb3VwaW5nIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIEFkZHJlc3MgbWFyZ2luIG5vdCBwcmVzZW50IGluIElFIDgvOSBhbmQgU2FmYXJpIDUuXG4gKi9cbmZpZ3VyZSB7XG4gIG1hcmdpbjogMWVtIDQwcHg7XG59XG5cbi8qKlxuICogQWRkcmVzcyBkaWZmZXJlbmNlcyBiZXR3ZWVuIEZpcmVmb3ggYW5kIG90aGVyIGJyb3dzZXJzLlxuICovXG5ociB7XG4gIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICBoZWlnaHQ6IDA7XG59XG5cbi8qKlxuICogQ29udGFpbiBvdmVyZmxvdyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbnByZSB7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4vKipcbiAqIEFkZHJlc3Mgb2RkIGBlbWAtdW5pdCBmb250IHNpemUgcmVuZGVyaW5nIGluIGFsbCBicm93c2Vycy5cbiAqL1xuY29kZSxcbmtiZCxcbnByZSxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIGZvbnQtc2l6ZTogMWVtO1xufVxuXG4vKiBGb3Jtc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogS25vd24gbGltaXRhdGlvbjogYnkgZGVmYXVsdCwgQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWCBhbGxvdyB2ZXJ5IGxpbWl0ZWRcbiAqIHN0eWxpbmcgb2YgYHNlbGVjdGAsIHVubGVzcyBhIGBib3JkZXJgIHByb3BlcnR5IGlzIHNldC5cbiAqL1xuLyoqXG4gKiAxLiBDb3JyZWN0IGNvbG9yIG5vdCBiZWluZyBpbmhlcml0ZWQuXG4gKiAgICBLbm93biBpc3N1ZTogYWZmZWN0cyBjb2xvciBvZiBkaXNhYmxlZCBlbGVtZW50cy5cbiAqIDIuIENvcnJlY3QgZm9udCBwcm9wZXJ0aWVzIG5vdCBiZWluZyBpbmhlcml0ZWQuXG4gKiAzLiBBZGRyZXNzIG1hcmdpbnMgc2V0IGRpZmZlcmVudGx5IGluIEZpcmVmb3ggNCssIFNhZmFyaSA1LCBhbmQgQ2hyb21lLlxuICovXG5idXR0b24sXG5pbnB1dCxcbm9wdGdyb3VwLFxuc2VsZWN0LFxudGV4dGFyZWEge1xuICBjb2xvcjogaW5oZXJpdDtcbiAgLyogMSAqL1xuICBmb250OiBpbmhlcml0O1xuICAvKiAyICovXG4gIG1hcmdpbjogMDtcbiAgLyogMyAqL1xufVxuXG4vKipcbiAqIEFkZHJlc3MgYG92ZXJmbG93YCBzZXQgdG8gYGhpZGRlbmAgaW4gSUUgOC85LzEwLlxuICovXG5idXR0b24ge1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIGluY29uc2lzdGVudCBgdGV4dC10cmFuc2Zvcm1gIGluaGVyaXRhbmNlIGZvciBgYnV0dG9uYCBhbmQgYHNlbGVjdGAuXG4gKiBBbGwgb3RoZXIgZm9ybSBjb250cm9sIGVsZW1lbnRzIGRvIG5vdCBpbmhlcml0IGB0ZXh0LXRyYW5zZm9ybWAgdmFsdWVzLlxuICogQ29ycmVjdCBgYnV0dG9uYCBzdHlsZSBpbmhlcml0YW5jZSBpbiBGaXJlZm94LCBJRSA4KywgYW5kIE9wZXJhXG4gKiBDb3JyZWN0IGBzZWxlY3RgIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3guXG4gKi9cbmJ1dHRvbixcbnNlbGVjdCB7XG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xufVxuXG4vKipcbiAqIDEuIEF2b2lkIHRoZSBXZWJLaXQgYnVnIGluIEFuZHJvaWQgNC4wLiogd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gXG4gKiAgICBhbmQgYHZpZGVvYCBjb250cm9scy5cbiAqIDIuIENvcnJlY3QgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSBgaW5wdXRgIHR5cGVzIGluIGlPUy5cbiAqIDMuIEltcHJvdmUgdXNhYmlsaXR5IGFuZCBjb25zaXN0ZW5jeSBvZiBjdXJzb3Igc3R5bGUgYmV0d2VlbiBpbWFnZS10eXBlXG4gKiAgICBgaW5wdXRgIGFuZCBvdGhlcnMuXG4gKi9cbmJ1dHRvbixcbmh0bWwgaW5wdXRbdHlwZT1cImJ1dHRvblwiXSxcbmlucHV0W3R5cGU9XCJyZXNldFwiXSxcbmlucHV0W3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgLyogMiAqL1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIC8qIDMgKi9cbn1cblxuLyoqXG4gKiBSZS1zZXQgZGVmYXVsdCBjdXJzb3IgZm9yIGRpc2FibGVkIGVsZW1lbnRzLlxuICovXG5idXR0b25bZGlzYWJsZWRdLFxuaHRtbCBpbnB1dFtkaXNhYmxlZF0ge1xuICBjdXJzb3I6IGRlZmF1bHQ7XG59XG5cbi8qKlxuICogUmVtb3ZlIGlubmVyIHBhZGRpbmcgYW5kIGJvcmRlciBpbiBGaXJlZm94IDQrLlxuICovXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5pbnB1dDo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlcjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIEZpcmVmb3ggNCsgc2V0dGluZyBgbGluZS1oZWlnaHRgIG9uIGBpbnB1dGAgdXNpbmcgYCFpbXBvcnRhbnRgIGluXG4gKiB0aGUgVUEgc3R5bGVzaGVldC5cbiAqL1xuaW5wdXQge1xuICBsaW5lLWhlaWdodDogbm9ybWFsO1xufVxuXG4vKipcbiAqIEl0J3MgcmVjb21tZW5kZWQgdGhhdCB5b3UgZG9uJ3QgYXR0ZW1wdCB0byBzdHlsZSB0aGVzZSBlbGVtZW50cy5cbiAqIEZpcmVmb3gncyBpbXBsZW1lbnRhdGlvbiBkb2Vzbid0IHJlc3BlY3QgYm94LXNpemluZywgcGFkZGluZywgb3Igd2lkdGguXG4gKlxuICogMS4gQWRkcmVzcyBib3ggc2l6aW5nIHNldCB0byBgY29udGVudC1ib3hgIGluIElFIDgvOS8xMC5cbiAqIDIuIFJlbW92ZSBleGNlc3MgcGFkZGluZyBpbiBJRSA4LzkvMTAuXG4gKi9cbmlucHV0W3R5cGU9XCJjaGVja2JveFwiXSxcbmlucHV0W3R5cGU9XCJyYWRpb1wiXSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqL1xufVxuXG4vKipcbiAqIEZpeCB0aGUgY3Vyc29yIHN0eWxlIGZvciBDaHJvbWUncyBpbmNyZW1lbnQvZGVjcmVtZW50IGJ1dHRvbnMuIEZvciBjZXJ0YWluXG4gKiBgZm9udC1zaXplYCB2YWx1ZXMgb2YgdGhlIGBpbnB1dGAsIGl0IGNhdXNlcyB0aGUgY3Vyc29yIHN0eWxlIG9mIHRoZVxuICogZGVjcmVtZW50IGJ1dHRvbiB0byBjaGFuZ2UgZnJvbSBgZGVmYXVsdGAgdG8gYHRleHRgLlxuICovXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gIGhlaWdodDogYXV0bztcbn1cblxuLyoqXG4gKiAxLiBBZGRyZXNzIGBhcHBlYXJhbmNlYCBzZXQgdG8gYHNlYXJjaGZpZWxkYCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lLlxuICogMi4gQWRkcmVzcyBgYm94LXNpemluZ2Agc2V0IHRvIGBib3JkZXItYm94YCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lXG4gKiAgICAoaW5jbHVkZSBgLW1vemAgdG8gZnV0dXJlLXByb29mKS5cbiAqL1xuaW5wdXRbdHlwZT1cInNlYXJjaFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuICAvKiAxICovXG4gIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIC8qIDIgKi9cbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XG59XG5cbi8qKlxuICogUmVtb3ZlIGlubmVyIHBhZGRpbmcgYW5kIHNlYXJjaCBjYW5jZWwgYnV0dG9uIGluIFNhZmFyaSBhbmQgQ2hyb21lIG9uIE9TIFguXG4gKiBTYWZhcmkgKGJ1dCBub3QgQ2hyb21lKSBjbGlwcyB0aGUgY2FuY2VsIGJ1dHRvbiB3aGVuIHRoZSBzZWFyY2ggaW5wdXQgaGFzXG4gKiBwYWRkaW5nIChhbmQgYHRleHRmaWVsZGAgYXBwZWFyYW5jZSkuXG4gKi9cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xufVxuXG4vKipcbiAqIERlZmluZSBjb25zaXN0ZW50IGJvcmRlciwgbWFyZ2luLCBhbmQgcGFkZGluZy5cbiAqL1xuZmllbGRzZXQge1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICBtYXJnaW46IDAgMnB4O1xuICBwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCBgY29sb3JgIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gSUUgOC85LlxuICogMi4gUmVtb3ZlIHBhZGRpbmcgc28gcGVvcGxlIGFyZW4ndCBjYXVnaHQgb3V0IGlmIHRoZXkgemVybyBvdXQgZmllbGRzZXRzLlxuICovXG5sZWdlbmQge1xuICBib3JkZXI6IDA7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqL1xufVxuXG4vKipcbiAqIFJlbW92ZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRSA4LzkuXG4gKi9cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi8qKlxuICogRG9uJ3QgaW5oZXJpdCB0aGUgYGZvbnQtd2VpZ2h0YCAoYXBwbGllZCBieSBhIHJ1bGUgYWJvdmUpLlxuICogTk9URTogdGhlIGRlZmF1bHQgY2Fubm90IHNhZmVseSBiZSBjaGFuZ2VkIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIE9TIFguXG4gKi9cbm9wdGdyb3VwIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi8qIFRhYmxlc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogUmVtb3ZlIG1vc3Qgc3BhY2luZyBiZXR3ZWVuIHRhYmxlIGNlbGxzLlxuICovXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwO1xufVxuXG50ZCxcbnRoIHtcbiAgcGFkZGluZzogMDtcbn1cblxuLyogX2xheW91dC5zY3NzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLmctaGVhZGVyIC5jLXNpdGVuYW1lLCAubWFpbiwgLmdsb2JhbEZvb3RlciB7XG4gIG1heC13aWR0aDogNDRyZW07XG4gIHdpZHRoOiA3MCU7XG4gIG1hcmdpbi1yaWdodDogYXV0bztcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG59XG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0OGVtKSB7XG4gIC5nLWhlYWRlciAuYy1zaXRlbmFtZSwgLm1haW4sIC5nbG9iYWxGb290ZXIge1xuICAgIHdpZHRoOiA5MCU7XG4gICAgbWFyZ2luLXJpZ2h0OiA1JTtcbiAgICBtYXJnaW4tbGVmdDogNSU7XG4gIH1cbn1cblxuLmctaGVhZGVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW4tYm90dG9tOiAycmVtO1xufVxuLmctaGVhZGVyIC5jLXNpdGVuYW1lID4gYSB7XG4gIHRleHQtc2hhZG93OiAwIDAgdHJhbnNwYXJlbnQ7XG4gIHRyYW5zaXRpb246IHRleHQtc2hhZG93IC40cyBlYXNlO1xuICBjb2xvcjogI0U0NTcyRTtcbn1cbi5nLWhlYWRlciAuYy1zaXRlbmFtZSA+IGE6aG92ZXIge1xuICB0ZXh0LXNoYWRvdzogMCAwICM1NDMsIDFweCAxcHggIzU0MywgMnB4IDJweCAjNTQzLCAzcHggM3B4ICM1NDMsIDRweCA0cHggIzU0MywgNXB4IDVweCAjNTQzLCA2cHggNnB4ICM1NDMsIDdweCA3cHggIzU0Mztcbn1cblxuLmluZGV4IC5nLWhlYWRlciB7XG4gIGhlaWdodDogNDB2aDtcbn1cbi5pbmRleCAuZy1oZWFkZXIgLmMtc2l0ZW5hbWUge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgbGVmdDogMDtcbiAgbWFyZ2luOiBhdXRvO1xuICBoZWlnaHQ6IDEuNjI1ZW07XG4gIHdpZHRoOiAxMDAlO1xuICBmb250LXNpemU6IDEwdm1pbjtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDhlbSkge1xuICAuaW5kZXggLmctaGVhZGVyIC5jLXNpdGVuYW1lIHtcbiAgICBmb250LXNpemU6IDEydm1pbjtcbiAgfVxufVxuLmluZGV4IC5nLWhlYWRlciAuc2l0ZWRlc2NyaXB0aW9uIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IC4yNXJlbTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICByaWdodDogMXJlbTtcbiAgbGVmdDogMXJlbTtcbn1cblxuLm1haW4ge1xuICBtYXJnaW4tYm90dG9tOiAycmVtO1xufVxuXG4uZ2xvYmFsRm9vdGVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nLXRvcDogMXJlbTtcbiAgcGFkZGluZy1ib3R0b206IDFyZW07XG4gIG1hcmdpbi10b3A6IDJyZW07XG59XG4uZ2xvYmFsRm9vdGVyIC5zbnMtbGlzdCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiAxcmVtO1xuICByaWdodDogMDtcbiAgbWFyZ2luOiAwO1xuICB0ZXh0LWFsaWduOiByaWdodDtcbn1cbi5nbG9iYWxGb290ZXIgLnNucy1saXN0ID4gbGkge1xuICBtYXJnaW4tbGVmdDogMXJlbTtcbn1cblxuLmJhY2sydG9wIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuLmJhY2sydG9wID4gYSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgaGVpZ2h0OiAxLjYyNWVtO1xuICB3aWR0aDogMS42MjVlbTtcbiAgYm9yZGVyOiAxcHggc29saWQgI0U0NTcyRTtcbiAgYm9yZGVyLXJhZGl1czogNTElO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG59XG5cbi5zaXRlLW5hdiB7XG4gIG1hcmdpbjogMXJlbSAwO1xuICBwYWRkaW5nOiAwO1xuICBsaXN0LXN0eWxlOiBub25lO1xufVxuLnNpdGUtbmF2ID4gbGkge1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xufVxuLnNpdGUtbmF2ID4gbGkgPiBhIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuLnNpdGUtbmF2ID4gbGkgPiBhOmhvdmVyIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG59XG5cbi5jb3B5cmlnaHQge1xuICBtYXJnaW46IC41ZW0gMDtcbn1cbi5jb3B5cmlnaHQgYSxcbi5jb3B5cmlnaHQgYTp2aXNpdGVkIHtcbiAgY29sb3I6ICMyQTJCMkU7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cblxuLyogX2NvcmUuc2Nzc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbmh0bWwge1xuICBiYWNrZ3JvdW5kOiAjZmRmZmY4O1xuICBjb2xvcjogIzJBMkIyRTtcbiAgZm9udC1mYW1pbHk6IFwiU291cmNlIFNhbnMgUHJvXCIsIFwi44OS44Op44Ku44OO6KeS44K0IFByb05cIiwgXCJIaXJhZ2lubyBLYWt1IEdvdGhpYyBQcm9OXCIsIFwi44Oh44Kk44Oq44KqXCIsIE1laXJ5bywgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAxZW07XG4gIGxpbmUtaGVpZ2h0OiAxLjYyNTtcbn1cblxuYSB7XG4gIGNvbG9yOiAjYzU0MDFhO1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgdHJhbnNpdGlvbjogY29sb3IgLjE1cyBlYXNlO1xufVxuXG5hOmhvdmVyIHtcbiAgY29sb3I6ICNlNDU3MmU7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cblxuYTphY3RpdmUge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHRvcDogMXB4O1xufVxuXG5hOnZpc2l0ZWQge1xuICBjb2xvcjogIzk4MzIxNDtcbn1cblxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XG4gIGNsZWFyOiBib3RoO1xuICBmb250LWZlYXR1cmUtc2V0dGluZ3M6IFwia2VyblwiIDE7XG4gIGZvbnQtdmFyaWFudDogcHJvcG9ydGlvbmFsLXdpZHRoO1xufVxuXG5hYmJyW3RpdGxlXSB7XG4gIGJvcmRlci1ib3R0b20td2lkdGg6IDA7XG59XG5cbmZpZ3VyZSB7XG4gIG1hcmdpbjogMDtcbn1cblxuLyogLS0gU291cmNlIENvZGUgLS0gKi9cbmNvZGUge1xuICBmb250LWZhbWlseTogXCJTb3VyY2UgQ29kZSBQcm9cIiwgbW9ub3NwYWNlO1xufVxuXG4uY29kZSBkdCB7XG4gIGZvbnQtZmFtaWx5OiBcIlZpZ2FcIiwgc2Fucy1zZXJpZjtcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbn1cblxuZmlnY2FwdGlvbiwgLnJlY2VudC1hcnRpY2xlLWl0ZW06Zmlyc3QtY2hpbGQgLnJlY2VudC1hcnRpY2xlLWl0ZW0tZGVzY3JpcHRpb24sIC5hcnRpY2xlLWluZm8sIC5hcnRpY2xlLWJvZHkgcCBjb2RlLCAuY29kZSBkZCwgLnAtYXJ0aWNsZS1wZXJtYWxpbmstbGluaywgLmFydGljbGUtYWRzLXRpdGxlLCAucC1hcnRpY2xlLXBhZ2VyLWxpbmsge1xuICBmb250LXNpemU6IDAuODc1ZW07XG59XG5cbi5yZWNlbnQtYXJ0aWNsZS1pdGVtLXRpdGxlLCAuYXJjaGl2ZS1saXN0LWl0ZW0tdGl0bGUge1xuICBmb250LXNpemU6IDEuMTI1ZW07XG59XG5cbi5iYWNrMnRvcCA+IGEsIC5yZWNlbnRBcnRpY2xlU2VjdGlvbiBoMSB7XG4gIGZvbnQtc2l6ZTogMS41ZW07XG59XG5cbi5wLWFydGljbGUtdGl0bGUsIC5hcmNoaXZlLXRpdGxlLCAucGFnZVNlY3Rpb25IZWFkZXIgaDEsIC5yZWNlbnQtYXJ0aWNsZS1pdGVtOmZpcnN0LWNoaWxkIC5yZWNlbnQtYXJ0aWNsZS1pdGVtLXRpdGxlIHtcbiAgZm9udC1zaXplOiAyZW07XG59XG5cbi5wLWFydGljbGUtdGl0bGUsIC5hcmNoaXZlLXRpdGxlLCAucGFnZVNlY3Rpb25IZWFkZXIgaDEge1xuICBtYXJnaW4tdG9wOiAwO1xuICBsaW5lLWhlaWdodDogMS4xO1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbn1cbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ4ZW0pIHtcbiAgLnAtYXJ0aWNsZS10aXRsZSwgLmFyY2hpdmUtdGl0bGUsIC5wYWdlU2VjdGlvbkhlYWRlciBoMSB7XG4gICAgZm9udC1zaXplOiAxLjVlbTtcbiAgfVxufVxuXG4vKiAtLSAlYnV0dG9uU2ltcGxlIC0tICovXG4vKiBfY29ucG9uZW50LnNjc3NcbiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi5jLXNpdGVuYW1lIHtcbiAgZm9udC1mYW1pbHk6IFwiVmlnYVwiLCBzYW5zLXNlcmlmO1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbn1cbi5jLXNpdGVuYW1lIGEge1xuICBjb2xvcjogIzJBMkIyRTtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuXG4uYy1pY29uIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuXG4uYy1mbGF0LWxpc3QsIC5zaXRlLW5hdiB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIHBhZGRpbmctbGVmdDogMDtcbn1cblxuLmMtZmxhdC1saXN0ID4gbGksIC5zaXRlLW5hdiA+IGxpLFxuLmMtZmxhdC1saXN0ID4gZHQsXG4uc2l0ZS1uYXYgPiBkdCxcbi5jLWZsYXQtbGlzdCA+IGRkLFxuLnNpdGUtbmF2ID4gZGQge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbi1yaWdodDogLjVyZW07XG59XG4uYy1mbGF0LWxpc3QgPiBsaTpsYXN0LWNoaWxkLCAuc2l0ZS1uYXYgPiBsaTpsYXN0LWNoaWxkLFxuLmMtZmxhdC1saXN0ID4gZHQ6bGFzdC1jaGlsZCxcbi5zaXRlLW5hdiA+IGR0Omxhc3QtY2hpbGQsXG4uYy1mbGF0LWxpc3QgPiBkZDpsYXN0LWNoaWxkLFxuLnNpdGUtbmF2ID4gZGQ6bGFzdC1jaGlsZCB7XG4gIG1hcmdpbi1yaWdodDogMDtcbn1cblxuLyogLS0gdGFnIC0tICovXG4uYy10YWcsIC5hcnRpY2xlLXRhZyB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBtYXJnaW4tcmlnaHQ6IC41ZW07XG4gIHBhZGRpbmc6IDAgMS43NWVtIDAgMWVtO1xuICBib3JkZXItcmFkaXVzOiAwLjE4NzVlbSAwIDAgMC4xODc1ZW07XG4gIGJhY2tncm91bmQ6ICNlYWVhZWE7XG59XG4uYy10YWc6YmVmb3JlLCAuYXJ0aWNsZS10YWc6YmVmb3JlIHtcbiAgY29udGVudDogXCIgXCI7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogLjRlbTtcbiAgYm90dG9tOiAwO1xuICBoZWlnaHQ6IDAuMjVlbTtcbiAgd2lkdGg6IDAuMjVlbTtcbiAgbWFyZ2luOiBhdXRvO1xuICBib3JkZXItcmFkaXVzOiAxMDAlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRmZmY4O1xuICBsaW5lLWhlaWdodDogMTtcbn1cbi5jLXRhZzphZnRlciwgLmFydGljbGUtdGFnOmFmdGVyIHtcbiAgY29udGVudDogXCIgXCI7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICB3aWR0aDogMDtcbiAgaGVpZ2h0OiAwO1xuICBtYXJnaW46IGF1dG87XG4gIGJvcmRlcjogMWVtIHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItcmlnaHQtY29sb3I6ICNmZGZmZjg7XG59XG5cbi8qIC0tIFNpdGVOYW1lIC0tKi9cbi5zaXRlTmFtZSBzcGFuIHtcbiAgbGV0dGVyLXNwYWNpbmc6IC0uMWVtO1xufVxuXG4vKlxuIF9pbmRleC5zY3NzXG4gVE9Q44Oa44O844K46Zai6YCjXG4gKi9cbi5zaXRlRGVzY3JpcHRpb24ge1xuICBtYXJnaW46IDA7XG59XG5cbi5yZWNlbnQtYXJ0aWNsZSB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLnJlY2VudC1hcnRpY2xlLWl0ZW0ge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBmbG9hdDogbGVmdDtcbiAgd2lkdGg6IDQ3LjUlO1xuICBtYXJnaW4tbGVmdDogNSU7XG4gIG1hcmdpbi1ib3R0b206IDJyZW07XG59XG4ucmVjZW50LWFydGljbGUtaXRlbTpudGgtY2hpbGQoMm4rMikge1xuICBjbGVhcjogbGVmdDtcbiAgbWFyZ2luLWxlZnQ6IDA7XG59XG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0OGVtKSB7XG4gIC5yZWNlbnQtYXJ0aWNsZS1pdGVtIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IGF1dG87XG4gICAgbWFyZ2luOiAwIDAgMS41cmVtIDA7XG4gIH1cbn1cbi5yZWNlbnQtYXJ0aWNsZS1pdGVtID4gYSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIHBhZGRpbmc6IDFyZW07XG4gIHRyYW5zaXRpb246IGFsbCAuMnMgZWFzZTtcbn1cbi5yZWNlbnQtYXJ0aWNsZS1pdGVtID4gYTpob3ZlciB7XG4gIGJvcmRlci1yYWRpdXM6IDAuMzEyNWVtO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWFlYWVhO1xufVxuXG4ucmVjZW50LWFydGljbGUtaXRlbS1wdWJsaXNoZWQtdGltZSB7XG4gIGZvbnQtZmFtaWx5OiBcIlZpZ2FcIiwgc2Fucy1zZXJpZjtcbiAgY29sb3I6ICMyQTJCMkU7XG59XG5cbi5yZWNlbnQtYXJ0aWNsZS1pdGVtLXRpdGxlIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAuMnJlbSAwIC4zcmVtO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBsaW5lLWhlaWdodDogMS4yO1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbn1cblxuLnJlY2VudC1hcnRpY2xlLWl0ZW06Zmlyc3QtY2hpbGQge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiBhdXRvO1xuICBtYXgtd2lkdGg6IDQ0cmVtO1xuICBmbG9hdDogbm9uZTtcbiAgbWFyZ2luLWxlZnQ6IDA7XG4gIG1hcmdpbi1ib3R0b206IDJyZW07XG59XG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5ODBweCkge1xuICAucmVjZW50LWFydGljbGUtaXRlbTpmaXJzdC1jaGlsZCB7XG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICB9XG59XG4ucmVjZW50LWFydGljbGUtaXRlbTpmaXJzdC1jaGlsZCAucmVjZW50LWFydGljbGUtaXRlbS10aXRsZSB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGNvbG9yOiAjRTQ1NzJFO1xuICB0ZXh0LXNoYWRvdzogMCAwICNmZmYsIDFweCAxcHggI2ZmZiwgMnB4IDJweCAjZmZmLCAzcHggM3B4ICNmZmY7XG59XG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0OGVtKSB7XG4gIC5yZWNlbnQtYXJ0aWNsZS1pdGVtOmZpcnN0LWNoaWxkIC5yZWNlbnQtYXJ0aWNsZS1pdGVtLXRpdGxlIHtcbiAgICBmb250LXNpemU6IDEuMzc1ZW07XG4gIH1cbn1cbi5yZWNlbnQtYXJ0aWNsZS1pdGVtOmZpcnN0LWNoaWxkIC5yZWNlbnQtYXJ0aWNsZS1pdGVtLXRpdGxlID4gYSB7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cbi5yZWNlbnQtYXJ0aWNsZS1pdGVtOmZpcnN0LWNoaWxkIC5yZWNlbnQtYXJ0aWNsZS1pdGVtLWRlc2NyaXB0aW9uIHtcbiAgbWFyZ2luOiAwO1xuICBjb2xvcjogIzJBMkIyRTtcbn1cblxuLypcbiBfYXJ0aWNsZS5zY3NzXG4g6KiY5LqL44Oa44O844K444Gu44K544K/44Kk44OrXG4qL1xuLyogLS0gQXJ0aWNsZSAtLSAqL1xuLnAtYXJ0aWNsZS1oZWFkZXIge1xuICBtYXJnaW46IDRyZW0gMDtcbn1cblxuLyogLS0gLmFydGljbGVJbmZvIC0tICovXG4uYXJ0aWNsZS1pbmZvLWxhYmVsIHtcbiAgZmxvYXQ6IGxlZnQ7XG59XG5cbi5hcnRpY2xlLWluZm8tbGFiZWw6YWZ0ZXIge1xuICBjb250ZW50OiBcIjpcIjtcbiAgbWFyZ2luOiAwIC4xNXJlbTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5hcnRpY2xlLWluZm8tcHJvcCB7XG4gIG1hcmdpbi1sZWZ0OiAwO1xufVxuXG4vKiAtLSDmnKzmlofjgqjjg6rjgqIgLS0gKi9cbi5hcnRpY2xlLWJvZHkgaDIge1xuICBtYXJnaW4tdG9wOiAzcmVtO1xufVxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDhlbSkge1xuICAuYXJ0aWNsZS1ib2R5IGgyIHtcbiAgICBsaW5lLWhlaWdodDogMS4yNTtcbiAgICBmb250LXNpemU6IDEuMjVlbTtcbiAgfVxufVxuLmFydGljbGUtYm9keSBwIHtcbiAgbWFyZ2luOiAxLjVlbSAwO1xufVxuLmFydGljbGUtYm9keSBwIGNvZGUge1xuICBtYXJnaW46IDAgMnB4O1xuICBwYWRkaW5nOiAwIDNweCAycHg7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgYmFja2dyb3VuZDogI2VhZWFlYTtcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcbn1cbi5hcnRpY2xlLWJvZHkgdWwsIC5hcnRpY2xlLWJvZHkgb2wge1xuICBwYWRkaW5nLWxlZnQ6IDFlbTtcbn1cbi5hcnRpY2xlLWJvZHkgZHQge1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cbi5hcnRpY2xlLWJvZHkgZGQge1xuICBtYXJnaW4tbGVmdDogMDtcbn1cbi5hcnRpY2xlLWJvZHkgZGQgKyBkdCB7XG4gIG1hcmdpbi10b3A6IC41ZW07XG59XG4uYXJ0aWNsZS1ib2R5IGhyIHtcbiAgbWFyZ2luOiAxLjc1ZW0gM2VtO1xuICBib3JkZXI6IDA7XG4gIGJvcmRlci10b3A6IDAuMmVtIHNvbGlkICNlYWVhZWE7XG59XG4uYXJ0aWNsZS1ib2R5IHRhYmxlIHtcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBtaW4td2lkdGg6IDUwJTtcbiAgbWFyZ2luOiAxZW0gYXV0byAxLjc1ZW07XG59XG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0OGVtKSB7XG4gIC5hcnRpY2xlLWJvZHkgdGFibGUge1xuICAgIGZvbnQtc2l6ZTogMC44NzVlbTtcbiAgfVxufVxuLmFydGljbGUtYm9keSBjYXB0aW9uIHtcbiAgbWFyZ2luLWJvdHRvbTogLjI1ZW07XG59XG4uYXJ0aWNsZS1ib2R5IHRkLCAuYXJ0aWNsZS1ib2R5IHRoIHtcbiAgcGFkZGluZzogMWVtO1xufVxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDhlbSkge1xuICAuYXJ0aWNsZS1ib2R5IHRkLCAuYXJ0aWNsZS1ib2R5IHRoIHtcbiAgICBwYWRkaW5nOiAuMjVlbTtcbiAgfVxufVxuLmFydGljbGUtYm9keSB0aCB7XG4gIHBhZGRpbmctYm90dG9tOiAuNWVtO1xuICBib3JkZXItYm90dG9tOiAycHggc29saWQgI0U0NTcyRTtcbn1cbi5hcnRpY2xlLWJvZHkgdGQge1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzg1Q0IzMztcbn1cbi5hcnRpY2xlLWJvZHkgaW1nIHtcbiAgbWF4LXdpZHRoOiAxMDAlO1xufVxuLmFydGljbGUtYm9keSBpbWdbY2xhc3NePVwibXQtaW1hZ2VcIl0ge1xuICBoZWlnaHQ6IGF1dG87XG59XG4uYXJ0aWNsZS1ib2R5IC5tdC1pbWFnZS1sZWZ0IHtcbiAgZmxvYXQ6IGxlZnQ7XG4gIG1hcmdpbjogMCAycmVtIDJyZW0gMDtcbn1cbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ4ZW0pIHtcbiAgLmFydGljbGUtYm9keSAubXQtaW1hZ2UtbGVmdCB7XG4gICAgbWFyZ2luOiAwIDFyZW0gMXJlbSAwO1xuICB9XG59XG4uYXJ0aWNsZS1ib2R5IC5tdC1pbWFnZS1yaWdodCB7XG4gIGZsb2F0OiByaWdodDtcbiAgbWFyZ2luOiAwIDAgMnJlbSAycmVtO1xufVxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDhlbSkge1xuICAuYXJ0aWNsZS1ib2R5IC5tdC1pbWFnZS1yaWdodCB7XG4gICAgbWFyZ2luOiAwIDAgMXJlbSAxcmVtO1xuICB9XG59XG4uYXJ0aWNsZS1ib2R5IC5tdC1pbWFnZS1jZW50ZXIge1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBtYXJnaW46IDAgYXV0byAuNWVtO1xufVxuLmFydGljbGUtYm9keSBibG9ja3F1b3RlIHtcbiAgbWFyZ2luLWxlZnQ6IDA7XG4gIG1hcmdpbi1yaWdodDogMDtcbiAgcGFkZGluZy1sZWZ0OiAxZW07XG4gIGJvcmRlci1sZWZ0OiAzcHggc29saWQgI2VhZWFlYTtcbn1cbi5hcnRpY2xlLWJvZHkgY2l0ZSB7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xufVxuXG4uY29kZSBkZCB7XG4gIG1hcmdpbjogMDtcbn1cblxuLyogLS0gUXVvdGUgLS0qL1xuLnF1b3RlIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nOiAuNWVtIDFyZW0gM2VtIDFyZW07XG4gIGJhY2tncm91bmQ6ICNlYWVhZWE7XG59XG4ucXVvdGUgZGQge1xuICBtYXJnaW4tbGVmdDogMDtcbn1cbi5xdW90ZSBibG9ja3F1b3RlIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG59XG4ucXVvdGUgLmNpdGUge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHJpZ2h0OiAxcmVtO1xuICBib3R0b206IDFyZW07XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xufVxuXG4uZW1iZWQtaWZyYW1lIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZy1ib3R0b206IDU2LjI1JTtcbn1cbi5lbWJlZC1pZnJhbWUgPiBpZnJhbWUge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgbGVmdDogMDtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLyogLS0g5Y+C6ICD44Gr44GX44GfV2Vi44Oa44O844K4IC0tICovXG4ucmVmZXJlbmNlLXdlYi1wYWdlID4gZGQge1xuICBtYXJnaW46IDAgMCAuMjVyZW07XG59XG5cbi5wLWFydGljbGUtcGVybWFsaW5rIHtcbiAgbWFyZ2luOiAycmVtIDA7XG59XG5cbi5wLWFydGljbGUtcGVybWFsaW5rLWxhYmVsIHtcbiAgbWFyZ2luLXRvcDogMXJlbTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5wLWFydGljbGUtcGVybWFsaW5rLWxpbmsge1xuICBtYXJnaW4tbGVmdDogMDtcbn1cblxuLmFydGljbGVBZHMge1xuICBtYXJnaW46IDJyZW0gMDtcbn1cblxuLmFydGljbGUtYWRzLXRpdGxlIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlYWVhZWE7XG59XG5cbi5wLWFydGljbGUtcGFnZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1hcmdpbjogNHJlbSBhdXRvO1xufVxuXG4ucC1hcnRpY2xlLXBhZ2VyLWxhYmVsIHtcbiAgd2lkdGg6IDUwJTtcbiAgbWFyZ2luLXRvcDogMXJlbTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5wLWFydGljbGUtcGFnZXItbGluayB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdpZHRoOiA1MCU7XG4gIG1hcmdpbi1sZWZ0OiAwO1xufVxuXG4ucC1hcnRpY2xlLXBhZ2VyLW9sZGVyIHtcbiAgcGFkZGluZy1yaWdodDogMXJlbTtcbn1cbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ4ZW0pIHtcbiAgLnAtYXJ0aWNsZS1wYWdlci1vbGRlciB7XG4gICAgcGFkZGluZy1yaWdodDogLjVyZW07XG4gIH1cbn1cblxuLnAtYXJ0aWNsZS1wYWdlci1uZXdlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgbWFyZ2luLXRvcDogMDtcbiAgcGFkZGluZy1sZWZ0OiAxcmVtO1xuICB0ZXh0LWFsaWduOiByaWdodDtcbn1cbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ4ZW0pIHtcbiAgLnAtYXJ0aWNsZS1wYWdlci1uZXdlciB7XG4gICAgcGFkZGluZy1sZWZ0OiAuNXJlbTtcbiAgfVxufVxuXG4ucC1hcnRpY2xlLXBhZ2VyLW5ld2VyLnAtYXJ0aWNsZS1wYWdlci1saW5rIHtcbiAgdG9wOiAxLjVyZW07XG59XG5cbi8qIF9hcmNoaXZlLnNjc3NcbiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi5hcmNoaXZlLWxpc3Qge1xuICBwYWRkaW5nLWxlZnQ6IDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5cbi5hcmNoaXZlLWxpc3QtaXRlbSAuYXJ0aWNsZS1pbmZvIHtcbiAgd2lkdGg6IGF1dG87XG4gIG1hcmdpbi1ib3R0b206IC41cmVtO1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xufVxuLmFyY2hpdmUtbGlzdC1pdGVtIC5hcnRpY2xlLWluZm8tbGFiZWw6Zmlyc3QtY2hpbGQge1xuICBtYXJnaW4tbGVmdDogMDtcbn1cblxuLmFyY2hpdmUtbGlzdC1pdGVtLXRpdGxlIHtcbiAgbWFyZ2luOiAwIDAgMnJlbTtcbiAgbGluZS1oZWlnaHQ6IDEuMztcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG4uYXJjaGl2ZS1saXN0LWl0ZW0tdGl0bGUgPiBhIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuXG4vKlxuIF9wYWdlLnNjc3NcbiDjgqbjgqfjg5bjg5rjg7zjgrjjga7jgrnjgr/jgqTjg6tcbiovXG4vKiAtLSBQYWdlIC0tICovXG4vKiAtLSBQYWdlIEFib3V0IC0tKi9cbi5wcm9maWxlUGhvdG8ge1xuICBmbG9hdDogbGVmdDtcbiAgd2lkdGg6IDI1JTtcbiAgaGVpZ2h0OiBhdXRvO1xuICBtYXgtd2lkdGg6IDllbTtcbiAgbWFyZ2luLXJpZ2h0OiAxZW07XG4gIG1hcmdpbi1ib3R0b206IDFlbTtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xufVxuXG4vKiFcblxuZ2l0aHViLmNvbSBzdHlsZSAoYykgVmFzaWx5IFBvbG92bnlvdiA8dmFzdEB3aGl0ZWFudHMubmV0PlxuXG4qL1xuLmhsanMge1xuICBkaXNwbGF5OiBibG9jaztcbiAgb3ZlcmZsb3cteDogYXV0bztcbiAgcGFkZGluZzogMC41ZW07XG4gIGNvbG9yOiAjMzMzO1xuICBiYWNrZ3JvdW5kOiAjZjhmOGY4O1xuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IG5vbmU7XG59XG5cbi5obGpzLWNvbW1lbnQsXG4uZGlmZiAuaGxqcy1oZWFkZXIsXG4uaGxqcy1qYXZhZG9jIHtcbiAgY29sb3I6ICM5OTg7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbn1cblxuLmhsanMta2V5d29yZCxcbi5jc3MgLnJ1bGUgLmhsanMta2V5d29yZCxcbi5obGpzLXdpbnV0aWxzLFxuLm5naW54IC5obGpzLXRpdGxlLFxuLmhsanMtc3Vic3QsXG4uaGxqcy1yZXF1ZXN0LFxuLmhsanMtc3RhdHVzIHtcbiAgY29sb3I6ICMzMzM7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4uaGxqcy1udW1iZXIsXG4uaGxqcy1oZXhjb2xvcixcbi5ydWJ5IC5obGpzLWNvbnN0YW50IHtcbiAgY29sb3I6ICMwMDgwODA7XG59XG5cbi5obGpzLXN0cmluZyxcbi5obGpzLXRhZyAuaGxqcy12YWx1ZSxcbi5obGpzLXBocGRvYyxcbi5obGpzLWRhcnRkb2MsXG4udGV4IC5obGpzLWZvcm11bGEge1xuICBjb2xvcjogI2QxNDtcbn1cblxuLmhsanMtdGl0bGUsXG4uaGxqcy1pZCxcbi5zY3NzIC5obGpzLXByZXByb2Nlc3NvciB7XG4gIGNvbG9yOiAjOTAwO1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLmhsanMtbGlzdCAuaGxqcy1rZXl3b3JkLFxuLmhsanMtc3Vic3Qge1xuICBmb250LXdlaWdodDogbm9ybWFsO1xufVxuXG4uaGxqcy1jbGFzcyAuaGxqcy10aXRsZSxcbi5obGpzLXR5cGUsXG4udmhkbCAuaGxqcy1saXRlcmFsLFxuLnRleCAuaGxqcy1jb21tYW5kIHtcbiAgY29sb3I6ICM0NTg7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4uaGxqcy10YWcsXG4uaGxqcy10YWcgLmhsanMtdGl0bGUsXG4uaGxqcy1ydWxlcyAuaGxqcy1wcm9wZXJ0eSxcbi5kamFuZ28gLmhsanMtdGFnIC5obGpzLWtleXdvcmQge1xuICBjb2xvcjogIzAwMDA4MDtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbn1cblxuLmhsanMtYXR0cmlidXRlLFxuLmhsanMtdmFyaWFibGUsXG4ubGlzcCAuaGxqcy1ib2R5IHtcbiAgY29sb3I6ICMwMDgwODA7XG59XG5cbi5obGpzLXJlZ2V4cCB7XG4gIGNvbG9yOiAjMDA5OTI2O1xufVxuXG4uaGxqcy1zeW1ib2wsXG4ucnVieSAuaGxqcy1zeW1ib2wgLmhsanMtc3RyaW5nLFxuLmxpc3AgLmhsanMta2V5d29yZCxcbi5jbG9qdXJlIC5obGpzLWtleXdvcmQsXG4uc2NoZW1lIC5obGpzLWtleXdvcmQsXG4udGV4IC5obGpzLXNwZWNpYWwsXG4uaGxqcy1wcm9tcHQge1xuICBjb2xvcjogIzk5MDA3Mztcbn1cblxuLmhsanMtYnVpbHRfaW4ge1xuICBjb2xvcjogIzAwODZiMztcbn1cblxuLmhsanMtcHJlcHJvY2Vzc29yLFxuLmhsanMtcHJhZ21hLFxuLmhsanMtcGksXG4uaGxqcy1kb2N0eXBlLFxuLmhsanMtc2hlYmFuZyxcbi5obGpzLWNkYXRhIHtcbiAgY29sb3I6ICM5OTk7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4uaGxqcy1kZWxldGlvbiB7XG4gIGJhY2tncm91bmQ6ICNmZGQ7XG59XG5cbi5obGpzLWFkZGl0aW9uIHtcbiAgYmFja2dyb3VuZDogI2RmZDtcbn1cblxuLmRpZmYgLmhsanMtY2hhbmdlIHtcbiAgYmFja2dyb3VuZDogIzAwODZiMztcbn1cblxuLmhsanMtY2h1bmsge1xuICBjb2xvcjogI2FhYTtcbn1cblxuXG5cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdRVUZSUVN4SlFVRkxPMFZCUTBnc1YwRkJWeXhGUVVGRkxGVkJRVlU3TzBWQlEzWkNMRzlDUVVGdlFpeEZRVUZGTEVsQlFVazdPMFZCUXpGQ0xIZENRVUYzUWl4RlFVRkZMRWxCUVVrN096czdPenM3UVVGUGFFTXNTVUZCU3p0RlFVTklMRTFCUVUwc1JVRkJSU3hEUVVGRE96czdPenM3T3p0QlFWVllPenM3T3pzN096czdPenRQUVZkUk8wVkJRMDRzVDBGQlR5eEZRVUZGTEV0QlFVczdPenM3T3pzN1FVRlJhRUk3T3p0TFFVZE5PMFZCUTBvc1QwRkJUeXhGUVVGRkxGbEJRVms3TzBWQlEzSkNMR05CUVdNc1JVRkJSU3hSUVVGUk96czdPenM3T3p0QlFWRXhRaXh4UWtGQmMwSTdSVUZEY0VJc1QwRkJUeXhGUVVGRkxFbEJRVWs3UlVGRFlpeE5RVUZOTEVWQlFVVXNRMEZCUXpzN096czdPenRCUVZGWU8xRkJRMU03UlVGRFVDeFBRVUZQTEVWQlFVVXNTVUZCU1RzN096czdPenM3UVVGVlppeERRVUZGTzBWQlEwRXNWVUZCVlN4RlFVRkZMRmRCUVZjN096czdPenRCUVU5NlFqdFBRVU5STzBWQlEwNHNUMEZCVHl4RlFVRkZMRU5CUVVNN096czdPenM3TzBGQlZWb3NWMEZCV1R0RlFVTldMR0ZCUVdFc1JVRkJSU3hWUVVGVk96czdPenM3UVVGUE0wSTdUVUZEVHp0RlFVTk1MRmRCUVZjc1JVRkJSU3hKUVVGSk96czdPenM3UVVGUGJrSXNSMEZCU1R0RlFVTkdMRlZCUVZVc1JVRkJSU3hOUVVGTk96czdPenM3TzBGQlVYQkNMRVZCUVVjN1JVRkRSQ3hUUVVGVExFVkJRVVVzUjBGQlJ6dEZRVU5rTEUxQlFVMHNSVUZCUlN4UlFVRlJPenM3T3pzN1FVRlBiRUlzU1VGQlN6dEZRVU5JTEZWQlFWVXNSVUZCUlN4SlFVRkpPMFZCUTJoQ0xFdEJRVXNzUlVGQlJTeEpRVUZKT3pzN096czdRVUZQWWl4TFFVRk5PMFZCUTBvc1UwRkJVeXhGUVVGRkxFZEJRVWM3T3pzN096dEJRVTlvUWp0SFFVTkpPMFZCUTBZc1UwRkJVeXhGUVVGRkxFZEJRVWM3UlVGRFpDeFhRVUZYTEVWQlFVVXNRMEZCUXp0RlFVTmtMRkZCUVZFc1JVRkJSU3hSUVVGUk8wVkJRMnhDTEdOQlFXTXNSVUZCUlN4UlFVRlJPenM3UVVGSE1VSXNSMEZCU1R0RlFVTkdMRWRCUVVjc1JVRkJSU3hOUVVGTk96czdRVUZIWWl4SFFVRkpPMFZCUTBZc1RVRkJUU3hGUVVGRkxFOUJRVTg3T3pzN096czdPMEZCVldwQ0xFZEJRVWs3UlVGRFJpeE5RVUZOTEVWQlFVVXNRMEZCUXpzN096czdPMEZCVDFnc1kwRkJaVHRGUVVOaUxGRkJRVkVzUlVGQlJTeE5RVUZOT3pzN096czdPenRCUVZWc1FpeE5RVUZQTzBWQlEwd3NUVUZCVFN4RlFVRkZMRkZCUVZFN096czdPenRCUVU5c1FpeEZRVUZITzBWQlEwUXNaVUZCWlN4RlFVRkZMRmRCUVZjN1JVRkROVUlzVlVGQlZTeEZRVUZGTEZkQlFWYzdSVUZEZGtJc1RVRkJUU3hGUVVGRkxFTkJRVU03T3pzN096dEJRVTlZTEVkQlFVazdSVUZEUml4UlFVRlJMRVZCUVVVc1NVRkJTVHM3T3pzN08wRkJUMmhDT3pzN1NVRkhTenRGUVVOSUxGZEJRVmNzUlVGQlJTeHZRa0ZCYjBJN1JVRkRha01zVTBGQlV5eEZRVUZGTEVkQlFVYzdPenM3T3pzN096czdPenM3T3p0QlFXdENhRUk3T3pzN1VVRkpVenRGUVVOUUxFdEJRVXNzUlVGQlJTeFBRVUZQT3p0RlFVTmtMRWxCUVVrc1JVRkJSU3hQUVVGUE96dEZRVU5pTEUxQlFVMHNSVUZCUlN4RFFVRkRPenM3T3pzN08wRkJUMWdzVFVGQlR6dEZRVU5NTEZGQlFWRXNSVUZCUlN4UFFVRlBPenM3T3pzN096czdRVUZWYmtJN1RVRkRUenRGUVVOTUxHTkJRV01zUlVGQlJTeEpRVUZKT3pzN096czdPenM3TzBGQlYzUkNPenM3YjBKQlIzRkNPMFZCUTI1Q0xHdENRVUZyUWl4RlFVRkZMRTFCUVUwN08wVkJRekZDTEUxQlFVMHNSVUZCUlN4UFFVRlBPenM3T3pzN08wRkJUMnBDTzI5Q1FVTnhRanRGUVVOdVFpeE5RVUZOTEVWQlFVVXNUMEZCVHpzN096czdPMEZCVDJwQ08zVkNRVU4zUWp0RlFVTjBRaXhOUVVGTkxFVkJRVVVzUTBGQlF6dEZRVU5VTEU5QlFVOHNSVUZCUlN4RFFVRkRPenM3T3pzN08wRkJVVm9zUzBGQlRUdEZRVU5LTEZkQlFWY3NSVUZCUlN4TlFVRk5PenM3T3pzN096czdPMEZCVjNKQ08yMUNRVU52UWp0RlFVTnNRaXhWUVVGVkxFVkJRVVVzVlVGQlZUczdSVUZEZEVJc1QwRkJUeXhGUVVGRkxFTkJRVU03T3pzN096czdPenRCUVZOYU95dERRVU5uUkR0RlFVTTVReXhOUVVGTkxFVkJRVVVzU1VGQlNUczdPenM3T3pzN1FVRlRaQ3h2UWtGQmNVSTdSVUZEYmtJc2EwSkJRV3RDTEVWQlFVVXNVMEZCVXpzN1JVRkROMElzWlVGQlpTeEZRVUZGTEZkQlFWYzdSVUZETlVJc2EwSkJRV3RDTEVWQlFVVXNWMEZCVnpzN1JVRkRMMElzVlVGQlZTeEZRVUZGTEZkQlFWYzdPenM3T3pzN08wRkJVM3BDT3l0RFFVTm5SRHRGUVVNNVF5eHJRa0ZCYTBJc1JVRkJSU3hKUVVGSk96czdPenM3UVVGUE1VSXNVVUZCVXp0RlFVTlFMRTFCUVUwc1JVRkJSU3hwUWtGQmFVSTdSVUZEZWtJc1RVRkJUU3hGUVVGRkxFdEJRVXM3UlVGRFlpeFBRVUZQTEVWQlFVVXNjVUpCUVhGQ096czdPenM3TzBGQlVXaERMRTFCUVU4N1JVRkRUQ3hOUVVGTkxFVkJRVVVzUTBGQlF6czdSVUZEVkN4UFFVRlBMRVZCUVVVc1EwRkJRenM3T3pzN096dEJRVTlhTEZGQlFWTTdSVUZEVUN4UlFVRlJMRVZCUVVVc1NVRkJTVHM3T3pzN096dEJRVkZvUWl4UlFVRlRPMFZCUTFBc1YwRkJWeXhGUVVGRkxFbEJRVWs3T3pzN096czdPMEZCVlc1Q0xFdEJRVTA3UlVGRFNpeGxRVUZsTEVWQlFVVXNVVUZCVVR0RlFVTjZRaXhqUVVGakxFVkJRVVVzUTBGQlF6czdPMEZCUjI1Q08wVkJRMGM3UlVGRFJDeFBRVUZQTEVWQlFVVXNRMEZCUXpzN096czdRVU0zV2xvc01rTkJRV1U3UlVGRFlpeFRRVUZUTEVWQlRFa3NTMEZCU3p0RlFVMXNRaXhMUVVGTExFVkJRVVVzUjBGQlJ6dEZRVU5XTEZsQlFWa3NSVUZCUlN4SlFVRkpPMFZCUTJ4Q0xGZEJRVmNzUlVGQlJTeEpRVUZKT3p0QlEwMW1MRzFEUVVGNVF6dEZSRlkzUXl3eVEwRkJaVHRKUVU5WUxFdEJRVXNzUlVGQlJTeEhRVUZITzBsQlExWXNXVUZCV1N4RlFVRkZMRVZCUVVVN1NVRkRhRUlzVjBGQlZ5eEZRVUZGTEVWQlFVVTdPenM3UVVGSmJrSXNVMEZCVlR0RlFVTlNMRkZCUVZFc1JVRkJSU3hSUVVGUk8wVkJRMnhDTEdGQlFXRXNSVUZCUlN4SlFVRkpPenRCUVUxdVFpeDVRa0ZCWjBJN1JVRkRaQ3hYUVVGWExFVkJRVVVzWlVGQlpUdEZRVU0xUWl4VlFVRlZMRVZCUVVVc2IwSkJRVzlDTzBWQlEyaERMRXRCUVVzc1JVVmFVeXhQUVVGclFqczdRVVpqYUVNc0swSkJRVkU3UlVGRFRpeFhRVUZYTEVWSFlrd3NNRWRCUVdkRE96czdRVWhyUWpWRExHZENRVUZwUWp0RlFVTm1MRTFCUVUwc1JVRkJSU3hKUVVGSk96dEJRVVZhTERSQ1FVRlpPMFZCUTFZc1VVRkJVU3hGUVVGRkxGRkJRVkU3UlVGRGJFSXNSMEZCUnl4RlFVRkZMRU5CUVVNN1JVRkRUaXhMUVVGTExFVkJRVVVzUTBGQlF6dEZRVU5TTEUxQlFVMHNSVUZCUlN4RFFVRkRPMFZCUTFRc1NVRkJTU3hGUVVGRkxFTkJRVU03UlVGRFVDeE5RVUZOTEVWQlFVVXNTVUZCU1R0RlFVTmFMRTFCUVUwc1JVRkJSU3hQUVVGMVFqdEZRVU12UWl4TFFVRkxMRVZCUVVVc1NVRkJTVHRGUVVOWUxGTkJRVk1zUlVGQlJTeE5RVUZOTzBWQlEycENMRlZCUVZVc1JVRkJSU3hOUVVGTk96dEJRMjVEYkVJc2JVTkJRWGxETzBWRWVVSXpReXcwUWtGQldUdEpRV0ZTTEZOQlFWTXNSVUZCUlN4TlFVRk5PenM3UVVGSmNrSXNhVU5CUVdsQ08wVkJRMllzVVVGQlVTeEZRVUZGTEZGQlFWRTdSVUZEYkVJc1RVRkJUU3hGUVVGRkxFMUJRVTA3UlVGRFpDeFZRVUZWTEVWQlFVVXNUVUZCVFR0RlFVTnNRaXhMUVVGTExFVkJRVVVzU1VGQlNUdEZRVU5ZTEVsQlFVa3NSVUZCUlN4SlFVRkpPenM3UVVGTFpDeExRVUZOTzBWQlJVb3NZVUZCWVN4RlFXeEZUaXhKUVVGSk96czdRVUZ4UldJc1lVRkJZenRGUVVWYUxGRkJRVkVzUlVGQlJTeFJRVUZSTzBWQlEyeENMRmRCUVZjc1JVRkJSU3hKUVVGWE8wVkJRM2hDTEdOQlFXTXNSVUZCUlN4SlFVRlhPMFZCUXpOQ0xGVkJRVlVzUlVFeFJVZ3NTVUZCU1RzN1FVRTBSVmdzZFVKQlFWVTdSVUZEVWl4UlFVRlJMRVZCUVVVc1VVRkJVVHRGUVVOc1FpeE5RVUZOTEVWQlFVVXNTVUZCU1R0RlFVTmFMRXRCUVVzc1JVRkJSU3hEUVVGRE8wVkJRMUlzVFVGQlRTeEZRVUZGTEVOQlFVTTdSVUZEVkN4VlFVRlZMRVZCUVVVc1MwRkJTenM3UVVGRmFrSXNORUpCUVU4N1JVRkRUQ3hYUVVGWExFVkJRVVVzU1VGQlNUczdPMEZCUzNaQ0xGTkJRVlU3UlVGRFVpeFZRVUZWTEVWQlFVVXNUVUZCVFRzN1FVRkZiRUlzWVVGQlRUdEZRVU5LTEU5QlFVOHNSVUZCUlN4WlFVRlpPMFZCUTNKQ0xFMUJRVTBzUlVGQlJTeFBRVUYxUWp0RlFVTXZRaXhMUVVGTExFVkJRVVVzVDBGQmRVSTdSVUZGT1VJc1RVRkJUU3hGUVVGRkxHbENRVUZ4UWp0RlFVTTNRaXhoUVVGaExFVkJRVVVzUjBGQlJ6dEZRVU5zUWl4bFFVRmxMRVZCUVVVc1NVRkJTVHRGUVVOeVFpeGpRVUZqTEVWQlFVVXNUVUZCVFRzN08wRkJTVEZDTEZOQlFWVTdSVUZEVWl4TlFVRk5MRVZCUVVVc1RVRkJUVHRGUVVOa0xFOUJRVThzUlVGQlJTeERRVUZETzBWQlExWXNWVUZCVlN4RlFVRkZMRWxCUVVrN08wRkJSMmhDTEdOQlFVODdSVUZEVEN4alFVRmpMRVZCUVVVc1UwRkJVenM3UVVGSE0wSXNhMEpCUVZjN1JVRkRWQ3hsUVVGbExFVkJRVVVzU1VGQlNUczdRVUZIZGtJc2QwSkJRV2xDTzBWQlEyWXNaVUZCWlN4RlFVRkZMRk5CUVZNN096dEJRVWs1UWl4VlFVRlhPMFZCUTFRc1RVRkJUU3hGUVVGRkxFMUJRVTA3TzBGQlJXUTdiMEpCUTFVN1JVRkRVaXhMUVVGTExFVkZia2hKTEU5QlFXbENPMFZHYjBneFFpeGxRVUZsTEVWQlFVVXNTVUZCU1RzN096czdRVWx3U1hwQ0xFbEJRVXM3UlVGRFNDeFZRVUZWTEVWR1kwMHNUMEZCYVVJN1JVVmlha01zUzBGQlN5eEZSbU5OTEU5QlFXbENPMFZGWWpWQ0xGZEJRVmNzUlVGQlJTeDVSa0ZCZVVZN1JVRkRkRWNzVTBGQlV5eEZRVUZGTEVkQlFUSkNPMFZCUTNSRExGZEJRVmNzUlVaclFrMHNTMEZCYjBJN096dEJSV1oyUXl4RFFVRkZPMFZCUTBFc1MwRkJTeXhGUmxWTkxFOUJRV2RDTzBWRlZETkNMR1ZCUVdVc1JVRkJSU3hUUVVGVE8wVkJRekZDTEZWQlFWVXNSVUZCUlN4bFFVRmxPenM3UVVGSE4wSXNUMEZCVVR0RlFVTk9MRXRCUVVzc1JVRkJSU3hQUVVGNVFqdEZRVU5vUXl4bFFVRmxMRVZCUVVVc1NVRkJTVHM3TzBGQlIzWkNMRkZCUVZNN1JVRkRVQ3hSUVVGUkxFVkJRVVVzVVVGQlVUdEZRVU5zUWl4SFFVRkhMRVZCUVVVc1IwRkJSenM3TzBGQlIxWXNVMEZCVlR0RlFVTlNMRXRCUVVzc1JVRkJSU3hQUVVGM1FqczdPMEZCUjJwRExITkNRVUYxUWp0RlFVTnlRaXhMUVVGTExFVkJRVVVzU1VGQlNUdEZRVU5ZTEhGQ1FVRnhRaXhGUVVGRkxGRkJRVkU3UlVGREwwSXNXVUZCV1N4RlFVRkZMR3RDUVVGclFqczdPMEZCUjJ4RExGZEJRVms3UlVGRFZpeHRRa0ZCYlVJc1JVRkJSU3hEUVVGRE96czdRVUZIZUVJc1RVRkJUenRGUVVOTUxFMUJRVTBzUlVGQlJTeERRVUZET3pzN08wRkJVVmdzU1VGQlN6dEZRVU5JTEZkQlFWY3NSVUZCUlN3MFFrRkJORUk3T3p0QlF6bERNME1zVVVGQlZ6dEZRVU5VTEZkQlFWY3NSVUZCUlN4clFrRkJhMEk3UlVGREwwSXNZMEZCWXl4RlFVRkZMRWRCUVVjN096dEJRVkZ5UWl4clRVRkJiVUk3UlVwUWFrSXNVMEZCVXl4RlFVRkZMRTlCUVdNN096dEJTV1V6UWl4dlJFRkJhVUk3UlVwbVppeFRRVUZUTEVWQlFVVXNUMEZCWXpzN08wRkpiVUl6UWl4MVEwRkJiVUk3UlVwdVFtcENMRk5CUVZNc1JVRkJSU3hMUVVGak96czdRVWwxUWpOQ0xHOUlRVUZ2UWp0RlNuWkNiRUlzVTBGQlV5eEZRVUZGTEVkQlFXTTdPenRCU1N0Q00wSXNkVVJCUVdkQ08wVkJRMlFzVlVGQlZTeEZRVUZGTEVOQlFVTTdSVUZGWWl4WFFVRlhMRVZCUVVVc1IwRkJSenRGUVVOb1FpeHpRa0ZCYzBJc1JVRkJSU3hYUVVGWE96dEJTbnBDYWtNc2JVTkJRWGxETzBWSmNVSTNReXgxUkVGQlowSTdTVW92UW1Rc1UwRkJVeXhGUVVGRkxFdEJRV003T3pzN096czdRVXRNTTBJc1YwRkJXVHRGUVVOV0xGZEJRVmNzUlVGQlJTeHJRa0ZCYTBJN1JVRkRMMElzYzBKQlFYTkNMRVZCUVVVc1YwRkJWenM3UVVGRmJrTXNZVUZCUlR0RlFVTkJMRXRCUVVzc1JVcFhTU3hQUVVGcFFqdEZTVll4UWl4bFFVRmxMRVZCUVVVc1NVRkJTVHM3TzBGQlNYcENMRTlCUVZFN1JVRkRUaXhQUVVGUExFVkJRVVVzV1VGQldUczdPMEZCUjNaQ0xIVkNRVUZoTzBWQlExZ3NWVUZCVlN4RlFVRkZMRWxCUVVrN1JVRkRhRUlzV1VGQldTeEZRVUZGTEVOQlFVTTdPenRCUVVkcVFqczdPenRqUVVWclFqdEZRVU5vUWl4UFFVRlBMRVZCUVVVc1dVRkJXVHRGUVVOeVFpeFpRVUZaTEVWQlFVVXNTMEZCU3pzN1FVRkZia0k3T3pzN2VVSkJRV0U3UlVGRFdDeFpRVUZaTEVWQlFVVXNRMEZCUXpzN096dEJRVXR1UWl4dlFrRkJUenRGUVVOTUxGRkJRVkVzUlVGQlJTeFJRVUZSTzBWQlEyeENMRTlCUVU4c1JVRkJSU3haUVVGWk8wVkJRM0pDTEZsQlFWa3NSVUZCUlN4SlFVRkpPMFZCUTJ4Q0xFOUJRVThzUlVGQlJTeGpRVUZqTzBWQlEzWkNMR0ZCUVdFc1JVRkJSU3h4UWtGQlpUdEZRVU01UWl4VlFVRlZMRVZLT1VKVkxFOUJRVTg3TzBGSkswSXpRaXhyUTBGQlV6dEZRVU5RTEU5QlFVOHNSVUZCUlN4SFFVRkhPMFZCUTFvc1QwRkJUeXhGUVVGRkxFdEJRVXM3UlVGRFpDeFJRVUZSTEVWQlFVVXNVVUZCVVR0RlFVTnNRaXhIUVVGSExFVkJRVVVzUTBGQlF6dEZRVU5PTEVsQlFVa3NSVUZCUlN4SlFVRkpPMFZCUTFZc1RVRkJUU3hGUVVGRkxFTkJRVU03UlVGRFZDeE5RVUZOTEVWQlFVVXNUVUZCU3p0RlFVTmlMRXRCUVVzc1JVRkJSU3hOUVVGTE8wVkJRMW9zVFVGQlRTeEZRVUZGTEVsQlFVazdSVUZEV2l4aFFVRmhMRVZCUVVVc1NVRkJTVHRGUVVOdVFpeG5Ra0ZCWjBJc1JVcHNRMFlzVDBGQmFVSTdSVWx0UXk5Q0xGZEJRVmNzUlVGQlJTeERRVUZET3p0QlFVVm9RaXhuUTBGQlVUdEZRVU5PTEU5QlFVOHNSVUZCUlN4SFFVRkhPMFZCUTFvc1VVRkJVU3hGUVVGRkxGRkJRVkU3UlVGRGJFSXNSMEZCUnl4RlFVRkZMRU5CUVVNN1JVRkRUaXhMUVVGTExFVkJRVVVzUTBGQlF6dEZRVU5TTEUxQlFVMHNSVUZCUlN4RFFVRkRPMFZCUTFRc1MwRkJTeXhGUVVGRkxFTkJRVU03UlVGRFVpeE5RVUZOTEVWQlFVVXNRMEZCUXp0RlFVTlVMRTFCUVUwc1JVRkJSU3hKUVVGSk8wVkJRMW9zVFVGQlRTeEZRVUZGTEhGQ1FVRnhRanRGUVVNM1FpeHJRa0ZCYTBJc1JVb3ZRMG9zVDBGQmFVSTdPenM3UVVseFJHcERMR05CUVVzN1JVRkRTQ3hqUVVGakxFVkJRVVVzUzBGQlN6czdPenM3T3p0QlEyNUZla0lzWjBKQlFXbENPMFZCUTJZc1RVRkJUU3hGUVVGRkxFTkJRVU03T3p0QlFVOVlMR1ZCUVdkQ08wVkJRMlFzVFVGQlRTeEZRVUZGTEVOQlFVTTdSVUZEVkN4UFFVRlBMRVZCUVVVc1EwRkJRenRGUVVOV0xGVkJRVlVzUlVGQlJTeEpRVUZKTzBWQlEyaENMRkZCUVZFc1JVRkJSU3hOUVVGTk96czdRVUZIYkVJc2IwSkJRWEZDTzBWQlEyNUNMRlZCUVZVc1JVRkJSU3hWUVVGVk8wVkJRM1JDTEV0QlFVc3NSVUZCUlN4SlFVRkpPMFZCUTFnc1MwRkJTeXhGUVVGRkxFdEJRVXM3UlVGRFdpeFhRVUZYTEVWQlFVVXNSVUZCUlR0RlFVTm1MR0ZCUVdFc1JVRkJSU3hKUVVGSk96dEJRVVZ1UWl4dlEwRkJhMEk3UlVGRGFFSXNTMEZCU3l4RlFVRkZMRWxCUVVrN1JVRkRXQ3hYUVVGWExFVkJRVVVzUTBGQlF6czdRVTVZWkN4dFEwRkJlVU03UlUxRk4wTXNiMEpCUVhGQ08wbEJZV3hDTEV0QlFVc3NSVUZCUlN4SlFVRkpPMGxCUTFnc1RVRkJUU3hGUVVGRkxFbEJRVWs3U1VGRFdpeE5RVUZOTEVWQlFVVXNXVUZCV1RzN08wRkJSM0pDTEhkQ1FVRk5PMFZCUTBvc1QwRkJUeXhGUVVGRkxFdEJRVXM3UlVGRFpDeGxRVUZsTEVWQlFVVXNTVUZCU1R0RlFVTnlRaXhQUVVGUExFVkJRVVVzU1VGQlNUdEZRVU5pTEZWQlFWVXNSVUZCUlN4WlFVRlpPenRCUVVWNFFpdzRRa0ZCVVR0RlFVTk9MR0ZCUVdFc1JVRkJSU3hSUVVGTE8wVkJRM0JDTEdkQ1FVRm5RaXhGVEhCRFFTeFBRVUZQT3pzN1FVc3dRemRDTEcxRFFVRnZRenRGUVVOc1F5eFhRVUZYTEVWQlFVVXNhMEpCUVd0Q08wVkJReTlDTEV0QlFVc3NSVXh1UTAwc1QwRkJhVUk3T3p0QlMzTkRPVUlzTUVKQlFUSkNPMFZCUTNwQ0xFMUJRVTBzUlVGQlJTeERRVUZETzBWQlExUXNUMEZCVHl4RlFVRkZMR0ZCUVdFN1JVRkZkRUlzVjBGQlZ5eEZRVUZGTEUxQlFVMDdSVUZEYmtJc1YwRkJWeXhGUVVGRkxFZEJRVWM3UlVGRGFFSXNaVUZCWlN4RlFVRkZMRk5CUVZNN096dEJRVWMxUWl4blEwRkJhVU03UlVGREwwSXNTMEZCU3l4RlFVRkZMRWxCUVVrN1JVRkRXQ3hOUVVGTkxFVkJRVVVzU1VGQlNUdEZRVU5hTEZOQlFWTXNSVkJxUlVrc1MwRkJTenRGVDJ0RmJFSXNTMEZCU3l4RlFVRkZMRWxCUVVrN1JVRkRXQ3hYUVVGWExFVkJRVVVzUTBGQlF6dEZRVU5rTEdGQlFXRXNSVUZCUlN4SlFVRkpPenRCVG1wRWFrSXNiME5CUVhGRE8wVk5Na042UXl4blEwRkJhVU03U1VGVE4wSXNWMEZCVnl4RlFVRkZMRWxCUVVrN1NVRkRha0lzV1VGQldTeEZRVUZGTEVsQlFVazdPenRCUVVkd1Fpd3lSRUZCTWtJN1JVRkZla0lzVjBGQlZ5eEZRVUZGTEVsQlFVazdSVUZEYWtJc1pVRkJaU3hGUVVGRkxFbEJRVWs3UlVGRGNrSXNTMEZCU3l4RlRDOUVVeXhQUVVGclFqdEZTMmRGYUVNc1YwRkJWeXhGU2psRVNDeHJSRUZCWjBNN08wRkdTbmhETEcxRFFVRjVRenRGVFRaRU0wTXNNa1JCUVRKQ08wbE9ka1V6UWl4VFFVRlRMRVZCUVVVc1QwRkJZenM3TzBGTmIwWjZRaXdyUkVGQkswSTdSVUZETjBJc1pVRkJaU3hGUVVGRkxFbEJRVWs3TzBGQlJYWkNMR2xGUVVGcFF6dEZRVU12UWl4TlFVRk5MRVZCUVVVc1EwRkJRenRGUVVOVUxFdEJRVXNzUlV3NVJVa3NUMEZCYVVJN096czdPenM3TzBGTllqbENMR2xDUVVGclFqdEZRVU5vUWl4TlFVRk5MRVZCUVVVc1RVRkJUVHM3T3p0QlFWbG9RaXh0UWtGQmJVSTdSVUZEYWtJc1MwRkJTeXhGUVVGRkxFbEJRVWs3T3p0QlFVdFlMSGxDUVVGUk8wVkJRMDRzVDBGQlR5eEZRVUZGTEVkQlFVYzdSVUZEV2l4TlFVRk5MRVZCUVVVc1VVRkJVVHRGUVVOb1FpeFhRVUZYTEVWQlFVVXNTVUZCU1RzN08wRkJTWEpDTEd0Q1FVRnRRanRGUVVOcVFpeFhRVUZYTEVWQlFVVXNRMEZCUXpzN096dEJRVk5rTEdkQ1FVRkhPMFZCUTBRc1ZVRkJWU3hGUVVGRkxFbEJRVWs3TzBGUWVrSm9RaXh0UTBGQmVVTTdSVTkzUWpORExHZENRVUZITzBsQlIwTXNWMEZCVnl4RlFVRkZMRWxCUVhOQ08wbFFja04yUXl4VFFVRlRMRVZCUVVVc1RVRkJZenM3TzBGUE1FTjZRaXhsUVVGRk8wVkJRMEVzVFVGQlRTeEZRVUZGTEU5QlFWRTdPMEZCUTJoQ0xHOUNRVUZMTzBWQlEwZ3NUVUZCVFN4RlFVRkZMRXRCUVVzN1JVRkRZaXhQUVVGUExFVkJRVVVzVTBGQlV6dEZRVU5zUWl4aFFVRmhMRVZCUVVVc1IwRkJSenRGUVVOc1FpeFZRVUZWTEVWT09VTk5MRTlCUVU4N1JVMW5SSFpDTEdOQlFXTXNSVUZCUlN4SFFVRkhPenRCUVVsMlFpeHJRMEZCVFR0RlFVTktMRmxCUVZrc1JVRkJSU3hIUVVGSE96dEJRVWR1UWl4blFrRkJSenRGUVVORUxGZEJRVmNzUlVGQlJTeEpRVUZKT3p0QlFVZHVRaXhuUWtGQlJ6dEZRVU5FTEZkQlFWY3NSVUZCUlN4RFFVRkRPenRCUVVkb1FpeHhRa0ZCVVR0RlFVTk9MRlZCUVZVc1JVRkJSU3hKUVVGSk96dEJRVWRzUWl4blFrRkJSenRGUVVORUxFMUJRVTBzUlVGQlJTeFZRVUZWTzBWQlEyeENMRTFCUVUwc1JVRkJSU3hEUVVGRE8wVkJRMVFzVlVGQlZTeEZRVUZGTEcxQ1FVRXlRanM3UVVGSGVrTXNiVUpCUVUwN1JVRkRTaXhUUVVGVExFVkJRVVVzU1VGQlNUdEZRVU5tTEZOQlFWTXNSVUZCUlN4SFFVRkhPMFZCUTJRc1RVRkJUU3hGUVVGRkxHVkJRV1U3TzBGUWNrVjJRaXh0UTBGQmVVTTdSVTlyUlRORExHMUNRVUZOTzBsUU5VVk9MRk5CUVZNc1JVRkJSU3hQUVVGak96czdRVTl4Um5wQ0xIRkNRVUZSTzBWQlEwNHNZVUZCWVN4RlFVRkZMRXRCUVVzN08wRkJSM1JDTEd0RFFVRlBPMFZCUTB3c1QwRkJUeXhGUVVGRkxFZEJRVWM3TzBGUWFFWmFMRzFEUVVGNVF6dEZUeXRGTTBNc2EwTkJRVTg3U1VGSFNDeFBRVUZQTEVWQlFVVXNTMEZCU3pzN08wRkJTV3hDTEdkQ1FVRkhPMFZCUTBRc1kwRkJZeXhGUVVGRkxFbEJRVWs3UlVGRGNFSXNZVUZCWVN4RlFVRkZMR2xDUVVGeFFqczdRVUZIZEVNc1owSkJRVWM3UlVGRFJDeGhRVUZoTEVWQlFVVXNhVUpCUVRCQ096dEJRVWN6UXl4cFFrRkJTVHRGUVVOR0xGTkJRVk1zUlVGQlJTeEpRVUZKT3p0QlFVZHFRaXh2UTBGQmRVSTdSVUZEY2tJc1RVRkJUU3hGUVVGRkxFbEJRVWs3TzBGQlIyUXNORUpCUVdVN1JVRkRZaXhMUVVGTExFVkJRVVVzU1VGQlNUdEZRVU5ZTEUxQlFVMHNSVUZCUlN4aFFVRnRRanM3UVZCNlJ6TkNMRzFEUVVGNVF6dEZUM1ZITTBNc05FSkJRV1U3U1VGSldDeE5RVUZOTEVWQlFVVXNZVUZCTWtJN096dEJRVWwyUXl3MlFrRkJaMEk3UlVGRFpDeExRVUZMTEVWQlFVVXNTMEZCU3p0RlFVTmFMRTFCUVUwc1JVRkJSU3hoUVVGdFFqczdRVkJxU0ROQ0xHMURRVUY1UXp0RlR5dEhNME1zTmtKQlFXZENPMGxCU1Zvc1RVRkJUU3hGUVVGRkxHRkJRVEpDT3pzN1FVRkpka01zT0VKQlFXbENPMFZCUTJZc1QwRkJUeXhGUVVGRkxFdEJRVXM3UlVGRFpDeFRRVUZUTEVWQlFVVXNTVUZCU1R0RlFVTm1MRTFCUVUwc1JVRkJSU3hYUVVGWE96dEJRVWR5UWl4M1FrRkJWenRGUVVOVUxGZEJRVmNzUlVGQlJTeERRVUZETzBWQlEyUXNXVUZCV1N4RlFVRkZMRU5CUVVNN1JVRkRaaXhaUVVGWkxFVkJRVVVzUjBGQlJ6dEZRVU5xUWl4WFFVRlhMRVZCUVVVc2FVSkJRVEJDT3p0QlFVZDZReXhyUWtGQlN6dEZRVU5JTEZWQlFWVXNSVUZCUlN4TFFVRkxPenM3UVVGUmJrSXNVVUZCUnp0RlFVTkVMRTFCUVUwc1JVRkJSU3hEUVVGRE96czdPMEZCVFdJc1RVRkJUenRGUVVOTUxGRkJRVkVzUlVGQlJTeFJRVUZSTzBWQlEyeENMRTlCUVU4c1JVRkJSU3hyUWtGQmEwSTdSVUZETTBJc1ZVRkJWU3hGVGk5S1ZTeFBRVUZQT3p0QlRXZExNMElzVTBGQlJ6dEZRVU5FTEZkQlFWY3NSVUZCUlN4RFFVRkRPenRCUVVWb1FpeHBRa0ZCVnp0RlFVTlVMRkZCUVZFc1JVRkJSU3hSUVVGUk8wVkJRMnhDTEUxQlFVMHNSVUZCUlN4RFFVRkRPMFZCUTFRc1QwRkJUeXhGUVVGRkxFTkJRVU03TzBGQlJWb3NXVUZCVFR0RlFVTktMRkZCUVZFc1JVRkJSU3hSUVVGUk8wVkJRMnhDTEV0QlFVc3NSVUZCUlN4SlFVRkpPMFZCUTFnc1RVRkJUU3hGUVVGRkxFbEJRVWs3UlVGRFdpeFZRVUZWTEVWQlFVVXNTMEZCU3pzN08wRkJTWEpDTEdGQlFXTTdSVUZEV2l4UlFVRlJMRVZCUVVVc1VVRkJVVHRGUVVOc1FpeExRVUZMTEVWQlFVVXNTVUZCU1R0RlFVTllMR05CUVdNc1JVRkJSU3hOUVVGaE96dEJRVVUzUWl4elFrRkJWenRGUVVOVUxGRkJRVkVzUlVGQlJTeFJRVUZSTzBWQlEyeENMRWRCUVVjc1JVRkJSU3hEUVVGRE8wVkJRMDRzUzBGQlN5eEZRVUZGTEVOQlFVTTdSVUZEVWl4TlFVRk5MRVZCUVVVc1EwRkJRenRGUVVOVUxFbEJRVWtzUlVGQlJTeERRVUZETzBWQlExQXNUVUZCVFN4RlFVRkZMRWxCUVVrN1JVRkRXaXhMUVVGTExFVkJRVVVzU1VGQlNUczdPenRCUVV0bUxIZENRVUY1UWp0RlFVTjJRaXhOUVVGTkxFVkJRVVVzVlVGQlZUczdPMEZCU1hCQ0xHOUNRVUZ4UWp0RlFVTnVRaXhOUVVGTkxFVkJRVVVzVFVGQlV6czdPMEZCUjI1Q0xEQkNRVUV5UWp0RlFVTjZRaXhWUVVGVkxFVkJRVVVzU1VGQlZ6dEZRVU4yUWl4WFFVRlhMRVZCUVVVc1NVRkJTVHM3TzBGQlIyNUNMSGxDUVVFd1FqdEZRVU40UWl4WFFVRlhMRVZCUVVVc1EwRkJRenM3TzBGQlMyaENMRmRCUVZrN1JVRkRWaXhOUVVGTkxFVkJRVVVzVFVGQlRUczdPMEZCUjJoQ0xHdENRVUZ0UWp0RlFVVnFRaXhoUVVGaExFVkJRVVVzYVVKQlFUQkNPenM3UVVGSk0wTXNaMEpCUVdsQ08wVkJRMllzVVVGQlVTeEZRVUZGTEZGQlFWRTdSVUZEYkVJc1RVRkJUU3hGUVVGRkxGTkJRVk03T3p0QlFVZHVRaXh6UWtGQmRVSTdSVUZEY2tJc1MwRkJTeXhGUVVGRkxFZEJRVWM3UlVGRFZpeFZRVUZWTEVWQlFVVXNTVUZCVnp0RlFVTjJRaXhYUVVGWExFVkJRVVVzU1VGQlNUczdPMEZCUjI1Q0xIRkNRVUZ6UWp0RlFVTndRaXhWUVVGVkxFVkJRVVVzVlVGQlZUdEZRVU4wUWl4TFFVRkxMRVZCUVVVc1IwRkJSenRGUVVOV0xGZEJRVmNzUlVGQlJTeERRVUZET3pzN1FVRkphRUlzYzBKQlFYVkNPMFZCUTNKQ0xHRkJRV0VzUlVGQlJTeEpRVUZKT3p0QlVERlBha0lzYlVOQlFYbERPMFZQZVU4M1F5eHpRa0ZCZFVJN1NVRkpia0lzWVVGQllTeEZRVUZGTEV0QlFVczdPenM3UVVGSmVFSXNjMEpCUVhWQ08wVkJRM0pDTEZGQlFWRXNSVUZCUlN4UlFVRlJPMFZCUTJ4Q0xFZEJRVWNzUlVGQlJTeERRVUZETzBWQlEwNHNTMEZCU3l4RlFVRkZMRU5CUVVNN1JVRkRVaXhWUVVGVkxFVkJRVVVzUTBGQlF6dEZRVU5pTEZsQlFWa3NSVUZCUlN4SlFVRkpPMFZCUTJ4Q0xGVkJRVlVzUlVGQlJTeExRVUZMT3p0QlVIWlFaaXh0UTBGQmVVTTdSVTlwVURkRExITkNRVUYxUWp0SlFWTnVRaXhaUVVGWkxFVkJRVVVzUzBGQlN6czdPenRCUVVsMlFpd3lRMEZCTkVNN1JVRkRNVU1zUjBGQlJ5eEZRVUZGTEUxQlFVMDdPenM3TzBGRGVGRmlMR0ZCUVdNN1JVRkRXaXhaUVVGWkxFVkJRVVVzUTBGQlF6dEZRVU5tTEZWQlFWVXNSVUZCUlN4SlFVRkpPenM3UVVGSmFFSXNaME5CUVdNN1JVRkRXaXhMUVVGTExFVkJRVVVzU1VGQlNUdEZRVU5ZTEdGQlFXRXNSVUZCUlN4TFFVRkxPMFZCUTNCQ0xGVkJRVlVzUlVGQlJTeEpRVUZKT3p0QlFVVnNRaXhyUkVGQlowTTdSVUZET1VJc1YwRkJWeXhGUVVGRkxFTkJRVU03T3p0QlFVbHNRaXgzUWtGQmVVSTdSVUZEZGtJc1RVRkJUU3hGUVVGRkxGRkJRVkU3UlVGRmFFSXNWMEZCVnl4RlFVRkZMRWRCUVVjN1JVRkRhRUlzVjBGQlZ5eEZRVUZGTEVsQlFVazdPMEZCUTJwQ0xEUkNRVUZOTzBWQlEwb3NaVUZCWlN4RlFVRkZMRWxCUVVrN096czdPenM3T3p0QlEyeENla0lzWVVGQll6dEZRVU5hTEV0QlFVc3NSVUZCUlN4SlFVRkpPMFZCUTFnc1MwRkJTeXhGUVVGRkxFZEJRVWM3UlVGRFZpeE5RVUZOTEVWQlFVVXNTVUZCU1R0RlFVTmFMRk5CUVZNc1JVRkJSU3hIUVVGSE8wVkJRMlFzV1VGQldTeEZRVUZGTEVkQlFVYzdSVUZEYWtJc1lVRkJZU3hGUVVGRkxFZEJRVWM3UlVGRGJFSXNZVUZCWVN4RlFVRkZMRWRCUVVjN096czdPenM3TzBGRFpIQkNMRXRCUVUwN1JVRkRTaXhQUVVGUExFVkJRVVVzUzBGQlN6dEZRVU5rTEZWQlFWVXNSVUZCUlN4SlFVRkpPMFZCUTJoQ0xFOUJRVThzUlVGQlJTeExRVUZMTzBWQlEyUXNTMEZCU3l4RlFVRkZMRWxCUVVrN1JVRkRXQ3hWUVVGVkxFVkJRVVVzVDBGQlR6dEZRVU51UWl4M1FrRkJkMElzUlVGQlJTeEpRVUZKT3pzN1FVRkhhRU03TzJGQlJXTTdSVUZEV2l4TFFVRkxMRVZCUVVVc1NVRkJTVHRGUVVOWUxGVkJRVlVzUlVGQlJTeE5RVUZOT3pzN1FVRkhjRUk3T3pzN096dFpRVTFoTzBWQlExZ3NTMEZCU3l4RlFVRkZMRWxCUVVrN1JVRkRXQ3hYUVVGWExFVkJRVVVzU1VGQlNUczdPMEZCUjI1Q096dHZRa0ZGY1VJN1JVRkRia0lzUzBGQlN5eEZRVUZGTEU5QlFVODdPenRCUVVkb1FqczdPenRyUWtGSmJVSTdSVUZEYWtJc1MwRkJTeXhGUVVGRkxFbEJRVWs3T3p0QlFVZGlPenQzUWtGRmVVSTdSVUZEZGtJc1MwRkJTeXhGUVVGRkxFbEJRVWs3UlVGRFdDeFhRVUZYTEVWQlFVVXNTVUZCU1RzN08wRkJSMjVDTzFkQlExazdSVUZEVml4WFFVRlhMRVZCUVVVc1RVRkJUVHM3TzBGQlIzSkNPenM3YTBKQlIyMUNPMFZCUTJwQ0xFdEJRVXNzUlVGQlJTeEpRVUZKTzBWQlExZ3NWMEZCVnl4RlFVRkZMRWxCUVVrN096dEJRVWR1UWpzN095dENRVWRuUXp0RlFVTTVRaXhMUVVGTExFVkJRVVVzVDBGQlR6dEZRVU5rTEZkQlFWY3NSVUZCUlN4TlFVRk5PenM3UVVGSGNrSTdPMmRDUVVWcFFqdEZRVU5tTEV0QlFVc3NSVUZCUlN4UFFVRlBPenM3UVVGSGFFSXNXVUZCWVR0RlFVTllMRXRCUVVzc1JVRkJSU3hQUVVGUE96czdRVUZIYUVJN096czdPenRaUVUxaE8wVkJRMWdzUzBGQlN5eEZRVUZGTEU5QlFVODdPenRCUVVkb1FpeGpRVUZsTzBWQlEySXNTMEZCU3l4RlFVRkZMRTlCUVU4N096dEJRVWRvUWpzN096czdWMEZMV1R0RlFVTldMRXRCUVVzc1JVRkJSU3hKUVVGSk8wVkJRMWdzVjBGQlZ5eEZRVUZGTEVsQlFVazdPenRCUVVkdVFpeGpRVUZsTzBWQlEySXNWVUZCVlN4RlFVRkZMRWxCUVVrN096dEJRVWRzUWl4alFVRmxPMFZCUTJJc1ZVRkJWU3hGUVVGRkxFbEJRVWs3T3p0QlFVZHNRaXhyUWtGQmJVSTdSVUZEYWtJc1ZVRkJWU3hGUVVGRkxFOUJRVTg3T3p0QlFVZHlRaXhYUVVGWk8wVkJRMVlzUzBGQlN5eEZRVUZGTEVsQlFVa2lMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dlgyNXZjbTFoYkdsNlpTNXpZM056SWl3aVptOTFibVJoZEdsdmJpOWZiR0Y1YjNWMExuTmpjM01pTENKbWIzVnVaR0YwYVc5dUwxOXRhWGhwYmk1elkzTnpJaXdpWm05MWJtUmhkR2x2Ymk5ZmRtRnlhV0ZpYkdVdWMyTnpjeUlzSW1admRXNWtZWFJwYjI0dlgyWjFibU4wYVc5dUxuTmpjM01pTENKbWIzVnVaR0YwYVc5dUwxOWpiM0psTG5OamMzTWlMQ0ptYjNWdVpHRjBhVzl1TDE5bGVIUmxibVJ6TG5OamMzTWlMQ0p2WW1wbFkzUXZZMjl0Y0c5dVpXNTBMMTlqYjIxd2IyNWxiblF1YzJOemN5SXNJbTlpYW1WamRDOXdjbTlxWldOMEwxOXBibVJsZUM1elkzTnpJaXdpYjJKcVpXTjBMM0J5YjJwbFkzUXZYMkZ5ZEdsamJHVXVjMk56Y3lJc0ltOWlhbVZqZEM5d2NtOXFaV04wTDE5aGNtTm9hWFpsTG5OamMzTWlMQ0p2WW1wbFkzUXZjSEp2YW1WamRDOWZjR0ZuWlM1elkzTnpJaXdpYkdsaUwyaHBaMmhzYVdkb2RHcHpMMTluYVhSb2RXSXVjMk56Y3lKZExDSnVZVzFsY3lJNlcxMHNJbVpwYkdVaU9pSnpkSGxzWlM1amMzTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lFZ2JtOXliV0ZzYVhwbExtTnpjeUIyTXk0d0xqQWdmQ0JOU1ZRZ1RHbGpaVzV6WlNCOElHZHBkQzVwYnk5dWIzSnRZV3hwZW1VZ0tpOWNibHh1THlvcVhHNGdLaUF4TGlCVFpYUWdaR1ZtWVhWc2RDQm1iMjUwSUdaaGJXbHNlU0IwYnlCellXNXpMWE5sY21sbUxseHVJQ29nTWk0Z1VISmxkbVZ1ZENCcFQxTWdkR1Y0ZENCemFYcGxJR0ZrYW5WemRDQmhablJsY2lCdmNtbGxiblJoZEdsdmJpQmphR0Z1WjJVc0lIZHBkR2h2ZFhRZ1pHbHpZV0pzYVc1blhHNGdLaUFnSUNCMWMyVnlJSHB2YjIwdVhHNGdLaTljYmx4dWFIUnRiQ0I3WEc0Z0lHWnZiblF0Wm1GdGFXeDVPaUJ6WVc1ekxYTmxjbWxtT3lBdktpQXhJQ292WEc0Z0lDMXRjeTEwWlhoMExYTnBlbVV0WVdScWRYTjBPaUF4TURBbE95QXZLaUF5SUNvdlhHNGdJQzEzWldKcmFYUXRkR1Y0ZEMxemFYcGxMV0ZrYW5WemREb2dNVEF3SlRzZ0x5b2dNaUFxTDF4dWZWeHVYRzR2S2lwY2JpQXFJRkpsYlc5MlpTQmtaV1poZFd4MElHMWhjbWRwYmk1Y2JpQXFMMXh1WEc1aWIyUjVJSHRjYmlBZ2JXRnlaMmx1T2lBd08xeHVmVnh1WEc0dktpQklWRTFNTlNCa2FYTndiR0Y1SUdSbFptbHVhWFJwYjI1elhHNGdJQ0E5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFNBcUwxeHVYRzR2S2lwY2JpQXFJRU52Y25KbFkzUWdZR0pzYjJOcllDQmthWE53YkdGNUlHNXZkQ0JrWldacGJtVmtJR2x1SUVsRklEZ3ZPUzVjYmlBcUwxeHVYRzVoY25ScFkyeGxMRnh1WVhOcFpHVXNYRzVrWlhSaGFXeHpMRnh1Wm1sblkyRndkR2x2Yml4Y2JtWnBaM1Z5WlN4Y2JtWnZiM1JsY2l4Y2JtaGxZV1JsY2l4Y2JtaG5jbTkxY0N4Y2JtMWhhVzRzWEc1dVlYWXNYRzV6WldOMGFXOXVMRnh1YzNWdGJXRnllU0I3WEc0Z0lHUnBjM0JzWVhrNklHSnNiMk5yTzF4dWZWeHVYRzR2S2lwY2JpQXFJREV1SUVOdmNuSmxZM1FnWUdsdWJHbHVaUzFpYkc5amEyQWdaR2x6Y0d4aGVTQnViM1FnWkdWbWFXNWxaQ0JwYmlCSlJTQTRMemt1WEc0Z0tpQXlMaUJPYjNKdFlXeHBlbVVnZG1WeWRHbGpZV3dnWVd4cFoyNXRaVzUwSUc5bUlHQndjbTluY21WemMyQWdhVzRnUTJoeWIyMWxMQ0JHYVhKbFptOTRMQ0JoYm1RZ1QzQmxjbUV1WEc0Z0tpOWNibHh1WVhWa2FXOHNYRzVqWVc1MllYTXNYRzV3Y205bmNtVnpjeXhjYm5acFpHVnZJSHRjYmlBZ1pHbHpjR3hoZVRvZ2FXNXNhVzVsTFdKc2IyTnJPeUF2S2lBeElDb3ZYRzRnSUhabGNuUnBZMkZzTFdGc2FXZHVPaUJpWVhObGJHbHVaVHNnTHlvZ01pQXFMMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGQnlaWFpsYm5RZ2JXOWtaWEp1SUdKeWIzZHpaWEp6SUdaeWIyMGdaR2x6Y0d4aGVXbHVaeUJnWVhWa2FXOWdJSGRwZEdodmRYUWdZMjl1ZEhKdmJITXVYRzRnS2lCU1pXMXZkbVVnWlhoalpYTnpJR2hsYVdkb2RDQnBiaUJwVDFNZ05TQmtaWFpwWTJWekxseHVJQ292WEc1Y2JtRjFaR2x2T201dmRDaGJZMjl1ZEhKdmJITmRLU0I3WEc0Z0lHUnBjM0JzWVhrNklHNXZibVU3WEc0Z0lHaGxhV2RvZERvZ01EdGNibjFjYmx4dUx5b3FYRzRnS2lCQlpHUnlaWE56SUdCYmFHbGtaR1Z1WFdBZ2MzUjViR2x1WnlCdWIzUWdjSEpsYzJWdWRDQnBiaUJKUlNBNEx6a3VYRzRnS2lCSWFXUmxJSFJvWlNCZ2RHVnRjR3hoZEdWZ0lHVnNaVzFsYm5RZ2FXNGdTVVVzSUZOaFptRnlhU3dnWVc1a0lFWnBjbVZtYjNnZ1BDQXlNaTVjYmlBcUwxeHVYRzViYUdsa1pHVnVYU3hjYm5SbGJYQnNZWFJsSUh0Y2JpQWdaR2x6Y0d4aGVUb2dibTl1WlR0Y2JuMWNibHh1THlvZ1RHbHVhM05jYmlBZ0lEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlJQ292WEc1Y2JpOHFLbHh1SUNvZ1VtVnRiM1psSUhSb1pTQm5jbUY1SUdKaFkydG5jbTkxYm1RZ1kyOXNiM0lnWm5KdmJTQmhZM1JwZG1VZ2JHbHVhM01nYVc0Z1NVVWdNVEF1WEc0Z0tpOWNibHh1WVNCN1hHNGdJR0poWTJ0bmNtOTFibVE2SUhSeVlXNXpjR0Z5Wlc1ME8xeHVmVnh1WEc0dktpcGNiaUFxSUVsdGNISnZkbVVnY21WaFpHRmlhV3hwZEhrZ2QyaGxiaUJtYjJOMWMyVmtJR0Z1WkNCaGJITnZJRzF2ZFhObElHaHZkbVZ5WldRZ2FXNGdZV3hzSUdKeWIzZHpaWEp6TGx4dUlDb3ZYRzVjYm1FNllXTjBhWFpsTEZ4dVlUcG9iM1psY2lCN1hHNGdJRzkxZEd4cGJtVTZJREE3WEc1OVhHNWNiaThxSUZSbGVIUXRiR1YyWld3Z2MyVnRZVzUwYVdOelhHNGdJQ0E5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFNBcUwxeHVYRzR2S2lwY2JpQXFJRUZrWkhKbGMzTWdjM1I1YkdsdVp5QnViM1FnY0hKbGMyVnVkQ0JwYmlCSlJTQTRMemtzSUZOaFptRnlhU0ExTENCaGJtUWdRMmh5YjIxbExseHVJQ292WEc1Y2JtRmlZbkpiZEdsMGJHVmRJSHRjYmlBZ1ltOXlaR1Z5TFdKdmRIUnZiVG9nTVhCNElHUnZkSFJsWkR0Y2JuMWNibHh1THlvcVhHNGdLaUJCWkdSeVpYTnpJSE4wZVd4bElITmxkQ0IwYnlCZ1ltOXNaR1Z5WUNCcGJpQkdhWEpsWm05NElEUXJMQ0JUWVdaaGNta2dOU3dnWVc1a0lFTm9jbTl0WlM1Y2JpQXFMMXh1WEc1aUxGeHVjM1J5YjI1bklIdGNiaUFnWm05dWRDMTNaV2xuYUhRNklHSnZiR1E3WEc1OVhHNWNiaThxS2x4dUlDb2dRV1JrY21WemN5QnpkSGxzYVc1bklHNXZkQ0J3Y21WelpXNTBJR2x1SUZOaFptRnlhU0ExSUdGdVpDQkRhSEp2YldVdVhHNGdLaTljYmx4dVpHWnVJSHRjYmlBZ1ptOXVkQzF6ZEhsc1pUb2dhWFJoYkdsak8xeHVmVnh1WEc0dktpcGNiaUFxSUVGa1pISmxjM01nZG1GeWFXRmliR1VnWUdneFlDQm1iMjUwTFhOcGVtVWdZVzVrSUcxaGNtZHBiaUIzYVhSb2FXNGdZSE5sWTNScGIyNWdJR0Z1WkNCZ1lYSjBhV05zWldCY2JpQXFJR052Ym5SbGVIUnpJR2x1SUVacGNtVm1iM2dnTkNzc0lGTmhabUZ5YVNBMUxDQmhibVFnUTJoeWIyMWxMbHh1SUNvdlhHNWNibWd4SUh0Y2JpQWdabTl1ZEMxemFYcGxPaUF5WlcwN1hHNGdJRzFoY21kcGJqb2dNQzQyTjJWdElEQTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXUmtjbVZ6Y3lCemRIbHNhVzVuSUc1dmRDQndjbVZ6Wlc1MElHbHVJRWxGSURndk9TNWNiaUFxTDF4dVhHNXRZWEpySUh0Y2JpQWdZbUZqYTJkeWIzVnVaRG9nSTJabU1EdGNiaUFnWTI5c2IzSTZJQ013TURBN1hHNTlYRzVjYmk4cUtseHVJQ29nUVdSa2NtVnpjeUJwYm1OdmJuTnBjM1JsYm5RZ1lXNWtJSFpoY21saFlteGxJR1p2Ym5RZ2MybDZaU0JwYmlCaGJHd2dZbkp2ZDNObGNuTXVYRzRnS2k5Y2JseHVjMjFoYkd3Z2UxeHVJQ0JtYjI1MExYTnBlbVU2SURnd0pUdGNibjFjYmx4dUx5b3FYRzRnS2lCUWNtVjJaVzUwSUdCemRXSmdJR0Z1WkNCZ2MzVndZQ0JoWm1abFkzUnBibWNnWUd4cGJtVXRhR1ZwWjJoMFlDQnBiaUJoYkd3Z1luSnZkM05sY25NdVhHNGdLaTljYmx4dWMzVmlMRnh1YzNWd0lIdGNiaUFnWm05dWRDMXphWHBsT2lBM05TVTdYRzRnSUd4cGJtVXRhR1ZwWjJoME9pQXdPMXh1SUNCd2IzTnBkR2x2YmpvZ2NtVnNZWFJwZG1VN1hHNGdJSFpsY25ScFkyRnNMV0ZzYVdkdU9pQmlZWE5sYkdsdVpUdGNibjFjYmx4dWMzVndJSHRjYmlBZ2RHOXdPaUF0TUM0MVpXMDdYRzU5WEc1Y2JuTjFZaUI3WEc0Z0lHSnZkSFJ2YlRvZ0xUQXVNalZsYlR0Y2JuMWNibHh1THlvZ1JXMWlaV1JrWldRZ1kyOXVkR1Z1ZEZ4dUlDQWdQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDBnS2k5Y2JseHVMeW9xWEc0Z0tpQlNaVzF2ZG1VZ1ltOXlaR1Z5SUhkb1pXNGdhVzV6YVdSbElHQmhZQ0JsYkdWdFpXNTBJR2x1SUVsRklEZ3ZPUzVjYmlBcUwxeHVYRzVwYldjZ2UxeHVJQ0JpYjNKa1pYSTZJREE3WEc1OVhHNWNiaThxS2x4dUlDb2dRMjl5Y21WamRDQnZkbVZ5Wm14dmR5QmthWE53YkdGNVpXUWdiMlJrYkhrZ2FXNGdTVVVnT1M1Y2JpQXFMMXh1WEc1emRtYzZibTkwS0RweWIyOTBLU0I3WEc0Z0lHOTJaWEptYkc5M09pQm9hV1JrWlc0N1hHNTlYRzVjYmk4cUlFZHliM1Z3YVc1bklHTnZiblJsYm5SY2JpQWdJRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5SUNvdlhHNWNiaThxS2x4dUlDb2dRV1JrY21WemN5QnRZWEpuYVc0Z2JtOTBJSEJ5WlhObGJuUWdhVzRnU1VVZ09DODVJR0Z1WkNCVFlXWmhjbWtnTlM1Y2JpQXFMMXh1WEc1bWFXZDFjbVVnZTF4dUlDQnRZWEpuYVc0NklERmxiU0EwTUhCNE8xeHVmVnh1WEc0dktpcGNiaUFxSUVGa1pISmxjM01nWkdsbVptVnlaVzVqWlhNZ1ltVjBkMlZsYmlCR2FYSmxabTk0SUdGdVpDQnZkR2hsY2lCaWNtOTNjMlZ5Y3k1Y2JpQXFMMXh1WEc1b2NpQjdYRzRnSUMxdGIzb3RZbTk0TFhOcGVtbHVaem9nWTI5dWRHVnVkQzFpYjNnN1hHNGdJR0p2ZUMxemFYcHBibWM2SUdOdmJuUmxiblF0WW05NE8xeHVJQ0JvWldsbmFIUTZJREE3WEc1OVhHNWNiaThxS2x4dUlDb2dRMjl1ZEdGcGJpQnZkbVZ5Wm14dmR5QnBiaUJoYkd3Z1luSnZkM05sY25NdVhHNGdLaTljYmx4dWNISmxJSHRjYmlBZ2IzWmxjbVpzYjNjNklHRjFkRzg3WEc1OVhHNWNiaThxS2x4dUlDb2dRV1JrY21WemN5QnZaR1FnWUdWdFlDMTFibWwwSUdadmJuUWdjMmw2WlNCeVpXNWtaWEpwYm1jZ2FXNGdZV3hzSUdKeWIzZHpaWEp6TGx4dUlDb3ZYRzVjYm1OdlpHVXNYRzVyWW1Rc1hHNXdjbVVzWEc1ellXMXdJSHRjYmlBZ1ptOXVkQzFtWVcxcGJIazZJRzF2Ym05emNHRmpaU3dnYlc5dWIzTndZV05sTzF4dUlDQm1iMjUwTFhOcGVtVTZJREZsYlR0Y2JuMWNibHh1THlvZ1JtOXliWE5jYmlBZ0lEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlJQ292WEc1Y2JpOHFLbHh1SUNvZ1MyNXZkMjRnYkdsdGFYUmhkR2x2YmpvZ1lua2daR1ZtWVhWc2RDd2dRMmh5YjIxbElHRnVaQ0JUWVdaaGNta2diMjRnVDFNZ1dDQmhiR3h2ZHlCMlpYSjVJR3hwYldsMFpXUmNiaUFxSUhOMGVXeHBibWNnYjJZZ1lITmxiR1ZqZEdBc0lIVnViR1Z6Y3lCaElHQmliM0prWlhKZ0lIQnliM0JsY25SNUlHbHpJSE5sZEM1Y2JpQXFMMXh1WEc0dktpcGNiaUFxSURFdUlFTnZjbkpsWTNRZ1kyOXNiM0lnYm05MElHSmxhVzVuSUdsdWFHVnlhWFJsWkM1Y2JpQXFJQ0FnSUV0dWIzZHVJR2x6YzNWbE9pQmhabVpsWTNSeklHTnZiRzl5SUc5bUlHUnBjMkZpYkdWa0lHVnNaVzFsYm5SekxseHVJQ29nTWk0Z1EyOXljbVZqZENCbWIyNTBJSEJ5YjNCbGNuUnBaWE1nYm05MElHSmxhVzVuSUdsdWFHVnlhWFJsWkM1Y2JpQXFJRE11SUVGa1pISmxjM01nYldGeVoybHVjeUJ6WlhRZ1pHbG1abVZ5Wlc1MGJIa2dhVzRnUm1seVpXWnZlQ0EwS3l3Z1UyRm1ZWEpwSURVc0lHRnVaQ0JEYUhKdmJXVXVYRzRnS2k5Y2JseHVZblYwZEc5dUxGeHVhVzV3ZFhRc1hHNXZjSFJuY205MWNDeGNibk5sYkdWamRDeGNiblJsZUhSaGNtVmhJSHRjYmlBZ1kyOXNiM0k2SUdsdWFHVnlhWFE3SUM4cUlERWdLaTljYmlBZ1ptOXVkRG9nYVc1b1pYSnBkRHNnTHlvZ01pQXFMMXh1SUNCdFlYSm5hVzQ2SURBN0lDOHFJRE1nS2k5Y2JuMWNibHh1THlvcVhHNGdLaUJCWkdSeVpYTnpJR0J2ZG1WeVpteHZkMkFnYzJWMElIUnZJR0JvYVdSa1pXNWdJR2x1SUVsRklEZ3ZPUzh4TUM1Y2JpQXFMMXh1WEc1aWRYUjBiMjRnZTF4dUlDQnZkbVZ5Wm14dmR6b2dkbWx6YVdKc1pUdGNibjFjYmx4dUx5b3FYRzRnS2lCQlpHUnlaWE56SUdsdVkyOXVjMmx6ZEdWdWRDQmdkR1Y0ZEMxMGNtRnVjMlp2Y20xZ0lHbHVhR1Z5YVhSaGJtTmxJR1p2Y2lCZ1luVjBkRzl1WUNCaGJtUWdZSE5sYkdWamRHQXVYRzRnS2lCQmJHd2diM1JvWlhJZ1ptOXliU0JqYjI1MGNtOXNJR1ZzWlcxbGJuUnpJR1J2SUc1dmRDQnBibWhsY21sMElHQjBaWGgwTFhSeVlXNXpabTl5YldBZ2RtRnNkV1Z6TGx4dUlDb2dRMjl5Y21WamRDQmdZblYwZEc5dVlDQnpkSGxzWlNCcGJtaGxjbWwwWVc1alpTQnBiaUJHYVhKbFptOTRMQ0JKUlNBNEt5d2dZVzVrSUU5d1pYSmhYRzRnS2lCRGIzSnlaV04wSUdCelpXeGxZM1JnSUhOMGVXeGxJR2x1YUdWeWFYUmhibU5sSUdsdUlFWnBjbVZtYjNndVhHNGdLaTljYmx4dVluVjBkRzl1TEZ4dWMyVnNaV04wSUh0Y2JpQWdkR1Y0ZEMxMGNtRnVjMlp2Y20wNklHNXZibVU3WEc1OVhHNWNiaThxS2x4dUlDb2dNUzRnUVhadmFXUWdkR2hsSUZkbFlrdHBkQ0JpZFdjZ2FXNGdRVzVrY205cFpDQTBMakF1S2lCM2FHVnlaU0FvTWlrZ1pHVnpkSEp2ZVhNZ2JtRjBhWFpsSUdCaGRXUnBiMkJjYmlBcUlDQWdJR0Z1WkNCZ2RtbGtaVzlnSUdOdmJuUnliMnh6TGx4dUlDb2dNaTRnUTI5eWNtVmpkQ0JwYm1GaWFXeHBkSGtnZEc4Z2MzUjViR1VnWTJ4cFkydGhZbXhsSUdCcGJuQjFkR0FnZEhsd1pYTWdhVzRnYVU5VExseHVJQ29nTXk0Z1NXMXdjbTkyWlNCMWMyRmlhV3hwZEhrZ1lXNWtJR052Ym5OcGMzUmxibU41SUc5bUlHTjFjbk52Y2lCemRIbHNaU0JpWlhSM1pXVnVJR2x0WVdkbExYUjVjR1ZjYmlBcUlDQWdJR0JwYm5CMWRHQWdZVzVrSUc5MGFHVnljeTVjYmlBcUwxeHVYRzVpZFhSMGIyNHNYRzVvZEcxc0lHbHVjSFYwVzNSNWNHVTlYQ0ppZFhSMGIyNWNJbDBzSUM4cUlERWdLaTljYm1sdWNIVjBXM1I1Y0dVOVhDSnlaWE5sZEZ3aVhTeGNibWx1Y0hWMFczUjVjR1U5WENKemRXSnRhWFJjSWwwZ2UxeHVJQ0F0ZDJWaWEybDBMV0Z3Y0dWaGNtRnVZMlU2SUdKMWRIUnZianNnTHlvZ01pQXFMMXh1SUNCamRYSnpiM0k2SUhCdmFXNTBaWEk3SUM4cUlETWdLaTljYm4xY2JseHVMeW9xWEc0Z0tpQlNaUzF6WlhRZ1pHVm1ZWFZzZENCamRYSnpiM0lnWm05eUlHUnBjMkZpYkdWa0lHVnNaVzFsYm5SekxseHVJQ292WEc1Y2JtSjFkSFJ2Ymx0a2FYTmhZbXhsWkYwc1hHNW9kRzFzSUdsdWNIVjBXMlJwYzJGaWJHVmtYU0I3WEc0Z0lHTjFjbk52Y2pvZ1pHVm1ZWFZzZER0Y2JuMWNibHh1THlvcVhHNGdLaUJTWlcxdmRtVWdhVzV1WlhJZ2NHRmtaR2x1WnlCaGJtUWdZbTl5WkdWeUlHbHVJRVpwY21WbWIzZ2dOQ3N1WEc0Z0tpOWNibHh1WW5WMGRHOXVPam90Ylc5NkxXWnZZM1Z6TFdsdWJtVnlMRnh1YVc1d2RYUTZPaTF0YjNvdFptOWpkWE10YVc1dVpYSWdlMXh1SUNCaWIzSmtaWEk2SURBN1hHNGdJSEJoWkdScGJtYzZJREE3WEc1OVhHNWNiaThxS2x4dUlDb2dRV1JrY21WemN5QkdhWEpsWm05NElEUXJJSE5sZEhScGJtY2dZR3hwYm1VdGFHVnBaMmgwWUNCdmJpQmdhVzV3ZFhSZ0lIVnphVzVuSUdBaGFXMXdiM0owWVc1MFlDQnBibHh1SUNvZ2RHaGxJRlZCSUhOMGVXeGxjMmhsWlhRdVhHNGdLaTljYmx4dWFXNXdkWFFnZTF4dUlDQnNhVzVsTFdobGFXZG9kRG9nYm05eWJXRnNPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFbDBKM01nY21WamIyMXRaVzVrWldRZ2RHaGhkQ0I1YjNVZ1pHOXVKM1FnWVhSMFpXMXdkQ0IwYnlCemRIbHNaU0IwYUdWelpTQmxiR1Z0Wlc1MGN5NWNiaUFxSUVacGNtVm1iM2duY3lCcGJYQnNaVzFsYm5SaGRHbHZiaUJrYjJWemJpZDBJSEpsYzNCbFkzUWdZbTk0TFhOcGVtbHVaeXdnY0dGa1pHbHVaeXdnYjNJZ2QybGtkR2d1WEc0Z0tseHVJQ29nTVM0Z1FXUmtjbVZ6Y3lCaWIzZ2djMmw2YVc1bklITmxkQ0IwYnlCZ1kyOXVkR1Z1ZEMxaWIzaGdJR2x1SUVsRklEZ3ZPUzh4TUM1Y2JpQXFJREl1SUZKbGJXOTJaU0JsZUdObGMzTWdjR0ZrWkdsdVp5QnBiaUJKUlNBNEx6a3ZNVEF1WEc0Z0tpOWNibHh1YVc1d2RYUmJkSGx3WlQxY0ltTm9aV05yWW05NFhDSmRMRnh1YVc1d2RYUmJkSGx3WlQxY0luSmhaR2x2WENKZElIdGNiaUFnWW05NExYTnBlbWx1WnpvZ1ltOXlaR1Z5TFdKdmVEc2dMeW9nTVNBcUwxeHVJQ0J3WVdSa2FXNW5PaUF3T3lBdktpQXlJQ292WEc1OVhHNWNiaThxS2x4dUlDb2dSbWw0SUhSb1pTQmpkWEp6YjNJZ2MzUjViR1VnWm05eUlFTm9jbTl0WlNkeklHbHVZM0psYldWdWRDOWtaV055WlcxbGJuUWdZblYwZEc5dWN5NGdSbTl5SUdObGNuUmhhVzVjYmlBcUlHQm1iMjUwTFhOcGVtVmdJSFpoYkhWbGN5QnZaaUIwYUdVZ1lHbHVjSFYwWUN3Z2FYUWdZMkYxYzJWeklIUm9aU0JqZFhKemIzSWdjM1I1YkdVZ2IyWWdkR2hsWEc0Z0tpQmtaV055WlcxbGJuUWdZblYwZEc5dUlIUnZJR05vWVc1blpTQm1jbTl0SUdCa1pXWmhkV3gwWUNCMGJ5QmdkR1Y0ZEdBdVhHNGdLaTljYmx4dWFXNXdkWFJiZEhsd1pUMWNJbTUxYldKbGNsd2lYVG82TFhkbFltdHBkQzFwYm01bGNpMXpjR2x1TFdKMWRIUnZiaXhjYm1sdWNIVjBXM1I1Y0dVOVhDSnVkVzFpWlhKY0lsMDZPaTEzWldKcmFYUXRiM1YwWlhJdGMzQnBiaTFpZFhSMGIyNGdlMXh1SUNCb1pXbG5hSFE2SUdGMWRHODdYRzU5WEc1Y2JpOHFLbHh1SUNvZ01TNGdRV1JrY21WemN5QmdZWEJ3WldGeVlXNWpaV0FnYzJWMElIUnZJR0J6WldGeVkyaG1hV1ZzWkdBZ2FXNGdVMkZtWVhKcElEVWdZVzVrSUVOb2NtOXRaUzVjYmlBcUlESXVJRUZrWkhKbGMzTWdZR0p2ZUMxemFYcHBibWRnSUhObGRDQjBieUJnWW05eVpHVnlMV0p2ZUdBZ2FXNGdVMkZtWVhKcElEVWdZVzVrSUVOb2NtOXRaVnh1SUNvZ0lDQWdLR2x1WTJ4MVpHVWdZQzF0YjNwZ0lIUnZJR1oxZEhWeVpTMXdjbTl2WmlrdVhHNGdLaTljYmx4dWFXNXdkWFJiZEhsd1pUMWNJbk5sWVhKamFGd2lYU0I3WEc0Z0lDMTNaV0pyYVhRdFlYQndaV0Z5WVc1alpUb2dkR1Y0ZEdacFpXeGtPeUF2S2lBeElDb3ZYRzRnSUMxdGIzb3RZbTk0TFhOcGVtbHVaem9nWTI5dWRHVnVkQzFpYjNnN1hHNGdJQzEzWldKcmFYUXRZbTk0TFhOcGVtbHVaem9nWTI5dWRHVnVkQzFpYjNnN0lDOHFJRElnS2k5Y2JpQWdZbTk0TFhOcGVtbHVaem9nWTI5dWRHVnVkQzFpYjNnN1hHNTlYRzVjYmk4cUtseHVJQ29nVW1WdGIzWmxJR2x1Ym1WeUlIQmhaR1JwYm1jZ1lXNWtJSE5sWVhKamFDQmpZVzVqWld3Z1luVjBkRzl1SUdsdUlGTmhabUZ5YVNCaGJtUWdRMmh5YjIxbElHOXVJRTlUSUZndVhHNGdLaUJUWVdaaGNta2dLR0oxZENCdWIzUWdRMmh5YjIxbEtTQmpiR2x3Y3lCMGFHVWdZMkZ1WTJWc0lHSjFkSFJ2YmlCM2FHVnVJSFJvWlNCelpXRnlZMmdnYVc1d2RYUWdhR0Z6WEc0Z0tpQndZV1JrYVc1bklDaGhibVFnWUhSbGVIUm1hV1ZzWkdBZ1lYQndaV0Z5WVc1alpTa3VYRzRnS2k5Y2JseHVhVzV3ZFhSYmRIbHdaVDFjSW5ObFlYSmphRndpWFRvNkxYZGxZbXRwZEMxelpXRnlZMmd0WTJGdVkyVnNMV0oxZEhSdmJpeGNibWx1Y0hWMFczUjVjR1U5WENKelpXRnlZMmhjSWwwNk9pMTNaV0pyYVhRdGMyVmhjbU5vTFdSbFkyOXlZWFJwYjI0Z2UxeHVJQ0F0ZDJWaWEybDBMV0Z3Y0dWaGNtRnVZMlU2SUc1dmJtVTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1JHVm1hVzVsSUdOdmJuTnBjM1JsYm5RZ1ltOXlaR1Z5TENCdFlYSm5hVzRzSUdGdVpDQndZV1JrYVc1bkxseHVJQ292WEc1Y2JtWnBaV3hrYzJWMElIdGNiaUFnWW05eVpHVnlPaUF4Y0hnZ2MyOXNhV1FnSTJNd1l6QmpNRHRjYmlBZ2JXRnlaMmx1T2lBd0lESndlRHRjYmlBZ2NHRmtaR2x1WnpvZ01DNHpOV1Z0SURBdU5qSTFaVzBnTUM0M05XVnRPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlERXVJRU52Y25KbFkzUWdZR052Ykc5eVlDQnViM1FnWW1WcGJtY2dhVzVvWlhKcGRHVmtJR2x1SUVsRklEZ3ZPUzVjYmlBcUlESXVJRkpsYlc5MlpTQndZV1JrYVc1bklITnZJSEJsYjNCc1pTQmhjbVZ1SjNRZ1kyRjFaMmgwSUc5MWRDQnBaaUIwYUdWNUlIcGxjbThnYjNWMElHWnBaV3hrYzJWMGN5NWNiaUFxTDF4dVhHNXNaV2RsYm1RZ2UxeHVJQ0JpYjNKa1pYSTZJREE3SUM4cUlERWdLaTljYmlBZ2NHRmtaR2x1WnpvZ01Ec2dMeW9nTWlBcUwxeHVmVnh1WEc0dktpcGNiaUFxSUZKbGJXOTJaU0JrWldaaGRXeDBJSFpsY25ScFkyRnNJSE5qY205c2JHSmhjaUJwYmlCSlJTQTRMemt1WEc0Z0tpOWNibHh1ZEdWNGRHRnlaV0VnZTF4dUlDQnZkbVZ5Wm14dmR6b2dZWFYwYnp0Y2JuMWNibHh1THlvcVhHNGdLaUJFYjI0bmRDQnBibWhsY21sMElIUm9aU0JnWm05dWRDMTNaV2xuYUhSZ0lDaGhjSEJzYVdWa0lHSjVJR0VnY25Wc1pTQmhZbTkyWlNrdVhHNGdLaUJPVDFSRk9pQjBhR1VnWkdWbVlYVnNkQ0JqWVc1dWIzUWdjMkZtWld4NUlHSmxJR05vWVc1blpXUWdhVzRnUTJoeWIyMWxJR0Z1WkNCVFlXWmhjbWtnYjI0Z1QxTWdXQzVjYmlBcUwxeHVYRzV2Y0hSbmNtOTFjQ0I3WEc0Z0lHWnZiblF0ZDJWcFoyaDBPaUJpYjJ4a08xeHVmVnh1WEc0dktpQlVZV0pzWlhOY2JpQWdJRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5SUNvdlhHNWNiaThxS2x4dUlDb2dVbVZ0YjNabElHMXZjM1FnYzNCaFkybHVaeUJpWlhSM1pXVnVJSFJoWW14bElHTmxiR3h6TGx4dUlDb3ZYRzVjYm5SaFlteGxJSHRjYmlBZ1ltOXlaR1Z5TFdOdmJHeGhjSE5sT2lCamIyeHNZWEJ6WlR0Y2JpQWdZbTl5WkdWeUxYTndZV05wYm1jNklEQTdYRzU5WEc1Y2JuUmtMRnh1ZEdnZ2UxeHVJQ0J3WVdSa2FXNW5PaUF3TzF4dWZWeHVJaXdpTHlvZ1gyeGhlVzkxZEM1elkzTnpYRzRnSUNBOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBTQXFMMXh1WEc0dkx5Qk1ZWGx2ZFhSY2JpUmliMlI1VFdGNFYybGtkR2c2SURRMGNtVnRPMXh1SkdKdlpIbE5hVzVYYVdSMGFEb2dNVGh5WlcwN1hHNGtiV0Z5WjJsdU9pQXljbVZ0TzF4dVhHNGxZMjl1ZEdWdWRDMTNhV1IwYUNCN1hHNGdJRzFoZUMxM2FXUjBhRG9nSkdKdlpIbE5ZWGhYYVdSMGFEdGNiaUFnZDJsa2RHZzZJRGN3SlR0Y2JpQWdiV0Z5WjJsdUxYSnBaMmgwT2lCaGRYUnZPMXh1SUNCdFlYSm5hVzR0YkdWbWREb2dZWFYwYnp0Y2JseHVJQ0JBYVc1amJIVmtaU0J0WldScFlTaHpjQ2tnZTF4dUlDQWdJSGRwWkhSb09pQTVNQ1U3WEc0Z0lDQWdiV0Z5WjJsdUxYSnBaMmgwT2lBMUpUdGNiaUFnSUNCdFlYSm5hVzR0YkdWbWREb2dOU1U3WEc0Z0lIMWNibjFjYmx4dUxtY3RhR1ZoWkdWeUlIdGNiaUFnY0c5emFYUnBiMjQ2SUhKbGJHRjBhWFpsTzF4dUlDQnRZWEpuYVc0dFltOTBkRzl0T2lBeWNtVnRPMXh1WEc0Z0lDNWpMWE5wZEdWdVlXMWxJSHRjYmlBZ0lDQkFaWGgwWlc1a0lDVmpiMjUwWlc1MExYZHBaSFJvTzF4dUlDQjlYRzVjYmlBZ0xtTXRjMmwwWlc1aGJXVWdQaUJoSUh0Y2JpQWdJQ0IwWlhoMExYTm9ZV1J2ZHpvZ01DQXdJSFJ5WVc1emNHRnlaVzUwTzF4dUlDQWdJSFJ5WVc1emFYUnBiMjQ2SUhSbGVIUXRjMmhoWkc5M0lDNDBjeUJsWVhObE8xeHVJQ0FnSUdOdmJHOXlPaUFrWTI5c2IzSXRZbUZ6WlR0Y2JseHVJQ0FnSUNZNmFHOTJaWElnZTF4dUlDQWdJQ0FnZEdWNGRDMXphR0ZrYjNjNklHeHZibWR6YUdGa2IzY29JelUwTXl3Z055azdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNiaTVwYm1SbGVDQXVaeTFvWldGa1pYSWdlMXh1SUNCb1pXbG5hSFE2SURRd2RtZzdYRzVjYmlBZ0xtTXRjMmwwWlc1aGJXVWdlMXh1SUNBZ0lIQnZjMmwwYVc5dU9pQmhZbk52YkhWMFpUdGNiaUFnSUNCMGIzQTZJREE3WEc0Z0lDQWdjbWxuYUhRNklEQTdYRzRnSUNBZ1ltOTBkRzl0T2lBd08xeHVJQ0FnSUd4bFpuUTZJREE3WEc0Z0lDQWdiV0Z5WjJsdU9pQmhkWFJ2TzF4dUlDQWdJR2hsYVdkb2REb2dKR3hwYm1VdGFHVnBaMmgwTFdKaGMyVWdLaUF4WlcwN1hHNGdJQ0FnZDJsa2RHZzZJREV3TUNVN1hHNGdJQ0FnWm05dWRDMXphWHBsT2lBeE1IWnRhVzQ3WEc0Z0lDQWdkR1Y0ZEMxaGJHbG5iam9nWTJWdWRHVnlPMXh1WEc0Z0lDQWdRR2x1WTJ4MVpHVWdiV1ZrYVdFb2MzQXBJSHRjYmlBZ0lDQWdJR1p2Ym5RdGMybDZaVG9nTVRKMmJXbHVPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzV6YVhSbFpHVnpZM0pwY0hScGIyNGdlMXh1SUNBZ0lIQnZjMmwwYVc5dU9pQmhZbk52YkhWMFpUdGNiaUFnSUNCaWIzUjBiMjA2SUM0eU5YSmxiVHRjYmlBZ0lDQjBaWGgwTFdGc2FXZHVPaUJqWlc1MFpYSTdYRzRnSUNBZ2NtbG5hSFE2SURGeVpXMDdYRzRnSUNBZ2JHVm1kRG9nTVhKbGJUdGNiaUFnZlZ4dWZWeHVYRzVjYmk1dFlXbHVJSHRjYmlBZ1FHVjRkR1Z1WkNBbFkyOXVkR1Z1ZEMxM2FXUjBhRHRjYmlBZ2JXRnlaMmx1TFdKdmRIUnZiVG9nSkcxaGNtZHBianRjYm4xY2JseHVMbWRzYjJKaGJFWnZiM1JsY2lCN1hHNGdJRUJsZUhSbGJtUWdKV052Ym5SbGJuUXRkMmxrZEdnN1hHNGdJSEJ2YzJsMGFXOXVPaUJ5Wld4aGRHbDJaVHRjYmlBZ2NHRmtaR2x1WnkxMGIzQTZJQ1J0WVhKbmFXNGdMeUF5TzF4dUlDQndZV1JrYVc1bkxXSnZkSFJ2YlRvZ0pHMWhjbWRwYmlBdklESTdYRzRnSUcxaGNtZHBiaTEwYjNBNklDUnRZWEpuYVc0N1hHNWNiaUFnTG5OdWN5MXNhWE4wSUh0Y2JpQWdJQ0J3YjNOcGRHbHZiam9nWVdKemIyeDFkR1U3WEc0Z0lDQWdZbTkwZEc5dE9pQXhjbVZ0TzF4dUlDQWdJSEpwWjJoME9pQXdPMXh1SUNBZ0lHMWhjbWRwYmpvZ01EdGNiaUFnSUNCMFpYaDBMV0ZzYVdkdU9pQnlhV2RvZER0Y2JseHVJQ0FnSUNZZ1BpQnNhU0I3WEc0Z0lDQWdJQ0J0WVhKbmFXNHRiR1ZtZERvZ01YSmxiVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1TG1KaFkyc3lkRzl3SUh0Y2JpQWdkR1Y0ZEMxaGJHbG5iam9nWTJWdWRHVnlPMXh1WEc0Z0lDWWdQaUJoSUh0Y2JpQWdJQ0JrYVhOd2JHRjVPaUJwYm14cGJtVXRZbXh2WTJzN1hHNGdJQ0FnYUdWcFoyaDBPaUF4WlcwZ0tpQWtiR2x1WlMxb1pXbG5hSFF0WW1GelpUdGNiaUFnSUNCM2FXUjBhRG9nTVdWdElDb2dKR3hwYm1VdGFHVnBaMmgwTFdKaGMyVTdYRzRnSUNBZ1FHVjRkR1Z1WkNBbFptOXVkQzF6YVhwbExXeGhjbWRsTFhnN1hHNGdJQ0FnWW05eVpHVnlPaUF4Y0hnZ2MyOXNhV1FnSkdOdmJHOXlMV0poYzJVN1hHNGdJQ0FnWW05eVpHVnlMWEpoWkdsMWN6b2dOVEVsTzF4dUlDQWdJSFJsZUhRdFpHVmpiM0poZEdsdmJqb2dibTl1WlR0Y2JpQWdJQ0IyWlhKMGFXTmhiQzFoYkdsbmJqb2diV2xrWkd4bE8xeHVJQ0I5WEc1OVhHNWNiaTV6YVhSbExXNWhkaUI3WEc0Z0lHMWhjbWRwYmpvZ01YSmxiU0F3TzF4dUlDQndZV1JrYVc1bk9pQXdPMXh1SUNCc2FYTjBMWE4wZVd4bE9pQnViMjVsTzF4dUlDQkFaWGgwWlc1a0lDNWpMV1pzWVhRdGJHbHpkRHRjYmx4dUlDQW1JRDRnYkdrZ2UxeHVJQ0FnSUhSbGVIUXRkSEpoYm5ObWIzSnRPaUIxY0hCbGNtTmhjMlU3WEc0Z0lIMWNibHh1SUNBbUlENGdiR2tnUGlCaElIdGNiaUFnSUNCMFpYaDBMV1JsWTI5eVlYUnBiMjQ2SUc1dmJtVTdYRzRnSUgxY2JseHVJQ0FtSUQ0Z2JHa2dQaUJoT21odmRtVnlJSHRjYmlBZ0lDQjBaWGgwTFdSbFkyOXlZWFJwYjI0NklIVnVaR1Z5YkdsdVpUdGNiaUFnZlZ4dWZWeHVYRzR1WTI5d2VYSnBaMmgwSUh0Y2JpQWdiV0Z5WjJsdU9pQXVOV1Z0SURBN1hHNWNiaUFnWVN4Y2JpQWdZVHAyYVhOcGRHVmtJSHRjYmlBZ0lDQmpiMnh2Y2pvZ0pHTnZiRzl5TFhSbGVIUTdYRzRnSUNBZ2RHVjRkQzFrWldOdmNtRjBhVzl1T2lCdWIyNWxPMXh1SUNCOVhHNTlJaXdpTHk4Z1BUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMGdMMXh1THk4Z1gyMXBlR2x1TG5OamMzTmNiaTh2SUcxcGVHbHVJT09DaENCbWRXNWpkR2x2YnVPQnF1T0JxVnh1THk4Z1BUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMGdMMXh1WEc1Y2JpOHZJR1p2Ym5RdGMybDZaU0RqZ3BKbGJlT0JxSEpsYmVPQnArV0h1dVdLbTF4dVFHMXBlR2x1SUdaNktDUndlQ3dnSkdKaGMyVTZKR1p2Ym5RdGMybDZaUzFpWVhObEtTQjdYRzRnSUdadmJuUXRjMmw2WlRvZ1pXMG9KSEI0TENBa1ltRnpaU2s3WEc0Z0lFQnBaaUFrWW1GelpTQWhQU0FrWm05dWRDMXphWHBsTFdKaGMyVWdlMXh1SUNBZ0lHWnZiblF0YzJsNlpUb2djbVZ0S0NSd2VDazdYRzRnSUgxY2JuMWNibHh1THk4Z2JXVmthV0VnY1hWbGNua2c0NEd1NTY2aDU1Q0dYRzVBYldsNGFXNGdiV1ZrYVdFb0pHSndLU0I3WEc0Z0lDUmljQzEzYVdSMGFEb2daVzBvTnpZNEtUdGNiaUFnUUdsbUlDUmljQ0E5UFNBbmMzQW5JSHRjYmlBZ0lDQkFiV1ZrYVdFZ2MyTnlaV1Z1SUdGdVpDQW9iV0Y0TFhkcFpIUm9PaUFrWW5BdGQybGtkR2dwSUh0Y2JpQWdJQ0FnSUVCamIyNTBaVzUwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JBWld4elpTQnBaaUFrWW5BZ1BUMGdKMjFwWkNjZ2UxeHVJQ0FnSUVCdFpXUnBZU0J6WTNKbFpXNGdZVzVrSUNodGFXNHRkMmxrZEdnNklEazRNSEI0S1NCN1hHNGdJQ0FnSUNCQVkyOXVkR1Z1ZER0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnUUdWc2MyVWdhV1lnSkdKd0lEMDlJQ2RzWVhKblpTY2dlMXh1SUNBZ0lFQnRaV1JwWVNCelkzSmxaVzRnWVc1a0lDaHRhVzR0ZDJsa2RHZzZJQ1JpY0MxM2FXUjBhQ0FxSURJcElIdGNiaUFnSUNBZ0lFQmpiMjUwWlc1ME8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlNJc0lpOHZJQzB0SUZaaGNtbGhZbXhsSUMwdFhHNWNiaTh2SUVOdmJHOXlYRzVjYmk4dlFtRnpaU0JEYjJ4dmNseHVKR052Ykc5eUxXSmhjMlV0WW14aFkyczZJQ0FnSUNNeVFUSkNNa1U3WEc0a1kyOXNiM0l0WW1GelpTMWliSFZsT2lBZ0lDQWdJekV4TkVJMVJqdGNiaVJqYjJ4dmNpMWlZWE5sTFc5bVpuZG9hWFJsT2lBalJVWkdSa000TzF4dUpHTnZiRzl5TFdKaGMyVXRaM0psWlc0NklDQWdJQ013TUVGQk9EZzdYRzRrWTI5c2IzSXRZbUZ6WlMxc2FXMWxPaUFnSUNBZ0l6ZzFRMEl6TXp0Y2JpUmpiMnh2Y2kxaVlYTmxMV2R5WVhrNklDQWdJQ0FqWldGbFlXVmhPMXh1SkdOdmJHOXlMV0poYzJVdGIzSmhibWRsT2lBZ0lDTkZORFUzTWtVN1hHNWNiaVJqYjJ4dmNpMWlZWE5sTFhkb2FYUmxPaUJzYVdkb2RHVnVLQ1JqYjJ4dmNpMWlZWE5sTFc5bVpuZG9hWFJsTENBNUxqVWxLVHRjYmx4dUpHTnZiRzl5TFdKaGMyVTZJQ0FnSUNBZ0pHTnZiRzl5TFdKaGMyVXRiM0poYm1kbE8xeHVKR052Ykc5eUxXSmhjMlV0YkdsbmFIUTZJR3hwWjJoMFpXNG9KR052Ykc5eUxXSmhjMlVzSURFd0pTazdYRzRrWTI5c2IzSXRZbUZ6WlMxa1lYSnJPaUJrWVhKclpXNG9KR052Ykc5eUxXSmhjMlVzSURFd0pTazdYRzRrWTI5c2IzSXRZbTlrZVMxaVp6b2dJQ0FrWTI5c2IzSXRZbUZ6WlMxM2FHbDBaVHRjYmlSamIyeHZjaTEwWlhoME9pQWtZMjlzYjNJdFltRnpaUzFpYkdGamF6dGNiaVJqYjJ4dmNpMWhZMk5sYm5RNklDQWdJQ1JqYjJ4dmNpMWlZWE5sTFc5eVlXNW5aVHRjYmx4dUpHTnZiRzl5TFd4cGJtczZJQ1JqYjJ4dmNpMWlZWE5sTFdSaGNtczdYRzVjYmk4dklFWnZiblJjYmlSbWIyNTBMWE5wZW1VdFltRnpaVG9nTVRZN1hHNGtiR2x1WlMxb1pXbG5hSFF0WW1GelpUb2dNallnTHlBa1ptOXVkQzF6YVhwbExXSmhjMlU3SWl3aUx5OGdQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDFjYmk4dklGOW1kVzVqZEdsdmJpNXpZM056WEc0dkx5QTlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVnh1WEc0dkx5QndlQ0RqZ3BJZ1pXMGc0NEd1NVlDazQ0R3I1YVNKNW8rYlhHNUFablZ1WTNScGIyNGdaVzBvSkhCNExDQWtZbUZ6WlRva1ptOXVkQzF6YVhwbExXSmhjMlVzSUNSMWJtbDBPbVZ0S1NCN1hHNGdJRUJwWmlBa2RXNXBkQ0E5UFNCbGJTQjdYRzRnSUNBZ1FISmxkSFZ5YmlBb0pIQjRJQzhnSkdKaGMyVXBJQ29nTVdWdE8xeHVJQ0I5UUdWc2MyVnBaaUFrZFc1cGRDQTlQU0J1YjI1bElIdGNiaUFnSUNCQWNtVjBkWEp1SUNna2NIZ2dMeUFrWW1GelpTazdYRzRnSUgxY2JuMWNibHh1THk4Z2NIZ2c0NEtTSUhKbGJTRGpnYTdsZ0tUamdhdmxwSW5tajV0Y2JrQm1kVzVqZEdsdmJpQnlaVzBvSkhCNEtTQjdYRzRnSUVCeVpYUjFjbTRnS0NSd2VDQXZJQ1JtYjI1MExYTnBlbVV0WW1GelpTa2dLaUF4Y21WdE8xeHVmVnh1WEc0dkx5QnlaWFIxY200Z2JHOXVaeTF6YUdGa2IzZGNia0JtZFc1amRHbHZiaUJzYjI1bmMyaGhaRzkzS0NSamIyeHZjaXdnSkdScGN5a2dlMXh1SUNBa2RtRnNPaUF3SURBZ0pHTnZiRzl5TzF4dUlDQkFabTl5SUNScElHWnliMjBnTVNCMGFISnZkV2RvSUNSa2FYTWdlMXh1SUNBZ0lDUjJZV3c2SUNON0pIWmhiSDBzSUNON0pHbDljSGdnSTNza2FYMXdlQ0FqZXlSamIyeHZjbjA3WEc0Z0lIMWNiaUFnUUhKbGRIVnliaUFrZG1Gc08xeHVmU0lzSWk4cUlGOWpiM0psTG5OamMzTmNiaUFnSUQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOUlDb3ZYRzVjYm1oMGJXd2dlMXh1SUNCaVlXTnJaM0p2ZFc1a09pQWtZMjlzYjNJdFltOWtlUzFpWnp0Y2JpQWdZMjlzYjNJNklDUmpiMnh2Y2kxMFpYaDBPMXh1SUNCbWIyNTBMV1poYldsc2VUb2dYQ0pUYjNWeVkyVWdVMkZ1Y3lCUWNtOWNJaXdnWENMamc1TGpnNm5qZ3E3amc0N29wNUxqZ3JRZ1VISnZUbHdpTENCY0lraHBjbUZuYVc1dklFdGhhM1VnUjI5MGFHbGpJRkJ5YjA1Y0lpd2dYQ0xqZzZIamdxVGpnNnJqZ3FwY0lpd2dUV1ZwY25sdkxDQnpZVzV6TFhObGNtbG1PMXh1SUNCbWIyNTBMWE5wZW1VNklDZ2tabTl1ZEMxemFYcGxMV0poYzJVZ0x5QXhOaWtnS3lCbGJUdGNiaUFnYkdsdVpTMW9aV2xuYUhRNklDUnNhVzVsTFdobGFXZG9kQzFpWVhObE8xeHVmVnh1WEc1aElIdGNiaUFnWTI5c2IzSTZJQ1JqYjJ4dmNpMXNhVzVyTzF4dUlDQjBaWGgwTFdSbFkyOXlZWFJwYjI0NklIVnVaR1Z5YkdsdVpUdGNiaUFnZEhKaGJuTnBkR2x2YmpvZ1kyOXNiM0lnTGpFMWN5QmxZWE5sTzF4dWZWeHVYRzVoT21odmRtVnlJSHRjYmlBZ1kyOXNiM0k2SUd4cFoyaDBaVzRvSkdOdmJHOXlMV3hwYm1zc0lERXdKU2s3WEc0Z0lIUmxlSFF0WkdWamIzSmhkR2x2YmpvZ2JtOXVaVHRjYm4xY2JseHVZVHBoWTNScGRtVWdlMXh1SUNCd2IzTnBkR2x2YmpvZ2NtVnNZWFJwZG1VN1hHNGdJSFJ2Y0RvZ01YQjRPMXh1ZlZ4dVhHNWhPblpwYzJsMFpXUWdlMXh1SUNCamIyeHZjam9nWkdGeWEyVnVLQ1JqYjJ4dmNpMXNhVzVyTENBeE1DVXBPMXh1ZlZ4dVhHNW9NU3dnYURJc0lHZ3pMQ0JvTkN3Z2FEVXNJR2cySUh0Y2JpQWdZMnhsWVhJNklHSnZkR2c3WEc0Z0lHWnZiblF0Wm1WaGRIVnlaUzF6WlhSMGFXNW5jem9nWENKclpYSnVYQ0lnTVR0Y2JpQWdabTl1ZEMxMllYSnBZVzUwT2lCd2NtOXdiM0owYVc5dVlXd3RkMmxrZEdnN1hHNTlYRzVjYm1GaVluSmJkR2wwYkdWZElIdGNiaUFnWW05eVpHVnlMV0p2ZEhSdmJTMTNhV1IwYURvZ01EdGNibjFjYmx4dVptbG5kWEpsSUh0Y2JpQWdiV0Z5WjJsdU9pQXdPMXh1ZlZ4dVhHNW1hV2RqWVhCMGFXOXVJSHRjYmlBZ1FHVjRkR1Z1WkNBbFptOXVkQzF6YVhwbExYTnRZV3hzWlhJN1hHNTlYRzVjYmk4cUlDMHRJRk52ZFhKalpTQkRiMlJsSUMwdElDb3ZYRzVqYjJSbElIdGNiaUFnWm05dWRDMW1ZVzFwYkhrNklGd2lVMjkxY21ObElFTnZaR1VnVUhKdlhDSXNJRzF2Ym05emNHRmpaVHRjYm4waUxDSXZMeUE5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFZ4dUx5OGdYMlY0ZEdWdVpITXVjMk56YzF4dUx5OGdjR3hoWTJWb2IyeGtaWEpjYmk4dklEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlYRzVjYmlWbWIyNTBMWFpwWjJFZ2UxeHVJQ0JtYjI1MExXWmhiV2xzZVRvZ1hDSldhV2RoWENJc0lITmhibk10YzJWeWFXWTdYRzRnSUd4bGRIUmxjaTF6Y0dGamFXNW5PaUF4Y0hnN1hHNTlYRzVjYmlWbWIyNTBMV1JsWm1GMWJIUWdlMXh1SUNCbWIyNTBMV1poYldsc2VUb2dYQ0pUYjNWeVkyVWdVMkZ1Y3lCUWNtOWNJaXdnWENMamc1TGpnNm5qZ3E3amc0N29wNUxqZ3JRZ1VISnZUbHdpTENCY0lraHBjbUZuYVc1dklFdGhhM1VnUjI5MGFHbGpJRkJ5YjA1Y0lpd2dYQ0xqZzZIamdxVGpnNnJqZ3FwY0lpd2dUV1ZwY25sdkxDQnpZVzV6TFhObGNtbG1PMXh1SUNCc1pYUjBaWEl0YzNCaFkybHVaem9nTUR0Y2JuMWNibHh1SldadmJuUXRjMmw2WlMxemJXRnNiR1Z5SUh0Y2JpQWdRR2x1WTJ4MVpHVWdabm9vTVRRcE8xeHVmVnh1WEc0bFptOXVkQzF6YVhwbExXSmhjMlVnZTF4dUlDQkFhVzVqYkhWa1pTQm1laWdrWm05dWRDMXphWHBsTFdKaGMyVXBPMXh1ZlZ4dVhHNGxabTl1ZEMxemFYcGxMV3hoY21kbElIdGNiaUFnUUdsdVkyeDFaR1VnWm5vb01UZ3BPMXh1ZlZ4dVhHNGxabTl1ZEMxemFYcGxMV3hoY21kbExYZ2dlMXh1SUNCQWFXNWpiSFZrWlNCbWVpZ3lOQ2s3WEc1OVhHNWNiaVZtYjI1MExYTnBlbVV0YkdGeVoyVXRlSGdnZTF4dUlDQkFhVzVqYkhWa1pTQm1laWd6TWlrN1hHNTlYRzVjYmlWbWIyNTBMWE5wZW1VdGJHRnlaMlV0ZUhoNElIdGNiaUFnUUdsdVkyeDFaR1VnWm5vb05EZ3BPMXh1ZlZ4dVhHNGxjSEpwYldGeWVVaGxZV1JwYm1jZ2UxeHVJQ0J0WVhKbmFXNHRkRzl3T2lBd08xeHVJQ0JBWlhoMFpXNWtJQ1ZtYjI1MExYTnBlbVV0YkdGeVoyVXRlSGc3WEc0Z0lHeHBibVV0YUdWcFoyaDBPaUF4TGpFN1hHNGdJQzEzWldKcmFYUXRabTl1ZEMxemJXOXZkR2hwYm1jNklHRnVkR2xoYkdsaGMyVmtPMXh1SUNCQWFXNWpiSFZrWlNCdFpXUnBZU2h6Y0NrZ2UxeHVJQ0FnSUVCcGJtTnNkV1JsSUdaNktESTBLVHRjYmlBZ2ZWeHVmVnh1WEc0dktpQXRMU0FsWW5WMGRHOXVVMmx0Y0d4bElDMHRJQ292WEc0bFl5MWlkWFIwYjI0Z2UxeHVJQ0JrYVhOd2JHRjVPaUJwYm14cGJtVXRZbXh2WTJzN1hHNGdJSEJoWkdScGJtYzZJRE53ZUNBdU5XVnRPMXh1SUNCaWIzSmtaWEl0WW05MGRHOXRPaUF6Y0hnZ2MyOXNhV1FnWkdGeWEyVnVLQ1JqYjJ4dmNpMWhZMk5sYm5Rc0lERXdKU2s3WEc0Z0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDUmpiMnh2Y2kxaFkyTmxiblE3WEc0Z0lHTnZiRzl5T2lBa1kyOXNiM0l0WW1GelpTMTNhR2wwWlR0Y2JpQWdZbTl5WkdWeUxYSmhaR2wxY3pvZ00zQjRPMXh1SUNCbWIyNTBMWE5wZW1VNklHVnRLREl3S1R0Y2JpQWdRR1Y0ZEdWdVpDQWxabTl1ZEMxMmFXZGhPMXh1SUNCc2FXNWxMV2hsYVdkb2REb2dNUzR4TzF4dUlDQjBjbUZ1YzJsMGFXOXVPaUJoYkd3Z0xqRnpJR1ZoYzJVN1hHNGdJSFJsZUhRdFpHVmpiM0poZEdsdmJqb2dibTl1WlR0Y2JuMWNibHh1SldKMWRIUnZibE5wYlhCc1pTQjdYRzRnSUVCbGVIUmxibVFnSldNdFluVjBkRzl1TzF4dUlDQkFaWGgwWlc1a0lDVm1iMjUwTFdSbFptRjFiSFE3WEc0Z0lIQmhaR1JwYm1jNklERndlQ0ExY0hnZ01uQjRPMXh1SUNCaWIzSmtaWEl0ZDJsa2RHZzZJREFnTVhCNElEQWdNWEI0TzF4dUlDQmliM0prWlhJdGMzUjViR1U2SUhOdmJHbGtPMXh1SUNCaWIzSmtaWEl0Y21Ga2FYVnpPaUExY0hnN1hHNGdJR0poWTJ0bmNtOTFibVF0WTI5c2IzSTZJSFJ5WVc1emNHRnlaVzUwTzF4dUlDQmpiMnh2Y2pvZ0pHTnZiRzl5TFdGalkyVnVkRHRjYmlBZ1ptOXVkQzF6YVhwbE9pQmxiU2d4TmlrN1hHNWNiaUFnSmpwb2IzWmxjaUI3WEc0Z0lDQWdZbUZqYTJkeWIzVnVaRG9nSkdOdmJHOXlMV0ZqWTJWdWREdGNiaUFnSUNCamIyeHZjam9nSkdOdmJHOXlMV0poYzJVdGQyaHBkR1U3WEc0Z0lIMWNibjFjYmlJc0lpOHFJRjlqYjI1d2IyNWxiblF1YzJOemMxeHVJQ0E5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFNBcUwxeHVYRzR1WXkxemFYUmxibUZ0WlNCN1hHNGdJR1p2Ym5RdFptRnRhV3g1T2lCY0lsWnBaMkZjSWl3Z2MyRnVjeTF6WlhKcFpqdGNiaUFnTFhkbFltdHBkQzFtYjI1MExYTnRiMjkwYUdsdVp6b2dZVzUwYVdGc2FXRnpaV1E3WEc1Y2JpQWdZU0I3WEc0Z0lDQWdZMjlzYjNJNklDUmpiMnh2Y2kxMFpYaDBPMXh1SUNBZ0lIUmxlSFF0WkdWamIzSmhkR2x2YmpvZ2JtOXVaVHRjYmlBZ2ZWeHVmVnh1WEc0dVl5MXBZMjl1SUh0Y2JpQWdaR2x6Y0d4aGVUb2dhVzVzYVc1bExXSnNiMk5yTzF4dWZWeHVYRzR1WXkxbWJHRjBMV3hwYzNRZ2UxeHVJQ0JzYVhOMExYTjBlV3hsT2lCdWIyNWxPMXh1SUNCd1lXUmthVzVuTFd4bFpuUTZJREE3WEc1OVhHNWNiaTVqTFdac1lYUXRiR2x6ZENBK0lHeHBMRnh1TG1NdFpteGhkQzFzYVhOMElENGdaSFFzWEc0dVl5MW1iR0YwTFd4cGMzUWdQaUJrWkNCN1hHNGdJR1JwYzNCc1lYazZJR2x1YkdsdVpTMWliRzlqYXp0Y2JpQWdiV0Z5WjJsdUxYSnBaMmgwT2lBdU5YSmxiVHRjYmx4dUlDQW1PbXhoYzNRdFkyaHBiR1FnZTF4dUlDQWdJRzFoY21kcGJpMXlhV2RvZERvZ01EdGNiaUFnZlZ4dWZWeHVYRzR2S2lBdExTQjBZV2NnTFMwZ0tpOWNiaTVqTFhSaFp5QjdYRzRnSUhCdmMybDBhVzl1T2lCeVpXeGhkR2wyWlR0Y2JpQWdaR2x6Y0d4aGVUb2dhVzVzYVc1bExXSnNiMk5yTzF4dUlDQnRZWEpuYVc0dGNtbG5hSFE2SUM0MVpXMDdYRzRnSUhCaFpHUnBibWM2SURBZ01TNDNOV1Z0SURBZ01XVnRPMXh1SUNCaWIzSmtaWEl0Y21Ga2FYVnpPaUJsYlNnektTQXdJREFnWlcwb015azdYRzRnSUdKaFkydG5jbTkxYm1RNklDUmpiMnh2Y2kxaVlYTmxMV2R5WVhrN1hHNGdJQ1k2WW1WbWIzSmxJSHRjYmlBZ0lDQmpiMjUwWlc1ME9pQmNJaUJjSWp0Y2JpQWdJQ0JrYVhOd2JHRjVPaUJpYkc5amF6dGNiaUFnSUNCd2IzTnBkR2x2YmpvZ1lXSnpiMngxZEdVN1hHNGdJQ0FnZEc5d09pQXdPMXh1SUNBZ0lHeGxablE2SUM0MFpXMDdYRzRnSUNBZ1ltOTBkRzl0T2lBd08xeHVJQ0FnSUdobGFXZG9kRG9nWlcwb05DazdYRzRnSUNBZ2QybGtkR2c2SUdWdEtEUXBPMXh1SUNBZ0lHMWhjbWRwYmpvZ1lYVjBienRjYmlBZ0lDQmliM0prWlhJdGNtRmthWFZ6T2lBeE1EQWxPMXh1SUNBZ0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDUmpiMnh2Y2kxaWIyUjVMV0puTzF4dUlDQWdJR3hwYm1VdGFHVnBaMmgwT2lBeE8xeHVJQ0I5WEc0Z0lDWTZZV1owWlhJZ2UxeHVJQ0FnSUdOdmJuUmxiblE2SUZ3aUlGd2lPMXh1SUNBZ0lIQnZjMmwwYVc5dU9pQmhZbk52YkhWMFpUdGNiaUFnSUNCMGIzQTZJREE3WEc0Z0lDQWdjbWxuYUhRNklEQTdYRzRnSUNBZ1ltOTBkRzl0T2lBd08xeHVJQ0FnSUhkcFpIUm9PaUF3TzF4dUlDQWdJR2hsYVdkb2REb2dNRHRjYmlBZ0lDQnRZWEpuYVc0NklHRjFkRzg3WEc0Z0lDQWdZbTl5WkdWeU9pQXhaVzBnYzI5c2FXUWdkSEpoYm5Od1lYSmxiblE3WEc0Z0lDQWdZbTl5WkdWeUxYSnBaMmgwTFdOdmJHOXlPaUFrWTI5c2IzSXRZbTlrZVMxaVp6dGNiaUFnZlZ4dWZWeHVYRzR2S2lBdExTQlRhWFJsVG1GdFpTQXRMU292WEc0dWMybDBaVTVoYldVZ2UxeHVJQ0J6Y0dGdUlIdGNiaUFnSUNCc1pYUjBaWEl0YzNCaFkybHVaem9nTFM0eFpXMDdYRzRnSUgxY2JuMGlMQ0l2S2x4dUlGOXBibVJsZUM1elkzTnpYRzRnVkU5UTQ0T2E0NE84NDRLNDZaYWk2WUNqWEc0Z0tpOWNibHh1TG5OcGRHVkVaWE5qY21sd2RHbHZiaUI3WEc0Z0lHMWhjbWRwYmpvZ01EdGNibjFjYmx4dUxuSmxZMlZ1ZEVGeWRHbGpiR1ZUWldOMGFXOXVJR2d4SUh0Y2JpQWdRR1Y0ZEdWdVpDQWxabTl1ZEMxemFYcGxMV3hoY21kbExYZzdYRzU5WEc1Y2JpNXlaV05sYm5RdFlYSjBhV05zWlNCN1hHNGdJRzFoY21kcGJqb2dNRHRjYmlBZ2NHRmtaR2x1WnpvZ01EdGNiaUFnYkdsemRDMXpkSGxzWlRvZ2JtOXVaVHRjYmlBZ2IzWmxjbVpzYjNjNklHaHBaR1JsYmp0Y2JuMWNibHh1TG5KbFkyVnVkQzFoY25ScFkyeGxMV2wwWlcwZ2UxeHVJQ0JpYjNndGMybDZhVzVuT2lCaWIzSmtaWEl0WW05NE8xeHVJQ0JtYkc5aGREb2diR1ZtZER0Y2JpQWdkMmxrZEdnNklEUTNMalVsTzF4dUlDQnRZWEpuYVc0dGJHVm1kRG9nTlNVN1hHNGdJRzFoY21kcGJpMWliM1IwYjIwNklESnlaVzA3WEc1Y2JpQWdKanB1ZEdndFkyaHBiR1FvTW00ck1pa2dlMXh1SUNBZ0lHTnNaV0Z5T2lCc1pXWjBPMXh1SUNBZ0lHMWhjbWRwYmkxc1pXWjBPaUF3TzF4dUlDQjlYRzVjYmlBZ1FHbHVZMngxWkdVZ2JXVmthV0VvYzNBcElIdGNiaUFnSUhkcFpIUm9PaUF4TURBbE8xeHVJQ0FnYUdWcFoyaDBPaUJoZFhSdk8xeHVJQ0FnYldGeVoybHVPaUF3SURBZ01TNDFjbVZ0SURBN1hHNGdJSDFjYmx4dUlDQW1JRDRnWVNCN1hHNGdJQ0FnWkdsemNHeGhlVG9nWW14dlkyczdYRzRnSUNBZ2RHVjRkQzFrWldOdmNtRjBhVzl1T2lCdWIyNWxPMXh1SUNBZ0lIQmhaR1JwYm1jNklERnlaVzA3WEc0Z0lDQWdkSEpoYm5OcGRHbHZiam9nWVd4c0lDNHljeUJsWVhObE8xeHVYRzRnSUNBZ0pqcG9iM1psY2lCN1hHNGdJQ0FnSUNCaWIzSmtaWEl0Y21Ga2FYVnpPaUJsYlNnMUtUdGNiaUFnSUNBZ0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDUmpiMnh2Y2kxaVlYTmxMV2R5WVhrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYm4xY2JseHVMbkpsWTJWdWRDMWhjblJwWTJ4bExXbDBaVzB0Y0hWaWJHbHphR1ZrTFhScGJXVWdlMXh1SUNCbWIyNTBMV1poYldsc2VUb2dYQ0pXYVdkaFhDSXNJSE5oYm5NdGMyVnlhV1k3WEc0Z0lHTnZiRzl5T2lBa1kyOXNiM0l0ZEdWNGREdGNibjFjYmx4dUxuSmxZMlZ1ZEMxaGNuUnBZMnhsTFdsMFpXMHRkR2wwYkdVZ2UxeHVJQ0J0WVhKbmFXNDZJREE3WEc0Z0lIQmhaR1JwYm1jNklDNHljbVZ0SURBZ0xqTnlaVzA3WEc0Z0lFQmxlSFJsYm1RZ0pXWnZiblF0YzJsNlpTMXNZWEpuWlR0Y2JpQWdabTl1ZEMxM1pXbG5hSFE2SUc1dmNtMWhiRHRjYmlBZ2JHbHVaUzFvWldsbmFIUTZJREV1TWp0Y2JpQWdkR1Y0ZEMxa1pXTnZjbUYwYVc5dU9pQjFibVJsY214cGJtVTdYRzU5WEc1Y2JpNXlaV05sYm5RdFlYSjBhV05zWlMxcGRHVnRPbVpwY25OMExXTm9hV3hrSUh0Y2JpQWdkMmxrZEdnNklERXdNQ1U3WEc0Z0lHaGxhV2RvZERvZ1lYVjBienRjYmlBZ2JXRjRMWGRwWkhSb09pQWtZbTlrZVUxaGVGZHBaSFJvTzF4dUlDQm1iRzloZERvZ2JtOXVaVHRjYmlBZ2JXRnlaMmx1TFd4bFpuUTZJREE3WEc0Z0lHMWhjbWRwYmkxaWIzUjBiMjA2SURKeVpXMDdYRzVjYmlBZ1FHbHVZMngxWkdVZ2JXVmthV0VvYldsa0tTQjdYRzRnSUNBZ2JXRnlaMmx1TFd4bFpuUTZJR0YxZEc4N1hHNGdJQ0FnYldGeVoybHVMWEpwWjJoME9pQmhkWFJ2TzF4dUlDQjlYRzVjYmlBZ0xuSmxZMlZ1ZEMxaGNuUnBZMnhsTFdsMFpXMHRkR2wwYkdVZ2UxeHVJQ0FnSUVCbGVIUmxibVFnSldadmJuUXRjMmw2WlMxc1lYSm5aUzE0ZUR0Y2JpQWdJQ0JtYjI1MExYZGxhV2RvZERvZ1ltOXNaRHRjYmlBZ0lDQjBaWGgwTFdSbFkyOXlZWFJwYjI0NklHNXZibVU3WEc0Z0lDQWdZMjlzYjNJNklDUmpiMnh2Y2kxaVlYTmxPMXh1SUNBZ0lIUmxlSFF0YzJoaFpHOTNPaUJzYjI1bmMyaGhaRzkzS0NObVptWXNNeWs3WEc1Y2JseHVJQ0FnSUVCcGJtTnNkV1JsSUcxbFpHbGhLSE53S1NCN1hHNGdJQ0FnSUNCQWFXNWpiSFZrWlNCbWVpZ3lNaWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTG5KbFkyVnVkQzFoY25ScFkyeGxMV2wwWlcwdGRHbDBiR1VnUGlCaElIdGNiaUFnSUNCMFpYaDBMV1JsWTI5eVlYUnBiMjQ2SUc1dmJtVTdYRzRnSUgxY2JpQWdMbkpsWTJWdWRDMWhjblJwWTJ4bExXbDBaVzB0WkdWelkzSnBjSFJwYjI0Z2UxeHVJQ0FnSUcxaGNtZHBiam9nTUR0Y2JpQWdJQ0JqYjJ4dmNqb2dKR052Ykc5eUxYUmxlSFE3WEc0Z0lDQWdRR1Y0ZEdWdVpDQWxabTl1ZEMxemFYcGxMWE50WVd4c1pYSTdYRzRnSUgxY2JuMGlMQ0l2S2x4dUlGOWhjblJwWTJ4bExuTmpjM05jYmlEb3FKamt1b3ZqZzVyamc3empncmpqZ2E3amdybmpnci9qZ3FUamc2dGNiaW92WEc1Y2JpOHFJQzB0SUVGeWRHbGpiR1VnTFMwZ0tpOWNiaTV3TFdGeWRHbGpiR1V0YUdWaFpHVnlJSHRjYmlBZ2JXRnlaMmx1T2lBMGNtVnRJREE3WEc1OVhHNWNiaTV3TFdGeWRHbGpiR1V0ZEdsMGJHVWdlMXh1SUNCQVpYaDBaVzVrSUNWd2NtbHRZWEo1U0dWaFpHbHVaenRjYm4xY2JseHVMeW9nTFMwZ0xtRnlkR2xqYkdWSmJtWnZJQzB0SUNvdlhHNHVZWEowYVdOc1pTMXBibVp2SUh0Y2JpQWdRR1Y0ZEdWdVpDQWxabTl1ZEMxemFYcGxMWE50WVd4c1pYSTdYRzU5WEc1Y2JpNWhjblJwWTJ4bExXbHVabTh0YkdGaVpXeDdYRzRnSUdac2IyRjBPaUJzWldaME8xeHVmVnh1WEc0dVlYSjBhV05zWlMxcGJtWnZMV3hoWW1Wc0lIdGNibHh1SUNBbU9tRm1kR1Z5SUh0Y2JpQWdJQ0JqYjI1MFpXNTBPaUJjSWpwY0lqdGNiaUFnSUNCdFlYSm5hVzQ2SURBZ0xqRTFjbVZ0TzF4dUlDQWdJR1p2Ym5RdGQyVnBaMmgwT2lCaWIyeGtPMXh1SUNCOVhHNTlYRzVjYmk1aGNuUnBZMnhsTFdsdVptOHRjSEp2Y0NCN1hHNGdJRzFoY21kcGJpMXNaV1owT2lBd08xeHVmVnh1WEc0dVlYSjBhV05zWlMxMFlXY2dlMXh1SUNCQVpYaDBaVzVrSUM1akxYUmhaenRjYm4xY2JseHVMeW9nTFMwZzVweXM1cGFINDRLbzQ0T3E0NEtpSUMwdElDb3ZYRzR1WVhKMGFXTnNaUzFpYjJSNUlIdGNiaUFnYURJZ2UxeHVJQ0FnSUcxaGNtZHBiaTEwYjNBNklETnlaVzA3WEc0Z0lDQWdRR2x1WTJ4MVpHVWdiV1ZrYVdFb2MzQXBJSHRjYmlBZ0lDQWdJR3hwYm1VdGFHVnBaMmgwT2lBb01qQWdMeUFrWm05dWRDMXphWHBsTFdKaGMyVXBPMXh1SUNBZ0lDQWdRR2x1WTJ4MVpHVWdabm9vTWpBcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lIQWdlMXh1SUNBZ0lHMWhjbWRwYmpvZ1pXMG9NalFwSURBN1hHNGdJQ0FnWTI5a1pTQjdYRzRnSUNBZ0lDQnRZWEpuYVc0NklEQWdNbkI0TzF4dUlDQWdJQ0FnY0dGa1pHbHVaem9nTUNBemNIZ2dNbkI0TzF4dUlDQWdJQ0FnWW05eVpHVnlMWEpoWkdsMWN6b2dNM0I0TzF4dUlDQWdJQ0FnWW1GamEyZHliM1Z1WkRvZ0pHTnZiRzl5TFdKaGMyVXRaM0poZVR0Y2JpQWdJQ0FnSUVCbGVIUmxibVFnSldadmJuUXRjMmw2WlMxemJXRnNiR1Z5TzF4dUlDQWdJQ0FnZG1WeWRHbGpZV3d0WVd4cFoyNDZJSFJ2Y0R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCMWJDeHZiQ0I3WEc0Z0lDQWdjR0ZrWkdsdVp5MXNaV1owT2lBeFpXMDdYRzRnSUgxY2JseHVJQ0JrZENCN1hHNGdJQ0FnWm05dWRDMTNaV2xuYUhRNklHSnZiR1E3WEc0Z0lIMWNibHh1SUNCa1pDQjdYRzRnSUNBZ2JXRnlaMmx1TFd4bFpuUTZJREE3WEc0Z0lIMWNibHh1SUNCa1pDQXJJR1IwSUh0Y2JpQWdJQ0J0WVhKbmFXNHRkRzl3T2lBdU5XVnRPMXh1SUNCOVhHNWNiaUFnYUhJZ2UxeHVJQ0FnSUcxaGNtZHBiam9nTVM0M05XVnRJRE5sYlR0Y2JpQWdJQ0JpYjNKa1pYSTZJREE3WEc0Z0lDQWdZbTl5WkdWeUxYUnZjRG9nTGpKbGJTQnpiMnhwWkNBa1kyOXNiM0l0WW1GelpTMW5jbUY1TzF4dUlDQjlYRzVjYmlBZ2RHRmliR1VnZTF4dUlDQWdJRzFoZUMxM2FXUjBhRG9nTVRBd0pUdGNiaUFnSUNCdGFXNHRkMmxrZEdnNklEVXdKVHRjYmlBZ0lDQnRZWEpuYVc0NklERmxiU0JoZFhSdklERXVOelZsYlR0Y2JpQWdJQ0JBYVc1amJIVmtaU0J0WldScFlTaHpjQ2tnZTF4dUlDQWdJQ0FnUUdsdVkyeDFaR1VnWm5vb01UUXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR05oY0hScGIyNGdlMXh1SUNBZ0lHMWhjbWRwYmkxaWIzUjBiMjA2SUM0eU5XVnRPMXh1SUNCOVhHNWNiaUFnZEdRc0lIUm9JSHRjYmlBZ0lDQndZV1JrYVc1bk9pQXhaVzA3WEc0Z0lDQWdRR2x1WTJ4MVpHVWdiV1ZrYVdFb2MzQXBJSHRjYmlBZ0lDQWdJSEJoWkdScGJtYzZJQzR5TldWdE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lIUm9JSHRjYmlBZ0lDQndZV1JrYVc1bkxXSnZkSFJ2YlRvZ0xqVmxiVHRjYmlBZ0lDQmliM0prWlhJdFltOTBkRzl0T2lBeWNIZ2djMjlzYVdRZ0pHTnZiRzl5TFdKaGMyVTdYRzRnSUgxY2JseHVJQ0IwWkNCN1hHNGdJQ0FnWW05eVpHVnlMV0p2ZEhSdmJUb2dNWEI0SUhOdmJHbGtJQ1JqYjJ4dmNpMWlZWE5sTFd4cGJXVTdYRzRnSUgxY2JseHVJQ0JwYldjZ2UxeHVJQ0FnSUcxaGVDMTNhV1IwYURvZ01UQXdKVHRjYmlBZ2ZWeHVYRzRnSUdsdFoxdGpiR0Z6YzE0OVhDSnRkQzFwYldGblpWd2lYU0I3WEc0Z0lDQWdhR1ZwWjJoME9pQmhkWFJ2TzF4dUlDQjlYRzVjYmlBZ0xtMTBMV2x0WVdkbExXeGxablFnZTF4dUlDQWdJR1pzYjJGME9pQnNaV1owTzF4dUlDQWdJRzFoY21kcGJqb2dNQ0FrYldGeVoybHVJQ1J0WVhKbmFXNGdNRHRjYmlBZ0lDQkFhVzVqYkhWa1pTQnRaV1JwWVNoemNDa2dlMXh1SUNBZ0lDQWdiV0Z5WjJsdU9pQXdJQ1J0WVhKbmFXNGdMeUF5SUNSdFlYSm5hVzRnTHlBeUlEQTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMbTEwTFdsdFlXZGxMWEpwWjJoMElIdGNiaUFnSUNCbWJHOWhkRG9nY21sbmFIUTdYRzRnSUNBZ2JXRnlaMmx1T2lBd0lEQWdKRzFoY21kcGJpQWtiV0Z5WjJsdU8xeHVJQ0FnSUVCcGJtTnNkV1JsSUcxbFpHbGhLSE53S1NCN1hHNGdJQ0FnSUNCdFlYSm5hVzQ2SURBZ01DQWtiV0Z5WjJsdUlDOGdNaUFrYldGeVoybHVJQzhnTWp0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdWJYUXRhVzFoWjJVdFkyVnVkR1Z5SUh0Y2JpQWdJQ0JrYVhOd2JHRjVPaUJpYkc5amF6dGNiaUFnSUNCdFlYZ3RkMmxrZEdnNklERXdNQ1U3WEc0Z0lDQWdiV0Z5WjJsdU9pQXdJR0YxZEc4Z0xqVmxiVHRjYmlBZ2ZWeHVYRzRnSUdKc2IyTnJjWFZ2ZEdVZ2UxeHVJQ0FnSUcxaGNtZHBiaTFzWldaME9pQXdPMXh1SUNBZ0lHMWhjbWRwYmkxeWFXZG9kRG9nTUR0Y2JpQWdJQ0J3WVdSa2FXNW5MV3hsWm5RNklERmxiVHRjYmlBZ0lDQmliM0prWlhJdGJHVm1kRG9nTTNCNElITnZiR2xrSUNSamIyeHZjaTFpWVhObExXZHlZWGs3WEc0Z0lIMWNibHh1SUNCamFYUmxJSHRjYmlBZ0lDQjBaWGgwTFdGc2FXZHVPaUJ5YVdkb2REdGNiaUFnZlZ4dWZWeHVYRzR1WTI5a1pTQjdYRzRnSUdSMElIdGNiaUFnSUNCQVpYaDBaVzVrSUNWbWIyNTBMWFpwWjJFN1hHNGdJSDFjYmlBZ1pHUWdlMXh1SUNBZ0lHMWhjbWRwYmpvZ01EdGNiaUFnSUNCQVpYaDBaVzVrSUNWbWIyNTBMWE5wZW1VdGMyMWhiR3hsY2p0Y2JpQWdmVnh1ZlZ4dVhHNHZLaUF0TFNCUmRXOTBaU0F0TFNvdlhHNHVjWFZ2ZEdVZ2UxeHVJQ0J3YjNOcGRHbHZiam9nY21Wc1lYUnBkbVU3WEc0Z0lIQmhaR1JwYm1jNklDNDFaVzBnTVhKbGJTQXpaVzBnTVhKbGJUdGNiaUFnWW1GamEyZHliM1Z1WkRvZ0pHTnZiRzl5TFdKaGMyVXRaM0poZVR0Y2JpQWdaR1FnZTF4dUlDQWdJRzFoY21kcGJpMXNaV1owT2lBd08xeHVJQ0I5WEc0Z0lHSnNiMk5yY1hWdmRHVWdlMXh1SUNBZ0lIQnZjMmwwYVc5dU9pQnlaV3hoZEdsMlpUdGNiaUFnSUNCdFlYSm5hVzQ2SURBN1hHNGdJQ0FnY0dGa1pHbHVaem9nTUR0Y2JpQWdmVnh1SUNBdVkybDBaU0I3WEc0Z0lDQWdjRzl6YVhScGIyNDZJR0ZpYzI5c2RYUmxPMXh1SUNBZ0lISnBaMmgwT2lBeGNtVnRPMXh1SUNBZ0lHSnZkSFJ2YlRvZ01YSmxiVHRjYmlBZ0lDQjBaWGgwTFdGc2FXZHVPaUJ5YVdkb2REdGNiaUFnZlZ4dWZWeHVYRzR1WlcxaVpXUXRhV1p5WVcxbElIdGNiaUFnY0c5emFYUnBiMjQ2SUhKbGJHRjBhWFpsTzF4dUlDQjNhV1IwYURvZ01UQXdKVHRjYmlBZ2NHRmtaR2x1WnkxaWIzUjBiMjA2SURrZ0x5QXhOaUFxSURFd01DVTdYRzVjYmlBZ0ppQStJR2xtY21GdFpTQjdYRzRnSUNBZ2NHOXphWFJwYjI0NklHRmljMjlzZFhSbE8xeHVJQ0FnSUhSdmNEb2dNRHRjYmlBZ0lDQnlhV2RvZERvZ01EdGNiaUFnSUNCaWIzUjBiMjA2SURBN1hHNGdJQ0FnYkdWbWREb2dNRHRjYmlBZ0lDQm9aV2xuYUhRNklERXdNQ1U3WEc0Z0lDQWdkMmxrZEdnNklERXdNQ1U3WEc0Z0lIMWNibjFjYmx4dUx5b2dMUzBnNVkrQzZJQ0Q0NEdyNDRHWDQ0R2ZWMlZpNDRPYTQ0Tzg0NEs0SUMwdElDb3ZYRzR1Y21WbVpYSmxibU5sTFhkbFlpMXdZV2RsSUQ0Z1pHUWdlMXh1SUNCdFlYSm5hVzQ2SURBZ01DQXVNalZ5WlcwN1hHNTlYRzVjYmk4dklIQmxjbTFoYkdsdWExeHVMbkF0WVhKMGFXTnNaUzF3WlhKdFlXeHBibXNnZTF4dUlDQnRZWEpuYVc0NklDUnRZWEpuYVc0Z01EdGNibjFjYmx4dUxuQXRZWEowYVdOc1pTMXdaWEp0WVd4cGJtc3RiR0ZpWld3Z2UxeHVJQ0J0WVhKbmFXNHRkRzl3T2lBa2JXRnlaMmx1SUM4Z01qdGNiaUFnWm05dWRDMTNaV2xuYUhRNklHSnZiR1E3WEc1OVhHNWNiaTV3TFdGeWRHbGpiR1V0Y0dWeWJXRnNhVzVyTFd4cGJtc2dlMXh1SUNCdFlYSm5hVzR0YkdWbWREb2dNRHRjYmlBZ1FHVjRkR1Z1WkNBbFptOXVkQzF6YVhwbExYTnRZV3hzWlhJN1hHNTlYRzVjYmk4dklHRnlkR2xqYkdVZ1ltOTBkRzl0SUdGa2MxeHVMbUZ5ZEdsamJHVkJaSE1nZTF4dUlDQnRZWEpuYVc0NklESnlaVzBnTUR0Y2JuMWNibHh1TG1GeWRHbGpiR1V0WVdSekxYUnBkR3hsSUh0Y2JpQWdRR1Y0ZEdWdVpDQWxabTl1ZEMxemFYcGxMWE50WVd4c1pYSTdYRzRnSUdKdmNtUmxjaTFpYjNSMGIyMDZJREZ3ZUNCemIyeHBaQ0FrWTI5c2IzSXRZbUZ6WlMxbmNtRjVPMXh1ZlZ4dVhHNHZMeUJ3WVdkbGNseHVMbkF0WVhKMGFXTnNaUzF3WVdkbGNpQjdYRzRnSUhCdmMybDBhVzl1T2lCeVpXeGhkR2wyWlR0Y2JpQWdiV0Z5WjJsdU9pQTBjbVZ0SUdGMWRHODdYRzU5WEc1Y2JpNXdMV0Z5ZEdsamJHVXRjR0ZuWlhJdGJHRmlaV3dnZTF4dUlDQjNhV1IwYURvZ05UQWxPMXh1SUNCdFlYSm5hVzR0ZEc5d09pQWtiV0Z5WjJsdUlDOGdNanRjYmlBZ1ptOXVkQzEzWldsbmFIUTZJR0p2YkdRN1hHNTlYRzVjYmk1d0xXRnlkR2xqYkdVdGNHRm5aWEl0YkdsdWF5QjdYRzRnSUdKdmVDMXphWHBwYm1jNklHSnZjbVJsY2kxaWIzZzdYRzRnSUhkcFpIUm9PaUExTUNVN1hHNGdJRzFoY21kcGJpMXNaV1owT2lBd08xeHVJQ0JBWlhoMFpXNWtJQ1ZtYjI1MExYTnBlbVV0YzIxaGJHeGxjanRjYm4xY2JseHVMbkF0WVhKMGFXTnNaUzF3WVdkbGNpMXZiR1JsY2lCN1hHNGdJSEJoWkdScGJtY3RjbWxuYUhRNklERnlaVzA3WEc1Y2JpQWdRR2x1WTJ4MVpHVWdiV1ZrYVdFb2MzQXBJSHRjYmlBZ0lDQndZV1JrYVc1bkxYSnBaMmgwT2lBdU5YSmxiVHRjYmlBZ2ZWeHVmVnh1WEc0dWNDMWhjblJwWTJ4bExYQmhaMlZ5TFc1bGQyVnlJSHRjYmlBZ2NHOXphWFJwYjI0NklHRmljMjlzZFhSbE8xeHVJQ0IwYjNBNklEQTdYRzRnSUhKcFoyaDBPaUF3TzF4dUlDQnRZWEpuYVc0dGRHOXdPaUF3TzF4dUlDQndZV1JrYVc1bkxXeGxablE2SURGeVpXMDdYRzRnSUhSbGVIUXRZV3hwWjI0NklISnBaMmgwTzF4dVhHNGdJRUJwYm1Oc2RXUmxJRzFsWkdsaEtITndLU0I3WEc0Z0lDQWdjR0ZrWkdsdVp5MXNaV1owT2lBdU5YSmxiVHRjYmlBZ2ZWeHVmVnh1WEc0dWNDMWhjblJwWTJ4bExYQmhaMlZ5TFc1bGQyVnlMbkF0WVhKMGFXTnNaUzF3WVdkbGNpMXNhVzVySUh0Y2JpQWdkRzl3T2lBeExqVnlaVzA3WEc1OVhHNWNiaUlzSWk4cUlGOWhjbU5vYVhabExuTmpjM05jYmlBZ1BUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMGdLaTljYmx4dUxtRnlZMmhwZG1WSVpXRmtaWElnZTMxY2JseHVMbUZ5WTJocGRtVXRkR2wwYkdVZ2UxeHVJQ0JBWlhoMFpXNWtJQ1Z3Y21sdFlYSjVTR1ZoWkdsdVp6dGNibjFjYmx4dUxtRnlZMmhwZG1VdGJHbHpkQ0I3WEc0Z0lIQmhaR1JwYm1jdGJHVm1kRG9nTUR0Y2JpQWdiR2x6ZEMxemRIbHNaVG9nYm05dVpUdGNibjFjYmx4dUxtRnlZMmhwZG1VdGJHbHpkQzFwZEdWdElIdGNiaUFnTG1GeWRHbGpiR1V0YVc1bWJ5QjdYRzRnSUNBZ2QybGtkR2c2SUdGMWRHODdYRzRnSUNBZ2JXRnlaMmx1TFdKdmRIUnZiVG9nTGpWeVpXMDdYRzRnSUNBZ2RHVjRkQzFoYkdsbmJqb2diR1ZtZER0Y2JpQWdmVnh1SUNBdVlYSjBhV05zWlMxcGJtWnZMV3hoWW1Wc09tWnBjbk4wTFdOb2FXeGtJSHRjYmlBZ0lDQnRZWEpuYVc0dGJHVm1kRG9nTUR0Y2JpQWdmVnh1ZlZ4dVhHNHVZWEpqYUdsMlpTMXNhWE4wTFdsMFpXMHRkR2wwYkdVZ2UxeHVJQ0J0WVhKbmFXNDZJREFnTUNBeWNtVnRPMXh1SUNCQVpYaDBaVzVrSUNWbWIyNTBMWE5wZW1VdGJHRnlaMlU3WEc0Z0lHeHBibVV0YUdWcFoyaDBPaUF4TGpNN1hHNGdJR1p2Ym5RdGQyVnBaMmgwT2lCaWIyeGtPMXh1SUNBbUlENGdZU0I3WEc0Z0lDQWdkR1Y0ZEMxa1pXTnZjbUYwYVc5dU9pQnViMjVsTzF4dUlDQjlYRzU5WEc0aUxDSXZLbHh1SUY5d1lXZGxMbk5qYzNOY2JpRGpncWJqZ3Fmamc1YmpnNXJqZzd6amdyampnYTdqZ3JuamdyL2pncVRqZzZ0Y2Jpb3ZYRzVjYmk4cUlDMHRJRkJoWjJVZ0xTMGdLaTljYmk1d1lXZGxVMlZqZEdsdmJraGxZV1JsY2lCN1hHNGdJR2d4SUh0Y2JpQWdJQ0JBWlhoMFpXNWtJQ1Z3Y21sdFlYSjVTR1ZoWkdsdVp6dGNiaUFnZlZ4dWZWeHVYRzR2S2lBdExTQlFZV2RsSUVGaWIzVjBJQzB0S2k5Y2JpNXdjbTltYVd4bFVHaHZkRzhnZTF4dUlDQm1iRzloZERvZ2JHVm1kRHRjYmlBZ2QybGtkR2c2SURJMUpUdGNiaUFnYUdWcFoyaDBPaUJoZFhSdk8xeHVJQ0J0WVhndGQybGtkR2c2SURsbGJUdGNiaUFnYldGeVoybHVMWEpwWjJoME9pQXhaVzA3WEc0Z0lHMWhjbWRwYmkxaWIzUjBiMjA2SURGbGJUdGNiaUFnWW05eVpHVnlMWEpoWkdsMWN6b2dOVEFsTzF4dWZTSXNJaThxSVZ4dVhHNW5hWFJvZFdJdVkyOXRJSE4wZVd4bElDaGpLU0JXWVhOcGJIa2dVRzlzYjNadWVXOTJJRHgyWVhOMFFIZG9hWFJsWVc1MGN5NXVaWFErWEc1Y2Jpb3ZYRzVjYmk1b2JHcHpJSHRjYmlBZ1pHbHpjR3hoZVRvZ1lteHZZMnM3WEc0Z0lHOTJaWEptYkc5M0xYZzZJR0YxZEc4N1hHNGdJSEJoWkdScGJtYzZJREF1TldWdE8xeHVJQ0JqYjJ4dmNqb2dJek16TXp0Y2JpQWdZbUZqYTJkeWIzVnVaRG9nSTJZNFpqaG1PRHRjYmlBZ0xYZGxZbXRwZEMxMFpYaDBMWE5wZW1VdFlXUnFkWE4wT2lCdWIyNWxPMXh1ZlZ4dVhHNHVhR3hxY3kxamIyMXRaVzUwTEZ4dUxtUnBabVlnTG1oc2FuTXRhR1ZoWkdWeUxGeHVMbWhzYW5NdGFtRjJZV1J2WXlCN1hHNGdJR052Ykc5eU9pQWpPVGs0TzF4dUlDQm1iMjUwTFhOMGVXeGxPaUJwZEdGc2FXTTdYRzU5WEc1Y2JpNW9iR3B6TFd0bGVYZHZjbVFzWEc0dVkzTnpJQzV5ZFd4bElDNW9iR3B6TFd0bGVYZHZjbVFzWEc0dWFHeHFjeTEzYVc1MWRHbHNjeXhjYmk1dVoybHVlQ0F1YUd4cWN5MTBhWFJzWlN4Y2JpNW9iR3B6TFhOMVluTjBMRnh1TG1oc2FuTXRjbVZ4ZFdWemRDeGNiaTVvYkdwekxYTjBZWFIxY3lCN1hHNGdJR052Ykc5eU9pQWpNek16TzF4dUlDQm1iMjUwTFhkbGFXZG9kRG9nWW05c1pEdGNibjFjYmx4dUxtaHNhbk10Ym5WdFltVnlMRnh1TG1oc2FuTXRhR1Y0WTI5c2IzSXNYRzR1Y25WaWVTQXVhR3hxY3kxamIyNXpkR0Z1ZENCN1hHNGdJR052Ykc5eU9pQWpNREE0TURnd08xeHVmVnh1WEc0dWFHeHFjeTF6ZEhKcGJtY3NYRzR1YUd4cWN5MTBZV2NnTG1oc2FuTXRkbUZzZFdVc1hHNHVhR3hxY3kxd2FIQmtiMk1zWEc0dWFHeHFjeTFrWVhKMFpHOWpMRnh1TG5SbGVDQXVhR3hxY3kxbWIzSnRkV3hoSUh0Y2JpQWdZMjlzYjNJNklDTmtNVFE3WEc1OVhHNWNiaTVvYkdwekxYUnBkR3hsTEZ4dUxtaHNhbk10YVdRc1hHNHVjMk56Y3lBdWFHeHFjeTF3Y21Wd2NtOWpaWE56YjNJZ2UxeHVJQ0JqYjJ4dmNqb2dJemt3TUR0Y2JpQWdabTl1ZEMxM1pXbG5hSFE2SUdKdmJHUTdYRzU5WEc1Y2JpNW9iR3B6TFd4cGMzUWdMbWhzYW5NdGEyVjVkMjl5WkN4Y2JpNW9iR3B6TFhOMVluTjBJSHRjYmlBZ1ptOXVkQzEzWldsbmFIUTZJRzV2Y20xaGJEdGNibjFjYmx4dUxtaHNhbk10WTJ4aGMzTWdMbWhzYW5NdGRHbDBiR1VzWEc0dWFHeHFjeTEwZVhCbExGeHVMblpvWkd3Z0xtaHNhbk10YkdsMFpYSmhiQ3hjYmk1MFpYZ2dMbWhzYW5NdFkyOXRiV0Z1WkNCN1hHNGdJR052Ykc5eU9pQWpORFU0TzF4dUlDQm1iMjUwTFhkbGFXZG9kRG9nWW05c1pEdGNibjFjYmx4dUxtaHNhbk10ZEdGbkxGeHVMbWhzYW5NdGRHRm5JQzVvYkdwekxYUnBkR3hsTEZ4dUxtaHNhbk10Y25Wc1pYTWdMbWhzYW5NdGNISnZjR1Z5ZEhrc1hHNHVaR3BoYm1kdklDNW9iR3B6TFhSaFp5QXVhR3hxY3kxclpYbDNiM0prSUh0Y2JpQWdZMjlzYjNJNklDTXdNREF3T0RBN1hHNGdJR1p2Ym5RdGQyVnBaMmgwT2lCdWIzSnRZV3c3WEc1OVhHNWNiaTVvYkdwekxXRjBkSEpwWW5WMFpTeGNiaTVvYkdwekxYWmhjbWxoWW14bExGeHVMbXhwYzNBZ0xtaHNhbk10WW05a2VTQjdYRzRnSUdOdmJHOXlPaUFqTURBNE1EZ3dPMXh1ZlZ4dVhHNHVhR3hxY3kxeVpXZGxlSEFnZTF4dUlDQmpiMnh2Y2pvZ0l6QXdPVGt5Tmp0Y2JuMWNibHh1TG1oc2FuTXRjM2x0WW05c0xGeHVMbkoxWW5rZ0xtaHNhbk10YzNsdFltOXNJQzVvYkdwekxYTjBjbWx1Wnl4Y2JpNXNhWE53SUM1b2JHcHpMV3RsZVhkdmNtUXNYRzR1WTJ4dmFuVnlaU0F1YUd4cWN5MXJaWGwzYjNKa0xGeHVMbk5qYUdWdFpTQXVhR3hxY3kxclpYbDNiM0prTEZ4dUxuUmxlQ0F1YUd4cWN5MXpjR1ZqYVdGc0xGeHVMbWhzYW5NdGNISnZiWEIwSUh0Y2JpQWdZMjlzYjNJNklDTTVPVEF3TnpNN1hHNTlYRzVjYmk1b2JHcHpMV0oxYVd4MFgybHVJSHRjYmlBZ1kyOXNiM0k2SUNNd01EZzJZak03WEc1OVhHNWNiaTVvYkdwekxYQnlaWEJ5YjJObGMzTnZjaXhjYmk1b2JHcHpMWEJ5WVdkdFlTeGNiaTVvYkdwekxYQnBMRnh1TG1oc2FuTXRaRzlqZEhsd1pTeGNiaTVvYkdwekxYTm9aV0poYm1jc1hHNHVhR3hxY3kxalpHRjBZU0I3WEc0Z0lHTnZiRzl5T2lBak9UazVPMXh1SUNCbWIyNTBMWGRsYVdkb2REb2dZbTlzWkR0Y2JuMWNibHh1TG1oc2FuTXRaR1ZzWlhScGIyNGdlMXh1SUNCaVlXTnJaM0p2ZFc1a09pQWpabVJrTzF4dWZWeHVYRzR1YUd4cWN5MWhaR1JwZEdsdmJpQjdYRzRnSUdKaFkydG5jbTkxYm1RNklDTmtabVE3WEc1OVhHNWNiaTVrYVdabUlDNW9iR3B6TFdOb1lXNW5aU0I3WEc0Z0lHSmhZMnRuY205MWJtUTZJQ013TURnMllqTTdYRzU5WEc1Y2JpNW9iR3B6TFdOb2RXNXJJSHRjYmlBZ1kyOXNiM0k2SUNOaFlXRTdYRzU5WEc0aVhTd2ljMjkxY21ObFVtOXZkQ0k2SWk5emIzVnlZMlV2SW4wPSAqLyIsIi8qISBub3JtYWxpemUuY3NzIHYzLjAuMCB8IE1JVCBMaWNlbnNlIHwgZ2l0LmlvL25vcm1hbGl6ZSAqL1xuXG4vKipcbiAqIDEuIFNldCBkZWZhdWx0IGZvbnQgZmFtaWx5IHRvIHNhbnMtc2VyaWYuXG4gKiAyLiBQcmV2ZW50IGlPUyB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZSwgd2l0aG91dCBkaXNhYmxpbmdcbiAqICAgIHVzZXIgem9vbS5cbiAqL1xuXG5odG1sIHtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7IC8qIDEgKi9cbiAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgbWFyZ2luLlxuICovXG5cbmJvZHkge1xuICBtYXJnaW46IDA7XG59XG5cbi8qIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUUgOC85LlxuICovXG5cbmFydGljbGUsXG5hc2lkZSxcbmRldGFpbHMsXG5maWdjYXB0aW9uLFxuZmlndXJlLFxuZm9vdGVyLFxuaGVhZGVyLFxuaGdyb3VwLFxubWFpbixcbm5hdixcbnNlY3Rpb24sXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCBgaW5saW5lLWJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGluIElFIDgvOS5cbiAqIDIuIE5vcm1hbGl6ZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgb2YgYHByb2dyZXNzYCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAqL1xuXG5hdWRpbyxcbmNhbnZhcyxcbnByb2dyZXNzLFxudmlkZW8ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IC8qIDEgKi9cbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyAvKiAyICovXG59XG5cbi8qKlxuICogUHJldmVudCBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nIGBhdWRpb2Agd2l0aG91dCBjb250cm9scy5cbiAqIFJlbW92ZSBleGNlc3MgaGVpZ2h0IGluIGlPUyA1IGRldmljZXMuXG4gKi9cblxuYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgaGVpZ2h0OiAwO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgYFtoaWRkZW5dYCBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS5cbiAqIEhpZGUgdGhlIGB0ZW1wbGF0ZWAgZWxlbWVudCBpbiBJRSwgU2FmYXJpLCBhbmQgRmlyZWZveCA8IDIyLlxuICovXG5cbltoaWRkZW5dLFxudGVtcGxhdGUge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4vKiBMaW5rc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBjb2xvciBmcm9tIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuXG5hIHtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG59XG5cbi8qKlxuICogSW1wcm92ZSByZWFkYWJpbGl0eSB3aGVuIGZvY3VzZWQgYW5kIGFsc28gbW91c2UgaG92ZXJlZCBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuYTphY3RpdmUsXG5hOmhvdmVyIHtcbiAgb3V0bGluZTogMDtcbn1cblxuLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOSwgU2FmYXJpIDUsIGFuZCBDaHJvbWUuXG4gKi9cblxuYWJiclt0aXRsZV0ge1xuICBib3JkZXItYm90dG9tOiAxcHggZG90dGVkO1xufVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGUgc2V0IHRvIGBib2xkZXJgIGluIEZpcmVmb3ggNCssIFNhZmFyaSA1LCBhbmQgQ2hyb21lLlxuICovXG5cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gU2FmYXJpIDUgYW5kIENocm9tZS5cbiAqL1xuXG5kZm4ge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbi8qKlxuICogQWRkcmVzcyB2YXJpYWJsZSBgaDFgIGZvbnQtc2l6ZSBhbmQgbWFyZ2luIHdpdGhpbiBgc2VjdGlvbmAgYW5kIGBhcnRpY2xlYFxuICogY29udGV4dHMgaW4gRmlyZWZveCA0KywgU2FmYXJpIDUsIGFuZCBDaHJvbWUuXG4gKi9cblxuaDEge1xuICBmb250LXNpemU6IDJlbTtcbiAgbWFyZ2luOiAwLjY3ZW0gMDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LlxuICovXG5cbm1hcmsge1xuICBiYWNrZ3JvdW5kOiAjZmYwO1xuICBjb2xvcjogIzAwMDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIGluY29uc2lzdGVudCBhbmQgdmFyaWFibGUgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5zbWFsbCB7XG4gIGZvbnQtc2l6ZTogODAlO1xufVxuXG4vKipcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGFmZmVjdGluZyBgbGluZS1oZWlnaHRgIGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5zdWIsXG5zdXAge1xuICBmb250LXNpemU6IDc1JTtcbiAgbGluZS1oZWlnaHQ6IDA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xufVxuXG5zdXAge1xuICB0b3A6IC0wLjVlbTtcbn1cblxuc3ViIHtcbiAgYm90dG9tOiAtMC4yNWVtO1xufVxuXG4vKiBFbWJlZGRlZCBjb250ZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIFJlbW92ZSBib3JkZXIgd2hlbiBpbnNpZGUgYGFgIGVsZW1lbnQgaW4gSUUgOC85LlxuICovXG5cbmltZyB7XG4gIGJvcmRlcjogMDtcbn1cblxuLyoqXG4gKiBDb3JyZWN0IG92ZXJmbG93IGRpc3BsYXllZCBvZGRseSBpbiBJRSA5LlxuICovXG5cbnN2Zzpub3QoOnJvb3QpIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLyogR3JvdXBpbmcgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBBZGRyZXNzIG1hcmdpbiBub3QgcHJlc2VudCBpbiBJRSA4LzkgYW5kIFNhZmFyaSA1LlxuICovXG5cbmZpZ3VyZSB7XG4gIG1hcmdpbjogMWVtIDQwcHg7XG59XG5cbi8qKlxuICogQWRkcmVzcyBkaWZmZXJlbmNlcyBiZXR3ZWVuIEZpcmVmb3ggYW5kIG90aGVyIGJyb3dzZXJzLlxuICovXG5cbmhyIHtcbiAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIGhlaWdodDogMDtcbn1cblxuLyoqXG4gKiBDb250YWluIG92ZXJmbG93IGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5wcmUge1xuICBvdmVyZmxvdzogYXV0bztcbn1cblxuLyoqXG4gKiBBZGRyZXNzIG9kZCBgZW1gLXVuaXQgZm9udCBzaXplIHJlbmRlcmluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuY29kZSxcbmtiZCxcbnByZSxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIGZvbnQtc2l6ZTogMWVtO1xufVxuXG4vKiBGb3Jtc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBLbm93biBsaW1pdGF0aW9uOiBieSBkZWZhdWx0LCBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYIGFsbG93IHZlcnkgbGltaXRlZFxuICogc3R5bGluZyBvZiBgc2VsZWN0YCwgdW5sZXNzIGEgYGJvcmRlcmAgcHJvcGVydHkgaXMgc2V0LlxuICovXG5cbi8qKlxuICogMS4gQ29ycmVjdCBjb2xvciBub3QgYmVpbmcgaW5oZXJpdGVkLlxuICogICAgS25vd24gaXNzdWU6IGFmZmVjdHMgY29sb3Igb2YgZGlzYWJsZWQgZWxlbWVudHMuXG4gKiAyLiBDb3JyZWN0IGZvbnQgcHJvcGVydGllcyBub3QgYmVpbmcgaW5oZXJpdGVkLlxuICogMy4gQWRkcmVzcyBtYXJnaW5zIHNldCBkaWZmZXJlbnRseSBpbiBGaXJlZm94IDQrLCBTYWZhcmkgNSwgYW5kIENocm9tZS5cbiAqL1xuXG5idXR0b24sXG5pbnB1dCxcbm9wdGdyb3VwLFxuc2VsZWN0LFxudGV4dGFyZWEge1xuICBjb2xvcjogaW5oZXJpdDsgLyogMSAqL1xuICBmb250OiBpbmhlcml0OyAvKiAyICovXG4gIG1hcmdpbjogMDsgLyogMyAqL1xufVxuXG4vKipcbiAqIEFkZHJlc3MgYG92ZXJmbG93YCBzZXQgdG8gYGhpZGRlbmAgaW4gSUUgOC85LzEwLlxuICovXG5cbmJ1dHRvbiB7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGB0ZXh0LXRyYW5zZm9ybWAgaW5oZXJpdGFuY2UgZm9yIGBidXR0b25gIGFuZCBgc2VsZWN0YC5cbiAqIEFsbCBvdGhlciBmb3JtIGNvbnRyb2wgZWxlbWVudHMgZG8gbm90IGluaGVyaXQgYHRleHQtdHJhbnNmb3JtYCB2YWx1ZXMuXG4gKiBDb3JyZWN0IGBidXR0b25gIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3gsIElFIDgrLCBhbmQgT3BlcmFcbiAqIENvcnJlY3QgYHNlbGVjdGAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveC5cbiAqL1xuXG5idXR0b24sXG5zZWxlY3Qge1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbn1cblxuLyoqXG4gKiAxLiBBdm9pZCB0aGUgV2ViS2l0IGJ1ZyBpbiBBbmRyb2lkIDQuMC4qIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYFxuICogICAgYW5kIGB2aWRlb2AgY29udHJvbHMuXG4gKiAyLiBDb3JyZWN0IGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgYGlucHV0YCB0eXBlcyBpbiBpT1MuXG4gKiAzLiBJbXByb3ZlIHVzYWJpbGl0eSBhbmQgY29uc2lzdGVuY3kgb2YgY3Vyc29yIHN0eWxlIGJldHdlZW4gaW1hZ2UtdHlwZVxuICogICAgYGlucHV0YCBhbmQgb3RoZXJzLlxuICovXG5cbmJ1dHRvbixcbmh0bWwgaW5wdXRbdHlwZT1cImJ1dHRvblwiXSwgLyogMSAqL1xuaW5wdXRbdHlwZT1cInJlc2V0XCJdLFxuaW5wdXRbdHlwZT1cInN1Ym1pdFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAyICovXG4gIGN1cnNvcjogcG9pbnRlcjsgLyogMyAqL1xufVxuXG4vKipcbiAqIFJlLXNldCBkZWZhdWx0IGN1cnNvciBmb3IgZGlzYWJsZWQgZWxlbWVudHMuXG4gKi9cblxuYnV0dG9uW2Rpc2FibGVkXSxcbmh0bWwgaW5wdXRbZGlzYWJsZWRdIHtcbiAgY3Vyc29yOiBkZWZhdWx0O1xufVxuXG4vKipcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBib3JkZXIgaW4gRmlyZWZveCA0Ky5cbiAqL1xuXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5pbnB1dDo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlcjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIEZpcmVmb3ggNCsgc2V0dGluZyBgbGluZS1oZWlnaHRgIG9uIGBpbnB1dGAgdXNpbmcgYCFpbXBvcnRhbnRgIGluXG4gKiB0aGUgVUEgc3R5bGVzaGVldC5cbiAqL1xuXG5pbnB1dCB7XG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XG59XG5cbi8qKlxuICogSXQncyByZWNvbW1lbmRlZCB0aGF0IHlvdSBkb24ndCBhdHRlbXB0IHRvIHN0eWxlIHRoZXNlIGVsZW1lbnRzLlxuICogRmlyZWZveCdzIGltcGxlbWVudGF0aW9uIGRvZXNuJ3QgcmVzcGVjdCBib3gtc2l6aW5nLCBwYWRkaW5nLCBvciB3aWR0aC5cbiAqXG4gKiAxLiBBZGRyZXNzIGJveCBzaXppbmcgc2V0IHRvIGBjb250ZW50LWJveGAgaW4gSUUgOC85LzEwLlxuICogMi4gUmVtb3ZlIGV4Y2VzcyBwYWRkaW5nIGluIElFIDgvOS8xMC5cbiAqL1xuXG5pbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0sXG5pbnB1dFt0eXBlPVwicmFkaW9cIl0ge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXG4gIHBhZGRpbmc6IDA7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBGaXggdGhlIGN1cnNvciBzdHlsZSBmb3IgQ2hyb21lJ3MgaW5jcmVtZW50L2RlY3JlbWVudCBidXR0b25zLiBGb3IgY2VydGFpblxuICogYGZvbnQtc2l6ZWAgdmFsdWVzIG9mIHRoZSBgaW5wdXRgLCBpdCBjYXVzZXMgdGhlIGN1cnNvciBzdHlsZSBvZiB0aGVcbiAqIGRlY3JlbWVudCBidXR0b24gdG8gY2hhbmdlIGZyb20gYGRlZmF1bHRgIHRvIGB0ZXh0YC5cbiAqL1xuXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gIGhlaWdodDogYXV0bztcbn1cblxuLyoqXG4gKiAxLiBBZGRyZXNzIGBhcHBlYXJhbmNlYCBzZXQgdG8gYHNlYXJjaGZpZWxkYCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lLlxuICogMi4gQWRkcmVzcyBgYm94LXNpemluZ2Agc2V0IHRvIGBib3JkZXItYm94YCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lXG4gKiAgICAoaW5jbHVkZSBgLW1vemAgdG8gZnV0dXJlLXByb29mKS5cbiAqL1xuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7IC8qIDEgKi9cbiAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBjb250ZW50LWJveDsgLyogMiAqL1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbn1cblxuLyoqXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgc2VhcmNoIGNhbmNlbCBidXR0b24gaW4gU2FmYXJpIGFuZCBDaHJvbWUgb24gT1MgWC5cbiAqIFNhZmFyaSAoYnV0IG5vdCBDaHJvbWUpIGNsaXBzIHRoZSBjYW5jZWwgYnV0dG9uIHdoZW4gdGhlIHNlYXJjaCBpbnB1dCBoYXNcbiAqIHBhZGRpbmcgKGFuZCBgdGV4dGZpZWxkYCBhcHBlYXJhbmNlKS5cbiAqL1xuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbn1cblxuLyoqXG4gKiBEZWZpbmUgY29uc2lzdGVudCBib3JkZXIsIG1hcmdpbiwgYW5kIHBhZGRpbmcuXG4gKi9cblxuZmllbGRzZXQge1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICBtYXJnaW46IDAgMnB4O1xuICBwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCBgY29sb3JgIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gSUUgOC85LlxuICogMi4gUmVtb3ZlIHBhZGRpbmcgc28gcGVvcGxlIGFyZW4ndCBjYXVnaHQgb3V0IGlmIHRoZXkgemVybyBvdXQgZmllbGRzZXRzLlxuICovXG5cbmxlZ2VuZCB7XG4gIGJvcmRlcjogMDsgLyogMSAqL1xuICBwYWRkaW5nOiAwOyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDgvOS5cbiAqL1xuXG50ZXh0YXJlYSB7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4vKipcbiAqIERvbid0IGluaGVyaXQgdGhlIGBmb250LXdlaWdodGAgKGFwcGxpZWQgYnkgYSBydWxlIGFib3ZlKS5cbiAqIE5PVEU6IHRoZSBkZWZhdWx0IGNhbm5vdCBzYWZlbHkgYmUgY2hhbmdlZCBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYLlxuICovXG5cbm9wdGdyb3VwIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi8qIFRhYmxlc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgbW9zdCBzcGFjaW5nIGJldHdlZW4gdGFibGUgY2VsbHMuXG4gKi9cblxudGFibGUge1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBib3JkZXItc3BhY2luZzogMDtcbn1cblxudGQsXG50aCB7XG4gIHBhZGRpbmc6IDA7XG59XG4iLCIvKiBfbGF5b3V0LnNjc3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8vIExheW91dFxuJGJvZHlNYXhXaWR0aDogNDRyZW07XG4kYm9keU1pbldpZHRoOiAxOHJlbTtcbiRtYXJnaW46IDJyZW07XG5cbiVjb250ZW50LXdpZHRoIHtcbiAgbWF4LXdpZHRoOiAkYm9keU1heFdpZHRoO1xuICB3aWR0aDogNzAlO1xuICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuXG4gIEBpbmNsdWRlIG1lZGlhKHNwKSB7XG4gICAgd2lkdGg6IDkwJTtcbiAgICBtYXJnaW4tcmlnaHQ6IDUlO1xuICAgIG1hcmdpbi1sZWZ0OiA1JTtcbiAgfVxufVxuXG4uZy1oZWFkZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1hcmdpbi1ib3R0b206IDJyZW07XG5cbiAgLmMtc2l0ZW5hbWUge1xuICAgIEBleHRlbmQgJWNvbnRlbnQtd2lkdGg7XG4gIH1cblxuICAuYy1zaXRlbmFtZSA+IGEge1xuICAgIHRleHQtc2hhZG93OiAwIDAgdHJhbnNwYXJlbnQ7XG4gICAgdHJhbnNpdGlvbjogdGV4dC1zaGFkb3cgLjRzIGVhc2U7XG4gICAgY29sb3I6ICRjb2xvci1iYXNlO1xuXG4gICAgJjpob3ZlciB7XG4gICAgICB0ZXh0LXNoYWRvdzogbG9uZ3NoYWRvdygjNTQzLCA3KTtcbiAgICB9XG4gIH1cbn1cblxuLmluZGV4IC5nLWhlYWRlciB7XG4gIGhlaWdodDogNDB2aDtcblxuICAuYy1zaXRlbmFtZSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICByaWdodDogMDtcbiAgICBib3R0b206IDA7XG4gICAgbGVmdDogMDtcbiAgICBtYXJnaW46IGF1dG87XG4gICAgaGVpZ2h0OiAkbGluZS1oZWlnaHQtYmFzZSAqIDFlbTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBmb250LXNpemU6IDEwdm1pbjtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgICBAaW5jbHVkZSBtZWRpYShzcCkge1xuICAgICAgZm9udC1zaXplOiAxMnZtaW47XG4gICAgfVxuICB9XG5cbiAgLnNpdGVkZXNjcmlwdGlvbiB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogLjI1cmVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICByaWdodDogMXJlbTtcbiAgICBsZWZ0OiAxcmVtO1xuICB9XG59XG5cblxuLm1haW4ge1xuICBAZXh0ZW5kICVjb250ZW50LXdpZHRoO1xuICBtYXJnaW4tYm90dG9tOiAkbWFyZ2luO1xufVxuXG4uZ2xvYmFsRm9vdGVyIHtcbiAgQGV4dGVuZCAlY29udGVudC13aWR0aDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nLXRvcDogJG1hcmdpbiAvIDI7XG4gIHBhZGRpbmctYm90dG9tOiAkbWFyZ2luIC8gMjtcbiAgbWFyZ2luLXRvcDogJG1hcmdpbjtcblxuICAuc25zLWxpc3Qge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3R0b206IDFyZW07XG4gICAgcmlnaHQ6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuXG4gICAgJiA+IGxpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAxcmVtO1xuICAgIH1cbiAgfVxufVxuXG4uYmFjazJ0b3Age1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgJiA+IGEge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBoZWlnaHQ6IDFlbSAqICRsaW5lLWhlaWdodC1iYXNlO1xuICAgIHdpZHRoOiAxZW0gKiAkbGluZS1oZWlnaHQtYmFzZTtcbiAgICBAZXh0ZW5kICVmb250LXNpemUtbGFyZ2UteDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkY29sb3ItYmFzZTtcbiAgICBib3JkZXItcmFkaXVzOiA1MSU7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbn1cblxuLnNpdGUtbmF2IHtcbiAgbWFyZ2luOiAxcmVtIDA7XG4gIHBhZGRpbmc6IDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIEBleHRlbmQgLmMtZmxhdC1saXN0O1xuXG4gICYgPiBsaSB7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgfVxuXG4gICYgPiBsaSA+IGEge1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgfVxuXG4gICYgPiBsaSA+IGE6aG92ZXIge1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICB9XG59XG5cbi5jb3B5cmlnaHQge1xuICBtYXJnaW46IC41ZW0gMDtcblxuICBhLFxuICBhOnZpc2l0ZWQge1xuICAgIGNvbG9yOiAkY29sb3ItdGV4dDtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIH1cbn0iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAvXG4vLyBfbWl4aW4uc2Nzc1xuLy8gbWl4aW4g44KEIGZ1bmN0aW9u44Gq44GpXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAvXG5cblxuLy8gZm9udC1zaXplIOOCkmVt44GocmVt44Gn5Ye65YqbXG5AbWl4aW4gZnooJHB4LCAkYmFzZTokZm9udC1zaXplLWJhc2UpIHtcbiAgZm9udC1zaXplOiBlbSgkcHgsICRiYXNlKTtcbiAgQGlmICRiYXNlICE9ICRmb250LXNpemUtYmFzZSB7XG4gICAgZm9udC1zaXplOiByZW0oJHB4KTtcbiAgfVxufVxuXG4vLyBtZWRpYSBxdWVyeSDjga7nrqHnkIZcbkBtaXhpbiBtZWRpYSgkYnApIHtcbiAgJGJwLXdpZHRoOiBlbSg3NjgpO1xuICBAaWYgJGJwID09ICdzcCcge1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRicC13aWR0aCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG4gIEBlbHNlIGlmICRicCA9PSAnbWlkJyB7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTgwcHgpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxuICBAZWxzZSBpZiAkYnAgPT0gJ2xhcmdlJyB7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJGJwLXdpZHRoICogMikge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG59IiwiLy8gLS0gVmFyaWFibGUgLS1cblxuLy8gQ29sb3JcblxuLy9CYXNlIENvbG9yXG4kY29sb3ItYmFzZS1ibGFjazogICAgIzJBMkIyRTtcbiRjb2xvci1iYXNlLWJsdWU6ICAgICAjMTE0QjVGO1xuJGNvbG9yLWJhc2Utb2Zmd2hpdGU6ICNFRkZGQzg7XG4kY29sb3ItYmFzZS1ncmVlbjogICAgIzAwQUE4ODtcbiRjb2xvci1iYXNlLWxpbWU6ICAgICAjODVDQjMzO1xuJGNvbG9yLWJhc2UtZ3JheTogICAgICNlYWVhZWE7XG4kY29sb3ItYmFzZS1vcmFuZ2U6ICAgI0U0NTcyRTtcblxuJGNvbG9yLWJhc2Utd2hpdGU6IGxpZ2h0ZW4oJGNvbG9yLWJhc2Utb2Zmd2hpdGUsIDkuNSUpO1xuXG4kY29sb3ItYmFzZTogICAgICAkY29sb3ItYmFzZS1vcmFuZ2U7XG4kY29sb3ItYmFzZS1saWdodDogbGlnaHRlbigkY29sb3ItYmFzZSwgMTAlKTtcbiRjb2xvci1iYXNlLWRhcms6IGRhcmtlbigkY29sb3ItYmFzZSwgMTAlKTtcbiRjb2xvci1ib2R5LWJnOiAgICRjb2xvci1iYXNlLXdoaXRlO1xuJGNvbG9yLXRleHQ6ICRjb2xvci1iYXNlLWJsYWNrO1xuJGNvbG9yLWFjY2VudDogICAgJGNvbG9yLWJhc2Utb3JhbmdlO1xuXG4kY29sb3ItbGluazogJGNvbG9yLWJhc2UtZGFyaztcblxuLy8gRm9udFxuJGZvbnQtc2l6ZS1iYXNlOiAxNjtcbiRsaW5lLWhlaWdodC1iYXNlOiAyNiAvICRmb250LXNpemUtYmFzZTsiLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gX2Z1bmN0aW9uLnNjc3Ncbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIHB4IOOCkiBlbSDjga7lgKTjgavlpInmj5tcbkBmdW5jdGlvbiBlbSgkcHgsICRiYXNlOiRmb250LXNpemUtYmFzZSwgJHVuaXQ6ZW0pIHtcbiAgQGlmICR1bml0ID09IGVtIHtcbiAgICBAcmV0dXJuICgkcHggLyAkYmFzZSkgKiAxZW07XG4gIH1AZWxzZWlmICR1bml0ID09IG5vbmUge1xuICAgIEByZXR1cm4gKCRweCAvICRiYXNlKTtcbiAgfVxufVxuXG4vLyBweCDjgpIgcmVtIOOBruWApOOBq+WkieaPm1xuQGZ1bmN0aW9uIHJlbSgkcHgpIHtcbiAgQHJldHVybiAoJHB4IC8gJGZvbnQtc2l6ZS1iYXNlKSAqIDFyZW07XG59XG5cbi8vIHJldHVybiBsb25nLXNoYWRvd1xuQGZ1bmN0aW9uIGxvbmdzaGFkb3coJGNvbG9yLCAkZGlzKSB7XG4gICR2YWw6IDAgMCAkY29sb3I7XG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJGRpcyB7XG4gICAgJHZhbDogI3skdmFsfSwgI3skaX1weCAjeyRpfXB4ICN7JGNvbG9yfTtcbiAgfVxuICBAcmV0dXJuICR2YWw7XG59IiwiLyogX2NvcmUuc2Nzc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuaHRtbCB7XG4gIGJhY2tncm91bmQ6ICRjb2xvci1ib2R5LWJnO1xuICBjb2xvcjogJGNvbG9yLXRleHQ7XG4gIGZvbnQtZmFtaWx5OiBcIlNvdXJjZSBTYW5zIFByb1wiLCBcIuODkuODqeOCruODjuinkuOCtCBQcm9OXCIsIFwiSGlyYWdpbm8gS2FrdSBHb3RoaWMgUHJvTlwiLCBcIuODoeOCpOODquOCqlwiLCBNZWlyeW8sIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogKCRmb250LXNpemUtYmFzZSAvIDE2KSArIGVtO1xuICBsaW5lLWhlaWdodDogJGxpbmUtaGVpZ2h0LWJhc2U7XG59XG5cbmEge1xuICBjb2xvcjogJGNvbG9yLWxpbms7XG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICB0cmFuc2l0aW9uOiBjb2xvciAuMTVzIGVhc2U7XG59XG5cbmE6aG92ZXIge1xuICBjb2xvcjogbGlnaHRlbigkY29sb3ItbGluaywgMTAlKTtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuXG5hOmFjdGl2ZSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdG9wOiAxcHg7XG59XG5cbmE6dmlzaXRlZCB7XG4gIGNvbG9yOiBkYXJrZW4oJGNvbG9yLWxpbmssIDEwJSk7XG59XG5cbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYge1xuICBjbGVhcjogYm90aDtcbiAgZm9udC1mZWF0dXJlLXNldHRpbmdzOiBcImtlcm5cIiAxO1xuICBmb250LXZhcmlhbnQ6IHByb3BvcnRpb25hbC13aWR0aDtcbn1cblxuYWJiclt0aXRsZV0ge1xuICBib3JkZXItYm90dG9tLXdpZHRoOiAwO1xufVxuXG5maWd1cmUge1xuICBtYXJnaW46IDA7XG59XG5cbmZpZ2NhcHRpb24ge1xuICBAZXh0ZW5kICVmb250LXNpemUtc21hbGxlcjtcbn1cblxuLyogLS0gU291cmNlIENvZGUgLS0gKi9cbmNvZGUge1xuICBmb250LWZhbWlseTogXCJTb3VyY2UgQ29kZSBQcm9cIiwgbW9ub3NwYWNlO1xufSIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBfZXh0ZW5kcy5zY3NzXG4vLyBwbGFjZWhvbGRlclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuJWZvbnQtdmlnYSB7XG4gIGZvbnQtZmFtaWx5OiBcIlZpZ2FcIiwgc2Fucy1zZXJpZjtcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbn1cblxuJWZvbnQtZGVmYXVsdCB7XG4gIGZvbnQtZmFtaWx5OiBcIlNvdXJjZSBTYW5zIFByb1wiLCBcIuODkuODqeOCruODjuinkuOCtCBQcm9OXCIsIFwiSGlyYWdpbm8gS2FrdSBHb3RoaWMgUHJvTlwiLCBcIuODoeOCpOODquOCqlwiLCBNZWlyeW8sIHNhbnMtc2VyaWY7XG4gIGxldHRlci1zcGFjaW5nOiAwO1xufVxuXG4lZm9udC1zaXplLXNtYWxsZXIge1xuICBAaW5jbHVkZSBmeigxNCk7XG59XG5cbiVmb250LXNpemUtYmFzZSB7XG4gIEBpbmNsdWRlIGZ6KCRmb250LXNpemUtYmFzZSk7XG59XG5cbiVmb250LXNpemUtbGFyZ2Uge1xuICBAaW5jbHVkZSBmeigxOCk7XG59XG5cbiVmb250LXNpemUtbGFyZ2UteCB7XG4gIEBpbmNsdWRlIGZ6KDI0KTtcbn1cblxuJWZvbnQtc2l6ZS1sYXJnZS14eCB7XG4gIEBpbmNsdWRlIGZ6KDMyKTtcbn1cblxuJWZvbnQtc2l6ZS1sYXJnZS14eHgge1xuICBAaW5jbHVkZSBmeig0OCk7XG59XG5cbiVwcmltYXJ5SGVhZGluZyB7XG4gIG1hcmdpbi10b3A6IDA7XG4gIEBleHRlbmQgJWZvbnQtc2l6ZS1sYXJnZS14eDtcbiAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIEBpbmNsdWRlIG1lZGlhKHNwKSB7XG4gICAgQGluY2x1ZGUgZnooMjQpO1xuICB9XG59XG5cbi8qIC0tICVidXR0b25TaW1wbGUgLS0gKi9cbiVjLWJ1dHRvbiB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcGFkZGluZzogM3B4IC41ZW07XG4gIGJvcmRlci1ib3R0b206IDNweCBzb2xpZCBkYXJrZW4oJGNvbG9yLWFjY2VudCwgMTAlKTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWFjY2VudDtcbiAgY29sb3I6ICRjb2xvci1iYXNlLXdoaXRlO1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIGZvbnQtc2l6ZTogZW0oMjApO1xuICBAZXh0ZW5kICVmb250LXZpZ2E7XG4gIGxpbmUtaGVpZ2h0OiAxLjE7XG4gIHRyYW5zaXRpb246IGFsbCAuMXMgZWFzZTtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuXG4lYnV0dG9uU2ltcGxlIHtcbiAgQGV4dGVuZCAlYy1idXR0b247XG4gIEBleHRlbmQgJWZvbnQtZGVmYXVsdDtcbiAgcGFkZGluZzogMXB4IDVweCAycHg7XG4gIGJvcmRlci13aWR0aDogMCAxcHggMCAxcHg7XG4gIGJvcmRlci1zdHlsZTogc29saWQ7XG4gIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIGNvbG9yOiAkY29sb3ItYWNjZW50O1xuICBmb250LXNpemU6IGVtKDE2KTtcblxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kOiAkY29sb3ItYWNjZW50O1xuICAgIGNvbG9yOiAkY29sb3ItYmFzZS13aGl0ZTtcbiAgfVxufVxuIiwiLyogX2NvbnBvbmVudC5zY3NzXG4gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi5jLXNpdGVuYW1lIHtcbiAgZm9udC1mYW1pbHk6IFwiVmlnYVwiLCBzYW5zLXNlcmlmO1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcblxuICBhIHtcbiAgICBjb2xvcjogJGNvbG9yLXRleHQ7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICB9XG59XG5cbi5jLWljb24ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi5jLWZsYXQtbGlzdCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIHBhZGRpbmctbGVmdDogMDtcbn1cblxuLmMtZmxhdC1saXN0ID4gbGksXG4uYy1mbGF0LWxpc3QgPiBkdCxcbi5jLWZsYXQtbGlzdCA+IGRkIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBtYXJnaW4tcmlnaHQ6IC41cmVtO1xuXG4gICY6bGFzdC1jaGlsZCB7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuICB9XG59XG5cbi8qIC0tIHRhZyAtLSAqL1xuLmMtdGFnIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbi1yaWdodDogLjVlbTtcbiAgcGFkZGluZzogMCAxLjc1ZW0gMCAxZW07XG4gIGJvcmRlci1yYWRpdXM6IGVtKDMpIDAgMCBlbSgzKTtcbiAgYmFja2dyb3VuZDogJGNvbG9yLWJhc2UtZ3JheTtcbiAgJjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IFwiIFwiO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogLjRlbTtcbiAgICBib3R0b206IDA7XG4gICAgaGVpZ2h0OiBlbSg0KTtcbiAgICB3aWR0aDogZW0oNCk7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWJvZHktYmc7XG4gICAgbGluZS1oZWlnaHQ6IDE7XG4gIH1cbiAgJjphZnRlciB7XG4gICAgY29udGVudDogXCIgXCI7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICByaWdodDogMDtcbiAgICBib3R0b206IDA7XG4gICAgd2lkdGg6IDA7XG4gICAgaGVpZ2h0OiAwO1xuICAgIG1hcmdpbjogYXV0bztcbiAgICBib3JkZXI6IDFlbSBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItcmlnaHQtY29sb3I6ICRjb2xvci1ib2R5LWJnO1xuICB9XG59XG5cbi8qIC0tIFNpdGVOYW1lIC0tKi9cbi5zaXRlTmFtZSB7XG4gIHNwYW4ge1xuICAgIGxldHRlci1zcGFjaW5nOiAtLjFlbTtcbiAgfVxufSIsIi8qXG4gX2luZGV4LnNjc3NcbiBUT1Djg5rjg7zjgrjplqLpgKNcbiAqL1xuXG4uc2l0ZURlc2NyaXB0aW9uIHtcbiAgbWFyZ2luOiAwO1xufVxuXG4ucmVjZW50QXJ0aWNsZVNlY3Rpb24gaDEge1xuICBAZXh0ZW5kICVmb250LXNpemUtbGFyZ2UteDtcbn1cblxuLnJlY2VudC1hcnRpY2xlIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBsaXN0LXN0eWxlOiBub25lO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4ucmVjZW50LWFydGljbGUtaXRlbSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGZsb2F0OiBsZWZ0O1xuICB3aWR0aDogNDcuNSU7XG4gIG1hcmdpbi1sZWZ0OiA1JTtcbiAgbWFyZ2luLWJvdHRvbTogMnJlbTtcblxuICAmOm50aC1jaGlsZCgybisyKSB7XG4gICAgY2xlYXI6IGxlZnQ7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gIH1cblxuICBAaW5jbHVkZSBtZWRpYShzcCkge1xuICAgd2lkdGg6IDEwMCU7XG4gICBoZWlnaHQ6IGF1dG87XG4gICBtYXJnaW46IDAgMCAxLjVyZW0gMDtcbiAgfVxuXG4gICYgPiBhIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgcGFkZGluZzogMXJlbTtcbiAgICB0cmFuc2l0aW9uOiBhbGwgLjJzIGVhc2U7XG5cbiAgICAmOmhvdmVyIHtcbiAgICAgIGJvcmRlci1yYWRpdXM6IGVtKDUpO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWJhc2UtZ3JheTtcbiAgICB9XG4gIH1cblxufVxuXG4ucmVjZW50LWFydGljbGUtaXRlbS1wdWJsaXNoZWQtdGltZSB7XG4gIGZvbnQtZmFtaWx5OiBcIlZpZ2FcIiwgc2Fucy1zZXJpZjtcbiAgY29sb3I6ICRjb2xvci10ZXh0O1xufVxuXG4ucmVjZW50LWFydGljbGUtaXRlbS10aXRsZSB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogLjJyZW0gMCAuM3JlbTtcbiAgQGV4dGVuZCAlZm9udC1zaXplLWxhcmdlO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBsaW5lLWhlaWdodDogMS4yO1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbn1cblxuLnJlY2VudC1hcnRpY2xlLWl0ZW06Zmlyc3QtY2hpbGQge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiBhdXRvO1xuICBtYXgtd2lkdGg6ICRib2R5TWF4V2lkdGg7XG4gIGZsb2F0OiBub25lO1xuICBtYXJnaW4tbGVmdDogMDtcbiAgbWFyZ2luLWJvdHRvbTogMnJlbTtcblxuICBAaW5jbHVkZSBtZWRpYShtaWQpIHtcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gIH1cblxuICAucmVjZW50LWFydGljbGUtaXRlbS10aXRsZSB7XG4gICAgQGV4dGVuZCAlZm9udC1zaXplLWxhcmdlLXh4O1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjb2xvcjogJGNvbG9yLWJhc2U7XG4gICAgdGV4dC1zaGFkb3c6IGxvbmdzaGFkb3coI2ZmZiwzKTtcblxuXG4gICAgQGluY2x1ZGUgbWVkaWEoc3ApIHtcbiAgICAgIEBpbmNsdWRlIGZ6KDIyKTtcbiAgICB9XG4gIH1cblxuICAucmVjZW50LWFydGljbGUtaXRlbS10aXRsZSA+IGEge1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgfVxuICAucmVjZW50LWFydGljbGUtaXRlbS1kZXNjcmlwdGlvbiB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGNvbG9yOiAkY29sb3ItdGV4dDtcbiAgICBAZXh0ZW5kICVmb250LXNpemUtc21hbGxlcjtcbiAgfVxufSIsIi8qXG4gX2FydGljbGUuc2Nzc1xuIOiomOS6i+ODmuODvOOCuOOBruOCueOCv+OCpOODq1xuKi9cblxuLyogLS0gQXJ0aWNsZSAtLSAqL1xuLnAtYXJ0aWNsZS1oZWFkZXIge1xuICBtYXJnaW46IDRyZW0gMDtcbn1cblxuLnAtYXJ0aWNsZS10aXRsZSB7XG4gIEBleHRlbmQgJXByaW1hcnlIZWFkaW5nO1xufVxuXG4vKiAtLSAuYXJ0aWNsZUluZm8gLS0gKi9cbi5hcnRpY2xlLWluZm8ge1xuICBAZXh0ZW5kICVmb250LXNpemUtc21hbGxlcjtcbn1cblxuLmFydGljbGUtaW5mby1sYWJlbHtcbiAgZmxvYXQ6IGxlZnQ7XG59XG5cbi5hcnRpY2xlLWluZm8tbGFiZWwge1xuXG4gICY6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiOlwiO1xuICAgIG1hcmdpbjogMCAuMTVyZW07XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIH1cbn1cblxuLmFydGljbGUtaW5mby1wcm9wIHtcbiAgbWFyZ2luLWxlZnQ6IDA7XG59XG5cbi5hcnRpY2xlLXRhZyB7XG4gIEBleHRlbmQgLmMtdGFnO1xufVxuXG4vKiAtLSDmnKzmlofjgqjjg6rjgqIgLS0gKi9cbi5hcnRpY2xlLWJvZHkge1xuICBoMiB7XG4gICAgbWFyZ2luLXRvcDogM3JlbTtcbiAgICBAaW5jbHVkZSBtZWRpYShzcCkge1xuICAgICAgbGluZS1oZWlnaHQ6ICgyMCAvICRmb250LXNpemUtYmFzZSk7XG4gICAgICBAaW5jbHVkZSBmeigyMCk7XG4gICAgfVxuICB9XG5cbiAgcCB7XG4gICAgbWFyZ2luOiBlbSgyNCkgMDtcbiAgICBjb2RlIHtcbiAgICAgIG1hcmdpbjogMCAycHg7XG4gICAgICBwYWRkaW5nOiAwIDNweCAycHg7XG4gICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICBiYWNrZ3JvdW5kOiAkY29sb3ItYmFzZS1ncmF5O1xuICAgICAgQGV4dGVuZCAlZm9udC1zaXplLXNtYWxsZXI7XG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICAgIH1cbiAgfVxuXG4gIHVsLG9sIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDFlbTtcbiAgfVxuXG4gIGR0IHtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgfVxuXG4gIGRkIHtcbiAgICBtYXJnaW4tbGVmdDogMDtcbiAgfVxuXG4gIGRkICsgZHQge1xuICAgIG1hcmdpbi10b3A6IC41ZW07XG4gIH1cblxuICBociB7XG4gICAgbWFyZ2luOiAxLjc1ZW0gM2VtO1xuICAgIGJvcmRlcjogMDtcbiAgICBib3JkZXItdG9wOiAuMmVtIHNvbGlkICRjb2xvci1iYXNlLWdyYXk7XG4gIH1cblxuICB0YWJsZSB7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIG1pbi13aWR0aDogNTAlO1xuICAgIG1hcmdpbjogMWVtIGF1dG8gMS43NWVtO1xuICAgIEBpbmNsdWRlIG1lZGlhKHNwKSB7XG4gICAgICBAaW5jbHVkZSBmeigxNCk7XG4gICAgfVxuICB9XG5cbiAgY2FwdGlvbiB7XG4gICAgbWFyZ2luLWJvdHRvbTogLjI1ZW07XG4gIH1cblxuICB0ZCwgdGgge1xuICAgIHBhZGRpbmc6IDFlbTtcbiAgICBAaW5jbHVkZSBtZWRpYShzcCkge1xuICAgICAgcGFkZGluZzogLjI1ZW07XG4gICAgfVxuICB9XG5cbiAgdGgge1xuICAgIHBhZGRpbmctYm90dG9tOiAuNWVtO1xuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAkY29sb3ItYmFzZTtcbiAgfVxuXG4gIHRkIHtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGNvbG9yLWJhc2UtbGltZTtcbiAgfVxuXG4gIGltZyB7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICB9XG5cbiAgaW1nW2NsYXNzXj1cIm10LWltYWdlXCJdIHtcbiAgICBoZWlnaHQ6IGF1dG87XG4gIH1cblxuICAubXQtaW1hZ2UtbGVmdCB7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gICAgbWFyZ2luOiAwICRtYXJnaW4gJG1hcmdpbiAwO1xuICAgIEBpbmNsdWRlIG1lZGlhKHNwKSB7XG4gICAgICBtYXJnaW46IDAgJG1hcmdpbiAvIDIgJG1hcmdpbiAvIDIgMDtcbiAgICB9XG4gIH1cblxuICAubXQtaW1hZ2UtcmlnaHQge1xuICAgIGZsb2F0OiByaWdodDtcbiAgICBtYXJnaW46IDAgMCAkbWFyZ2luICRtYXJnaW47XG4gICAgQGluY2x1ZGUgbWVkaWEoc3ApIHtcbiAgICAgIG1hcmdpbjogMCAwICRtYXJnaW4gLyAyICRtYXJnaW4gLyAyO1xuICAgIH1cbiAgfVxuXG4gIC5tdC1pbWFnZS1jZW50ZXIge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBtYXJnaW46IDAgYXV0byAuNWVtO1xuICB9XG5cbiAgYmxvY2txdW90ZSB7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgIHBhZGRpbmctbGVmdDogMWVtO1xuICAgIGJvcmRlci1sZWZ0OiAzcHggc29saWQgJGNvbG9yLWJhc2UtZ3JheTtcbiAgfVxuXG4gIGNpdGUge1xuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICB9XG59XG5cbi5jb2RlIHtcbiAgZHQge1xuICAgIEBleHRlbmQgJWZvbnQtdmlnYTtcbiAgfVxuICBkZCB7XG4gICAgbWFyZ2luOiAwO1xuICAgIEBleHRlbmQgJWZvbnQtc2l6ZS1zbWFsbGVyO1xuICB9XG59XG5cbi8qIC0tIFF1b3RlIC0tKi9cbi5xdW90ZSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgcGFkZGluZzogLjVlbSAxcmVtIDNlbSAxcmVtO1xuICBiYWNrZ3JvdW5kOiAkY29sb3ItYmFzZS1ncmF5O1xuICBkZCB7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gIH1cbiAgYmxvY2txdW90ZSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICB9XG4gIC5jaXRlIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IDFyZW07XG4gICAgYm90dG9tOiAxcmVtO1xuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICB9XG59XG5cbi5lbWJlZC1pZnJhbWUge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nLWJvdHRvbTogOSAvIDE2ICogMTAwJTtcblxuICAmID4gaWZyYW1lIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAwO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxufVxuXG4vKiAtLSDlj4LogIPjgavjgZfjgZ9XZWLjg5rjg7zjgrggLS0gKi9cbi5yZWZlcmVuY2Utd2ViLXBhZ2UgPiBkZCB7XG4gIG1hcmdpbjogMCAwIC4yNXJlbTtcbn1cblxuLy8gcGVybWFsaW5rXG4ucC1hcnRpY2xlLXBlcm1hbGluayB7XG4gIG1hcmdpbjogJG1hcmdpbiAwO1xufVxuXG4ucC1hcnRpY2xlLXBlcm1hbGluay1sYWJlbCB7XG4gIG1hcmdpbi10b3A6ICRtYXJnaW4gLyAyO1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLnAtYXJ0aWNsZS1wZXJtYWxpbmstbGluayB7XG4gIG1hcmdpbi1sZWZ0OiAwO1xuICBAZXh0ZW5kICVmb250LXNpemUtc21hbGxlcjtcbn1cblxuLy8gYXJ0aWNsZSBib3R0b20gYWRzXG4uYXJ0aWNsZUFkcyB7XG4gIG1hcmdpbjogMnJlbSAwO1xufVxuXG4uYXJ0aWNsZS1hZHMtdGl0bGUge1xuICBAZXh0ZW5kICVmb250LXNpemUtc21hbGxlcjtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRjb2xvci1iYXNlLWdyYXk7XG59XG5cbi8vIHBhZ2VyXG4ucC1hcnRpY2xlLXBhZ2VyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW46IDRyZW0gYXV0bztcbn1cblxuLnAtYXJ0aWNsZS1wYWdlci1sYWJlbCB7XG4gIHdpZHRoOiA1MCU7XG4gIG1hcmdpbi10b3A6ICRtYXJnaW4gLyAyO1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLnAtYXJ0aWNsZS1wYWdlci1saW5rIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgd2lkdGg6IDUwJTtcbiAgbWFyZ2luLWxlZnQ6IDA7XG4gIEBleHRlbmQgJWZvbnQtc2l6ZS1zbWFsbGVyO1xufVxuXG4ucC1hcnRpY2xlLXBhZ2VyLW9sZGVyIHtcbiAgcGFkZGluZy1yaWdodDogMXJlbTtcblxuICBAaW5jbHVkZSBtZWRpYShzcCkge1xuICAgIHBhZGRpbmctcmlnaHQ6IC41cmVtO1xuICB9XG59XG5cbi5wLWFydGljbGUtcGFnZXItbmV3ZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIG1hcmdpbi10b3A6IDA7XG4gIHBhZGRpbmctbGVmdDogMXJlbTtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG5cbiAgQGluY2x1ZGUgbWVkaWEoc3ApIHtcbiAgICBwYWRkaW5nLWxlZnQ6IC41cmVtO1xuICB9XG59XG5cbi5wLWFydGljbGUtcGFnZXItbmV3ZXIucC1hcnRpY2xlLXBhZ2VyLWxpbmsge1xuICB0b3A6IDEuNXJlbTtcbn1cblxuIiwiLyogX2FyY2hpdmUuc2Nzc1xuICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4uYXJjaGl2ZUhlYWRlciB7fVxuXG4uYXJjaGl2ZS10aXRsZSB7XG4gIEBleHRlbmQgJXByaW1hcnlIZWFkaW5nO1xufVxuXG4uYXJjaGl2ZS1saXN0IHtcbiAgcGFkZGluZy1sZWZ0OiAwO1xuICBsaXN0LXN0eWxlOiBub25lO1xufVxuXG4uYXJjaGl2ZS1saXN0LWl0ZW0ge1xuICAuYXJ0aWNsZS1pbmZvIHtcbiAgICB3aWR0aDogYXV0bztcbiAgICBtYXJnaW4tYm90dG9tOiAuNXJlbTtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICB9XG4gIC5hcnRpY2xlLWluZm8tbGFiZWw6Zmlyc3QtY2hpbGQge1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICB9XG59XG5cbi5hcmNoaXZlLWxpc3QtaXRlbS10aXRsZSB7XG4gIG1hcmdpbjogMCAwIDJyZW07XG4gIEBleHRlbmQgJWZvbnQtc2l6ZS1sYXJnZTtcbiAgbGluZS1oZWlnaHQ6IDEuMztcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICYgPiBhIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIH1cbn1cbiIsIi8qXG4gX3BhZ2Uuc2Nzc1xuIOOCpuOCp+ODluODmuODvOOCuOOBruOCueOCv+OCpOODq1xuKi9cblxuLyogLS0gUGFnZSAtLSAqL1xuLnBhZ2VTZWN0aW9uSGVhZGVyIHtcbiAgaDEge1xuICAgIEBleHRlbmQgJXByaW1hcnlIZWFkaW5nO1xuICB9XG59XG5cbi8qIC0tIFBhZ2UgQWJvdXQgLS0qL1xuLnByb2ZpbGVQaG90byB7XG4gIGZsb2F0OiBsZWZ0O1xuICB3aWR0aDogMjUlO1xuICBoZWlnaHQ6IGF1dG87XG4gIG1heC13aWR0aDogOWVtO1xuICBtYXJnaW4tcmlnaHQ6IDFlbTtcbiAgbWFyZ2luLWJvdHRvbTogMWVtO1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG59IiwiLyohXG5cbmdpdGh1Yi5jb20gc3R5bGUgKGMpIFZhc2lseSBQb2xvdm55b3YgPHZhc3RAd2hpdGVhbnRzLm5ldD5cblxuKi9cblxuLmhsanMge1xuICBkaXNwbGF5OiBibG9jaztcbiAgb3ZlcmZsb3cteDogYXV0bztcbiAgcGFkZGluZzogMC41ZW07XG4gIGNvbG9yOiAjMzMzO1xuICBiYWNrZ3JvdW5kOiAjZjhmOGY4O1xuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IG5vbmU7XG59XG5cbi5obGpzLWNvbW1lbnQsXG4uZGlmZiAuaGxqcy1oZWFkZXIsXG4uaGxqcy1qYXZhZG9jIHtcbiAgY29sb3I6ICM5OTg7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbn1cblxuLmhsanMta2V5d29yZCxcbi5jc3MgLnJ1bGUgLmhsanMta2V5d29yZCxcbi5obGpzLXdpbnV0aWxzLFxuLm5naW54IC5obGpzLXRpdGxlLFxuLmhsanMtc3Vic3QsXG4uaGxqcy1yZXF1ZXN0LFxuLmhsanMtc3RhdHVzIHtcbiAgY29sb3I6ICMzMzM7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4uaGxqcy1udW1iZXIsXG4uaGxqcy1oZXhjb2xvcixcbi5ydWJ5IC5obGpzLWNvbnN0YW50IHtcbiAgY29sb3I6ICMwMDgwODA7XG59XG5cbi5obGpzLXN0cmluZyxcbi5obGpzLXRhZyAuaGxqcy12YWx1ZSxcbi5obGpzLXBocGRvYyxcbi5obGpzLWRhcnRkb2MsXG4udGV4IC5obGpzLWZvcm11bGEge1xuICBjb2xvcjogI2QxNDtcbn1cblxuLmhsanMtdGl0bGUsXG4uaGxqcy1pZCxcbi5zY3NzIC5obGpzLXByZXByb2Nlc3NvciB7XG4gIGNvbG9yOiAjOTAwO1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLmhsanMtbGlzdCAuaGxqcy1rZXl3b3JkLFxuLmhsanMtc3Vic3Qge1xuICBmb250LXdlaWdodDogbm9ybWFsO1xufVxuXG4uaGxqcy1jbGFzcyAuaGxqcy10aXRsZSxcbi5obGpzLXR5cGUsXG4udmhkbCAuaGxqcy1saXRlcmFsLFxuLnRleCAuaGxqcy1jb21tYW5kIHtcbiAgY29sb3I6ICM0NTg7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4uaGxqcy10YWcsXG4uaGxqcy10YWcgLmhsanMtdGl0bGUsXG4uaGxqcy1ydWxlcyAuaGxqcy1wcm9wZXJ0eSxcbi5kamFuZ28gLmhsanMtdGFnIC5obGpzLWtleXdvcmQge1xuICBjb2xvcjogIzAwMDA4MDtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbn1cblxuLmhsanMtYXR0cmlidXRlLFxuLmhsanMtdmFyaWFibGUsXG4ubGlzcCAuaGxqcy1ib2R5IHtcbiAgY29sb3I6ICMwMDgwODA7XG59XG5cbi5obGpzLXJlZ2V4cCB7XG4gIGNvbG9yOiAjMDA5OTI2O1xufVxuXG4uaGxqcy1zeW1ib2wsXG4ucnVieSAuaGxqcy1zeW1ib2wgLmhsanMtc3RyaW5nLFxuLmxpc3AgLmhsanMta2V5d29yZCxcbi5jbG9qdXJlIC5obGpzLWtleXdvcmQsXG4uc2NoZW1lIC5obGpzLWtleXdvcmQsXG4udGV4IC5obGpzLXNwZWNpYWwsXG4uaGxqcy1wcm9tcHQge1xuICBjb2xvcjogIzk5MDA3Mztcbn1cblxuLmhsanMtYnVpbHRfaW4ge1xuICBjb2xvcjogIzAwODZiMztcbn1cblxuLmhsanMtcHJlcHJvY2Vzc29yLFxuLmhsanMtcHJhZ21hLFxuLmhsanMtcGksXG4uaGxqcy1kb2N0eXBlLFxuLmhsanMtc2hlYmFuZyxcbi5obGpzLWNkYXRhIHtcbiAgY29sb3I6ICM5OTk7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4uaGxqcy1kZWxldGlvbiB7XG4gIGJhY2tncm91bmQ6ICNmZGQ7XG59XG5cbi5obGpzLWFkZGl0aW9uIHtcbiAgYmFja2dyb3VuZDogI2RmZDtcbn1cblxuLmRpZmYgLmhsanMtY2hhbmdlIHtcbiAgYmFja2dyb3VuZDogIzAwODZiMztcbn1cblxuLmhsanMtY2h1bmsge1xuICBjb2xvcjogI2FhYTtcbn1cbiJdfQ== */